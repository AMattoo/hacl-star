/* This file auto-generated by KreMLin! */
#ifndef __Hacl_EC_Curve25519_recursive_H
#define __Hacl_EC_Curve25519_recursive_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_Seq_Properties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "Hacl_UInt64.h"
#include "Hacl_UInt128.h"
#include "Hacl_UInt32.h"
#include "Hacl_UInt8.h"
#include "Hacl_Cast.h"
#include "FStar_Buffer.h"
#include "kremlib.h"
#include "testlib.h"

/*
extern uint8_t Hacl_EC_Curve25519_recursive_zero_8;

extern uint64_t Hacl_EC_Curve25519_recursive_zero_64;

extern FStar_UInt128_t Hacl_EC_Curve25519_recursive_zero_128;

extern uint8_t Hacl_EC_Curve25519_recursive_one_8;

extern uint64_t Hacl_EC_Curve25519_recursive_one_64;

typedef uint64_t Hacl_EC_Curve25519_recursive_limb;

typedef FStar_UInt128_t Hacl_EC_Curve25519_recursive_wide_limb;

typedef uint64_t *Hacl_EC_Curve25519_recursive_felem;

typedef FStar_UInt128_t *Hacl_EC_Curve25519_recursive_felem_wide;

typedef uint8_t *Hacl_EC_Curve25519_recursive_uint8_p;

extern uint32_t Hacl_EC_Curve25519_recursive_len;

extern uint32_t Hacl_EC_Curve25519_recursive_limb_size;

extern uint64_t Hacl_EC_Curve25519_recursive_two54m152;

extern uint64_t Hacl_EC_Curve25519_recursive_two54m8;

extern uint64_t Hacl_EC_Curve25519_recursive_nineteen;

extern uint64_t Hacl_EC_Curve25519_recursive_mask_51;

void Hacl_EC_Curve25519_recursive_fsum(uint64_t *a, uint64_t *b);

void Hacl_EC_Curve25519_recursive_fdifference(uint64_t *a, uint64_t *b);

void
Hacl_EC_Curve25519_recursive_fscalar_(
  FStar_UInt128_t *output,
  uint64_t *a,
  uint64_t s,
  uint32_t ctr
);

void Hacl_EC_Curve25519_recursive_carry_wide_(FStar_UInt128_t *t, uint32_t ctr);

void
Hacl_EC_Curve25519_recursive_copy_from_wide_(
  uint64_t *output,
  FStar_UInt128_t *input,
  uint32_t ctr
);

void Hacl_EC_Curve25519_recursive_fscalar_product(uint64_t *output, uint64_t *a, uint64_t s);

void Hacl_EC_Curve25519_recursive_shift_(uint64_t *output, uint64_t tmp, uint32_t ctr);

void Hacl_EC_Curve25519_recursive_shift_reduce(uint64_t *output);

void
Hacl_EC_Curve25519_recursive_sum_scalar_multiplication_(
  FStar_UInt128_t *output,
  uint64_t *input,
  uint64_t s,
  uint32_t ctr
);

void
Hacl_EC_Curve25519_recursive_mul_shift_reduce_(
  FStar_UInt128_t *output,
  uint64_t *input,
  uint64_t *input2,
  uint32_t ctr
);

void Hacl_EC_Curve25519_recursive_fmul(uint64_t *output, uint64_t *input, uint64_t *input2);

void Hacl_EC_Curve25519_recursive_fsquare_(uint64_t *output, FStar_UInt128_t *t);

void
Hacl_EC_Curve25519_recursive_fsquare_times_(
  uint64_t *output,
  FStar_UInt128_t *tmp,
  uint32_t count
);

void
Hacl_EC_Curve25519_recursive_fsquare_times(uint64_t *output, uint64_t *input, uint32_t count);
*/

uint64_t Hacl_EC_Curve25519_recursive_load64_le(uint8_t *b);

void Hacl_EC_Curve25519_recursive_store64_le(uint8_t *b, uint64_t z);

void Hacl_EC_Curve25519_recursive_fexpand(uint64_t *output, uint8_t *input);

void Hacl_EC_Curve25519_recursive_fcontract(uint8_t *output, uint64_t *input);

void
Hacl_EC_Curve25519_recursive_fmonty(
  uint64_t *x2,
  uint64_t *z2,
  uint64_t *x3,
  uint64_t *z3,
  uint64_t *x,
  uint64_t *z,
  uint64_t *xprime,
  uint64_t *zprime,
  uint64_t *qmqp
);

void
Hacl_EC_Curve25519_recursive_swap_conditional_(
  uint64_t *a,
  uint64_t *b,
  uint64_t swap,
  uint32_t ctr
);

void Hacl_EC_Curve25519_recursive_swap_conditional(uint64_t *a, uint64_t *b, uint64_t iswap);

void
Hacl_EC_Curve25519_recursive_cmult_small_loop(
  uint64_t *nqx,
  uint64_t *nqz,
  uint64_t *nqpqx,
  uint64_t *nqpqz,
  uint64_t *nqx2,
  uint64_t *nqz2,
  uint64_t *nqpqx2,
  uint64_t *nqpqz2,
  uint64_t *q,
  uint8_t byte,
  uint32_t i
);

void
Hacl_EC_Curve25519_recursive_cmult_big_loop(
  uint8_t *n,
  uint64_t *nqx,
  uint64_t *nqz,
  uint64_t *nqpqx,
  uint64_t *nqpqz,
  uint64_t *nqx2,
  uint64_t *nqz2,
  uint64_t *nqpqx2,
  uint64_t *nqpqz2,
  uint64_t *q,
  uint32_t i
);

void
Hacl_EC_Curve25519_recursive_cmult(
  uint64_t *resultx,
  uint64_t *resultz,
  uint8_t *n,
  uint64_t *q
);

void Hacl_EC_Curve25519_recursive_crecip(uint64_t *out, uint64_t *z);

void
Hacl_EC_Curve25519_recursive_crypto_scalarmult_curve25519_donna_c64(
  uint8_t *mypublic,
  uint8_t *secret,
  uint8_t *basepoint
);
#endif
