/* This file auto-generated by KreMLin! */
#ifndef __Hacl_EC_Curve25519_H
#define __Hacl_EC_Curve25519_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_Seq_Properties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "Hacl_UInt64.h"
#include "Hacl_UInt128.h"
#include "Hacl_UInt32.h"
#include "Hacl_UInt8.h"
#include "Hacl_Cast.h"
#include "FStar_Buffer.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Hacl_EC_Curve25519_Parameters.h"
#include "Hacl_EC_Curve25519_Bigint.h"
#include "Hacl_EC_Curve25519_Utils.h"
#include "Hacl_EC_Curve25519_Bignum_Fproduct.h"
#include "Hacl_EC_Curve25519_Bignum_Fscalar.h"
#include "Hacl_EC_Curve25519_Bignum_Fdifference.h"
#include "Hacl_EC_Curve25519_Bignum_Fsum.h"
#include "Hacl_EC_Curve25519_Bignum_Modulo.h"
#include "Hacl_EC_Curve25519_Bignum.h"
#include "Hacl_EC_Curve25519_PPoint.h"
#include "Hacl_EC_Curve25519_AddAndDouble.h"
#include "Hacl_UInt16.h"
#include "Hacl_Types.h"
#include "Hacl_Symmetric_Poly1305_64_Parameters.h"
#include "Hacl_Symmetric_Poly1305_64_Bigint.h"
#include "Hacl_Symmetric_HSalsa20.h"
#include "Hacl_Symmetric_Poly1305_64.h"
#include "Hacl_Symmetric_Salsa20.h"
#include "Hacl_Policies.h"
#include "Hacl_Constants.h"
#include "Hacl_SecretBox.h"
#include "Hacl_EC_Curve25519_Ladder.h"
#include "Hacl_EC_Curve25519_Crecip.h"
#include "kremlib.h"

void Hacl_EC_Curve25519_format_scalar(uint8_t *scalar);

void Hacl_EC_Curve25519_expand_0(uint64_t *output, uint8_t *input);

void Hacl_EC_Curve25519_expand_1(uint64_t *output, uint8_t *input);

void Hacl_EC_Curve25519_expand_2(uint64_t *output, uint8_t *input);

void Hacl_EC_Curve25519_expand_3(uint64_t *output, uint8_t *input);

void Hacl_EC_Curve25519_expand_4(uint64_t *output, uint8_t *input);

void Hacl_EC_Curve25519_expand(uint64_t *output, uint8_t *input);

void Hacl_EC_Curve25519_contract_0(uint8_t *output, uint64_t *input);

void Hacl_EC_Curve25519_contract_1(uint8_t *output, uint64_t *input);

void Hacl_EC_Curve25519_contract_2(uint8_t *output, uint64_t *input);

void Hacl_EC_Curve25519_contract_3(uint8_t *output, uint64_t *input);

void Hacl_EC_Curve25519_contract_4(uint8_t *output, uint64_t *input);

void Hacl_EC_Curve25519_contract(uint8_t *output, uint64_t *input);

void
Hacl_EC_Curve25519_mk_q(
  uint8_t *output,
  uint8_t *q_x,
  uint8_t *pk,
  Hacl_EC_Curve25519_PPoint_point q
);

void
Hacl_EC_Curve25519_exp_2(
  uint8_t *output,
  uint8_t *q_x,
  uint8_t *scalar,
  Hacl_EC_Curve25519_PPoint_point basepoint
);

void Hacl_EC_Curve25519_exp_1(uint8_t *output, uint8_t *q_x, uint8_t *scalar);

void Hacl_EC_Curve25519_exp(uint8_t *output, uint8_t *q_x, uint8_t *scalar);
#endif
