/* This file auto-generated by KreMLin! */
#ifndef __Hacl_Symmetric_Poly1305_64_H
#define __Hacl_Symmetric_Poly1305_64_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "Hacl_UInt64.h"
#include "Hacl_UInt128.h"
#include "Hacl_UInt32.h"
#include "Hacl_UInt8.h"
#include "Hacl_Cast.h"
#include "FStar_Buffer.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Hacl_EC_Curve25519_Parameters.h"
#include "Hacl_EC_Curve25519_Bigint.h"
#include "Hacl_EC_Curve25519_Utils.h"
#include "Hacl_EC_Curve25519_Bignum_Fproduct.h"
#include "Hacl_EC_Curve25519_Bignum_Fscalar.h"
#include "Hacl_EC_Curve25519_Bignum_Fdifference.h"
#include "Hacl_EC_Curve25519_Bignum_Fsum.h"
#include "Hacl_EC_Curve25519_Bignum_Modulo.h"
#include "Hacl_EC_Curve25519_Bignum.h"
#include "Hacl_EC_Curve25519_PPoint.h"
#include "Hacl_EC_Curve25519_AddAndDouble.h"
#include "Hacl_UInt16.h"
#include "Hacl_Types.h"
#include "Hacl_Symmetric_Poly1305_64_Parameters.h"
#include "Hacl_Symmetric_Poly1305_64_Bigint.h"
#include "Hacl_Symmetric_HSalsa20.h"
#include "kremlib.h"

typedef uint64_t *Hacl_Symmetric_Poly1305_64_poly1305_state;

uint64_t Hacl_Symmetric_Poly1305_64_load64_le(uint8_t *b);

void Hacl_Symmetric_Poly1305_64_store64_le(uint8_t *b, uint64_t z);

void Hacl_Symmetric_Poly1305_64_poly1305_init(uint64_t *st, uint8_t *key);

void
Hacl_Symmetric_Poly1305_64_poly1305_blocks_loop(
  uint64_t *st,
  uint8_t *m,
  uint64_t len,
  uint64_t r0,
  uint64_t r1,
  uint64_t r2,
  uint64_t s1,
  uint64_t s2,
  uint64_t h0,
  uint64_t h1,
  uint64_t h2
);

void Hacl_Symmetric_Poly1305_64_poly1305_blocks(uint64_t *st, uint8_t *m, uint64_t len);

void Hacl_Symmetric_Poly1305_64_poly1305_finish_(uint8_t *m, uint64_t rem, uint64_t *st);

void Hacl_Symmetric_Poly1305_64_poly1305_finish__(uint8_t *mac, uint8_t *key, uint64_t *st);

void
Hacl_Symmetric_Poly1305_64_poly1305_finish(
  uint8_t *mac,
  uint8_t *m,
  uint64_t len,
  uint8_t *key,
  uint64_t *st
);

void
Hacl_Symmetric_Poly1305_64_crypto_onetimeauth(
  uint8_t *output,
  uint8_t *input,
  uint64_t len,
  uint8_t *k
);
#endif
