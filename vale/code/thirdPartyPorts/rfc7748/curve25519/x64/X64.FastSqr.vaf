include "../../../../arch/x64/X64.Vale.InsBasic.vaf"
include "../../../../arch/x64/X64.Vale.InsMem.vaf"
include{:fstar}{:open} "FastMul_helpers"
include{:fstar}{:open} "FastMul_defs"
include{:fstar}{:open} "X64.CPU_Features_s"

module X64.FastSqr

#reset-options "--z3rlimit 30"

#verbatim{:interface}
open Types_s
open Arch.Types
open X64.Machine_s
open X64.Memory
open X64.Vale.State
open X64.Vale.Decls
open X64.Vale.InsBasic
open X64.Vale.InsMem
open X64.Vale.QuickCode
open X64.Vale.QuickCodes
open FastMul_defs
open X64.CPU_Features_s
#endverbatim

#verbatim{:implementation}
open Types_s
open Arch.Types
open X64.Machine_s
open X64.Memory
open X64.Vale.State
open X64.Vale.Decls
open X64.Vale.InsBasic
open X64.Vale.InsMem
open X64.Vale.QuickCode
open X64.Vale.QuickCodes
open FStar.Tactics
open FastMul_defs
open FastMul_helpers
open X64.CPU_Features_s
#endverbatim

type tactic:Type(0) extern;
const int_canon:tactic extern;
ghost procedure assert_by_tactic(ghost p:prop, ghost t:tactic) extern;

/*
void sqr2_256x256_integer_x64(uint64_t *const c, uint64_t *const a) {
  __asm__ __volatile__(
    "movq   (%1), %%rdx        ;" /* A[0]      */
    "mulx  8(%1),  %%r8, %%r14 ;" /* A[1]*A[0] */  "xorl %%r15d, %%r15d;"
    "mulx 16(%1),  %%r9, %%r10 ;" /* A[2]*A[0] */  "adcx %%r14,  %%r9 ;"
    "mulx 24(%1), %%rax, %%rcx ;" /* A[3]*A[0] */  "adcx %%rax, %%r10 ;"
    "movq 24(%1), %%rdx        ;" /* A[3]      */
    "mulx  8(%1), %%r11, %%r12 ;" /* A[1]*A[3] */  "adcx %%rcx, %%r11 ;"
    "mulx 16(%1), %%rax, %%r13 ;" /* A[2]*A[3] */  "adcx %%rax, %%r12 ;"
    "movq  8(%1), %%rdx        ;" /* A[1]      */  "adcx %%r15, %%r13 ;"
    "mulx 16(%1), %%rax, %%rcx ;" /* A[2]*A[1] */  "movq    $0, %%r14 ;"
    /*******************************************/  "adcx %%r15, %%r14 ;"

    "xorl %%r15d, %%r15d;"
    "adox %%rax, %%r10 ;"  "adcx  %%r8,  %%r8 ;"
    "adox %%rcx, %%r11 ;"  "adcx  %%r9,  %%r9 ;"
    "adox %%r15, %%r12 ;"  "adcx %%r10, %%r10 ;"
    "adox %%r15, %%r13 ;"  "adcx %%r11, %%r11 ;"
    "adox %%r15, %%r14 ;"  "adcx %%r12, %%r12 ;"
                           "adcx %%r13, %%r13 ;"
                           "adcx %%r14, %%r14 ;"

    "movq   (%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* A[0]^2 */
    /********************/  "movq %%rax,  0(%0) ;"
    "addq %%rcx,  %%r8 ;"   "movq  %%r8,  8(%0) ;"
    "movq  8(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* A[1]^2 */
    "adcq %%rax,  %%r9 ;"   "movq  %%r9, 16(%0) ;"
    "adcq %%rcx, %%r10 ;"   "movq %%r10, 24(%0) ;"
    "movq 16(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* A[2]^2 */
    "adcq %%rax, %%r11 ;"   "movq %%r11, 32(%0) ;"
    "adcq %%rcx, %%r12 ;"   "movq %%r12, 40(%0) ;"
    "movq 24(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* A[3]^2 */
    "adcq %%rax, %%r13 ;"   "movq %%r13, 48(%0) ;"
    "adcq %%rcx, %%r14 ;"   "movq %%r14, 56(%0) ;"


    "movq 32(%1), %%rdx        ;" /* B[0]      */
    "mulx 40(%1),  %%r8, %%r14 ;" /* B[1]*B[0] */  "xorl %%r15d, %%r15d;"
    "mulx 48(%1),  %%r9, %%r10 ;" /* B[2]*B[0] */  "adcx %%r14,  %%r9 ;"
    "mulx 56(%1), %%rax, %%rcx ;" /* B[3]*B[0] */  "adcx %%rax, %%r10 ;"
    "movq 56(%1), %%rdx        ;" /* B[3]      */
    "mulx 40(%1), %%r11, %%r12 ;" /* B[1]*B[3] */  "adcx %%rcx, %%r11 ;"
    "mulx 48(%1), %%rax, %%r13 ;" /* B[2]*B[3] */  "adcx %%rax, %%r12 ;"
    "movq 40(%1), %%rdx        ;" /* B[1]      */  "adcx %%r15, %%r13 ;"
    "mulx 48(%1), %%rax, %%rcx ;" /* B[2]*B[1] */  "movq    $0, %%r14 ;"
    /*******************************************/  "adcx %%r15, %%r14 ;"

    "xorl %%r15d, %%r15d;"
    "adox %%rax, %%r10 ;"  "adcx  %%r8,  %%r8 ;"
    "adox %%rcx, %%r11 ;"  "adcx  %%r9,  %%r9 ;"
    "adox %%r15, %%r12 ;"  "adcx %%r10, %%r10 ;"
    "adox %%r15, %%r13 ;"  "adcx %%r11, %%r11 ;"
    "adox %%r15, %%r14 ;"  "adcx %%r12, %%r12 ;"
                           "adcx %%r13, %%r13 ;"
                           "adcx %%r14, %%r14 ;"

    "movq 32(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* B[0]^2 */
    /********************/  "movq %%rax,  64(%0) ;"
    "addq %%rcx,  %%r8 ;"   "movq  %%r8,  72(%0) ;"
    "movq 40(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* B[1]^2 */
    "adcq %%rax,  %%r9 ;"   "movq  %%r9,  80(%0) ;"
    "adcq %%rcx, %%r10 ;"   "movq %%r10,  88(%0) ;"
    "movq 48(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* B[2]^2 */
    "adcq %%rax, %%r11 ;"   "movq %%r11,  96(%0) ;"
    "adcq %%rcx, %%r12 ;"   "movq %%r12, 104(%0) ;"
    "movq 56(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* B[3]^2 */
    "adcq %%rax, %%r13 ;"   "movq %%r13, 112(%0) ;"
    "adcq %%rcx, %%r14 ;"   "movq %%r14, 120(%0) ;"
  :
  : "r" (c), "r" (a)
  : "memory", "cc", "%rax", "%rcx", "%rdx",
    "%r8", "%r9", "%r10", "%r11", "%r12", "%r13", "%r14", "%r15"
  );}
*/

#reset-options "--z3rlimit 300"
procedure{:quick} fast_sqr_part1(
    ghost inA_b:buffer64)
    lets
        inA_ptr @= rsi;

        a0 := buffer64_read(inA_b, 0, mem);
        a1 := buffer64_read(inA_b, 1, mem);
        a2 := buffer64_read(inA_b, 2, mem);
        a3 := buffer64_read(inA_b, 3, mem);

        a := pow2_four(a0, a1, a2, a3);
    reads
        inA_ptr; mem; memTaint;

    modifies
        rax; rcx; rdx; r8; r9; r10; r11; r12; r13; r14; r15;
        efl;

    requires
        adx_enabled && bmi2_enabled;

        validSrcAddrs64(mem, inA_ptr, inA_b, 4, memTaint, Secret);

    ensures
        pow2_six(r8, r9, r10, r11, r12, r13) ==
        pow2_five(mul_nats(a0,a1), mul_nats(a0,a2), mul_nats(a0,a3), mul_nats(a1,a3), mul_nats(a2,a3));

        pow2_64 * rcx + rax == a1 * a2;

        r14 == 0;
{
    xor_lemmas();

//    "movq   (%1), %%rdx        ;" /* A[0]      */
//    "mulx  8(%1),  %%r8, %%r14 ;" /* A[1]*A[0] */  "xorl %%r15d, %%r15d;"
//    "mulx 16(%1),  %%r9, %%r10 ;" /* A[2]*A[0] */  "adcx %%r14,  %%r9 ;"
//    "mulx 24(%1), %%rax, %%rcx ;" /* A[3]*A[0] */  "adcx %%rax, %%r10 ;"
//    "movq 24(%1), %%rdx        ;" /* A[3]      */
//    "mulx  8(%1), %%r11, %%r12 ;" /* A[1]*A[3] */  "adcx %%rcx, %%r11 ;"
//    "mulx 16(%1), %%rax, %%r13 ;" /* A[2]*A[3] */  "adcx %%rax, %%r12 ;"
//    "movq  8(%1), %%rdx        ;" /* A[1]      */  "adcx %%r15, %%r13 ;"
//    "mulx 16(%1), %%rax, %%rcx ;" /* A[2]*A[1] */  "movq    $0, %%r14 ;"
//    /*******************************************/  "adcx %%r15, %%r14 ;"

    Load64_buffer(rdx, inA_ptr,  0, Secret, inA_b, 0);     /* A[0] */
    lemma_load_mem64(inA_b, 1, mem);
    /* The Xor64 clears the flags used for carry bits; NOTE: Original code uses xorl with r15d, maybe produces smaller code? */
    Mulx64(r14, r8, Mem(inA_ptr,  8, inA_b, 1, Secret));  /* A[0]*A[1] */ lemma_prod_bounds(r14,  r8, a0, a1);  Xor64(r15, r15);  

    lemma_load_mem64(inA_b, 2, mem);
    Mulx64(r10, r9, Mem(inA_ptr, 16, inA_b, 2, Secret));  /* A[0]*A[2] */ lemma_prod_bounds(r10,  r9, a0, a2);  Adcx64Wrap( r9, r14);    
    
    lemma_load_mem64(inA_b, 3, mem);
    Mulx64(rcx,rax, Mem(inA_ptr, 24, inA_b, 3, Secret));  /* A[0]*A[3] */ lemma_prod_bounds(rcx, rax, a0, a3);  Adcx64Wrap(r10, rax);    

    Load64_buffer(rdx, inA_ptr,  24, Secret, inA_b, 3);     /* A[3] */

    lemma_load_mem64(inA_b, 1, mem);
    Mulx64(r12,r11, Mem(inA_ptr,  8, inA_b, 1, Secret));  /* A[3]*A[1] */ lemma_prod_bounds(r12, r11, a3, a1);  Adcx64Wrap(r11, rcx);

    lemma_load_mem64(inA_b, 2, mem);
    Mulx64(r13,rax, Mem(inA_ptr, 16, inA_b, 2, Secret));  /* A[3]*A[2] */ lemma_prod_bounds(r13, rax, a3, a2);  Adcx64Wrap(r12, rax);    

    Load64_buffer(rdx, inA_ptr,   8, Secret, inA_b, 1);     /* A[1] */                                          Adcx64Wrap(r13, r15);  // r15 = 0, r13 < pow2_64 - 1, so this wraps the carry into r13

//    assert !cf(efl);

    lemma_load_mem64(inA_b, 2, mem);
    Mulx64(rcx,rax, Mem(inA_ptr, 16, inA_b, 2, Secret));  /* A[1]*A[2] */ lemma_prod_bounds(rcx, rax, a1, a2);  Mov64(r14, 0);

//    assert r14 == 0;
//    assert r15 == 0;
//    Adcx64Wrap(r14, r15);     // <-- This appears to be redundant as cf, r14, and r15 are all provably 0 at this point

}

#reset-options "--z3rlimit 3000"
procedure{:quick} fast_sqr_part2()
    modifies
        rax; rcx; rdx; r8; r9; r10; r11; r12; r13; r14; r15;
        efl;

    requires
        adx_enabled && bmi2_enabled;
        r14 == 0;

    ensures
        pow2_seven(r8, r9, r10, r11, r12, r13, r14) ==
        old(pow2_six(2*r8, 2*r9, 2*(r10 + rax), 2*(r11+rcx), 2*r12, 2*r13));

        r14 <= 2;
{
    xor_lemmas();

    Xor64(r15, r15);
    Adox64Wrap(r10, rax);     Adcx64Wrap(r8, r8);
    Adox64Wrap(r11, rcx);     Adcx64Wrap(r9, r9);
    Adox64Wrap(r12, r15);     Adcx64Wrap(r10, r10);
    Adox64Wrap(r13, r15);     Adcx64Wrap(r11, r11);
    Adox64Wrap(r14, r15);     Adcx64Wrap(r12, r12);
                              Adcx64Wrap(r13, r13);
                              Adcx64Wrap(r14, r14);
}

#reset-options "--z3rlimit 30000" 
procedure{:quick} fast_sqr_part3(
    ghost dst_b:buffer64,
    ghost inA_b:buffer64)
    lets
        dst_ptr @= rdi;
        inA_ptr @= rsi;

        a0 := buffer64_read(inA_b, 0, mem);
        a1 := buffer64_read(inA_b, 1, mem);
        a2 := buffer64_read(inA_b, 2, mem);
        a3 := buffer64_read(inA_b, 3, mem);

        a := pow2_four(a0, a1, a2, a3);
    reads
        dst_ptr; inA_ptr; memTaint;

    modifies
        rax; rcx; rdx; r8; r9; r10; r11; r12; r13; r14; r15;
        mem; efl;

    requires
        adx_enabled && bmi2_enabled;
        buffers_disjoint(dst_b, inA_b);

        r14 <= 2;

        validDstAddrs64(mem, dst_ptr, dst_b, 8, memTaint, Secret);
        validSrcAddrs64(mem, inA_ptr, inA_b, 4, memTaint, Secret);

    ensures
        let d0 := buffer64_read(dst_b, 0, mem);
        let d1 := buffer64_read(dst_b, 1, mem);
        let d2 := buffer64_read(dst_b, 2, mem);
        let d3 := buffer64_read(dst_b, 3, mem);
        let d4 := buffer64_read(dst_b, 4, mem);
        let d5 := buffer64_read(dst_b, 5, mem);
        let d6 := buffer64_read(dst_b, 6, mem);
        let d7 := buffer64_read(dst_b, 7, mem);
        
        pow2_nine(d0, d1, d2, d3, d4, d5, d6, d7, bool_bit(cf(efl))) ==
        old(pow2_eight(mul_nats(a0,a0), r8, mul_nats(a1,a1) + r9, r10, mul_nats(a2,a2) + r11, r12, mul_nats(a3,a3) + r13, r14));

        validSrcAddrs64(mem, dst_ptr, dst_b, 8, memTaint, Secret);
        modifies_buffer(dst_b, old(mem), mem);
{
    xor_lemmas();

//    "movq   (%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* A[0]^2 */
//    /********************/  "movq %%rax,  0(%0) ;"
//    "addq %%rcx,  %%r8 ;"   "movq  %%r8,  8(%0) ;"
//    "movq  8(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* A[1]^2 */
//    "adcq %%rax,  %%r9 ;"   "movq  %%r9, 16(%0) ;"
//    "adcq %%rcx, %%r10 ;"   "movq %%r10, 24(%0) ;"
//    "movq 16(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* A[2]^2 */
//    "adcq %%rax, %%r11 ;"   "movq %%r11, 32(%0) ;"
//    "adcq %%rcx, %%r12 ;"   "movq %%r12, 40(%0) ;"
//    "movq 24(%1), %%rdx ;"  "mulx %%rdx, %%rax, %%rcx ;" /* A[3]^2 */
//    "adcq %%rax, %%r13 ;"   "movq %%r13, 48(%0) ;"
//    "adcq %%rcx, %%r14 ;"   "movq %%r14, 56(%0) ;"

    Load64_buffer(rdx, inA_ptr,  0, Secret, inA_b, 0);   Mulx64(rcx, rax, rdx);  /* A[0]^2 */
    /********************/                               Store64_buffer(dst_ptr, rax,  0, Secret, dst_b, 0);
    Add64Wrap(r8, rcx);                                  Store64_buffer(dst_ptr,  r8,  8, Secret, dst_b, 1);
    Load64_buffer(rdx, inA_ptr,  8, Secret, inA_b, 1);   Mulx64(rcx, rax, rdx);  /* A[1]^2Secret,  */
    Adcx64Wrap( r9, rax);                                Store64_buffer(dst_ptr,  r9, 16, Secret, dst_b, 2);
    Adcx64Wrap(r10, rcx);                                Store64_buffer(dst_ptr, r10, 24, Secret, dst_b, 3);
    Load64_buffer(rdx, inA_ptr, 16, Secret, inA_b, 2);   Mulx64(rcx, rax, rdx);  /* A[2]^2Secret,  */
    Adcx64Wrap(r11, rax);                                Store64_buffer(dst_ptr, r11, 32, Secret, dst_b, 4);
    Adcx64Wrap(r12, rcx);                                Store64_buffer(dst_ptr, r12, 40, Secret, dst_b, 5);
    Load64_buffer(rdx, inA_ptr, 24, Secret, inA_b, 3);   Mulx64(rcx, rax, rdx);  /* A[3]^2Secret,  */       lemma_prod_bounds(rcx, rax, rdx, rdx);
    Adcx64Wrap(r13, rax);                                Store64_buffer(dst_ptr, r13, 48, Secret, dst_b, 6);
    Adcx64Wrap(r14, rcx);                                Store64_buffer(dst_ptr, r14, 56, Secret, dst_b, 7);
}

procedure{:quick} fast_sqr(
    ghost dst_b:buffer64,
    ghost inA_b:buffer64)
    lets
        dst_ptr @= rdi;
        inA_ptr @= rsi;

        a0 := buffer64_read(inA_b, 0, mem);
        a1 := buffer64_read(inA_b, 1, mem);
        a2 := buffer64_read(inA_b, 2, mem);
        a3 := buffer64_read(inA_b, 3, mem);

        a := pow2_four(a0, a1, a2, a3);
    reads
        dst_ptr; inA_ptr; memTaint;

    modifies
        rax; rcx; rdx; r8; r9; r10; r11; r12; r13; r14; r15;
        mem; efl;

    requires
        adx_enabled && bmi2_enabled;
        buffers_disjoint(dst_b, inA_b);

        validDstAddrs64(mem, dst_ptr, dst_b, 8, memTaint, Secret);
        validSrcAddrs64(mem, inA_ptr, inA_b, 4, memTaint, Secret);

    ensures
        let d0 := buffer64_read(dst_b, 0, mem);
        let d1 := buffer64_read(dst_b, 1, mem);
        let d2 := buffer64_read(dst_b, 2, mem);
        let d3 := buffer64_read(dst_b, 3, mem);
        let d4 := buffer64_read(dst_b, 4, mem);
        let d5 := buffer64_read(dst_b, 5, mem);
        let d6 := buffer64_read(dst_b, 6, mem);
        let d7 := buffer64_read(dst_b, 7, mem);
        let d := pow2_eight(d0, d1, d2, d3, d4, d5, d6, d7);
        d == a * a;

        validSrcAddrs64(mem, dst_ptr, dst_b, 8, memTaint, Secret);
        modifies_buffer(dst_b, old(mem), mem);
{
    assert_by_tactic(a*a == pow2_seven(mul_nats(a0,a0), 2*mul_nats(a0,a1), 2*mul_nats(a0,a2) + mul_nats(a1,a1), 2*(mul_nats(a0,a3)+mul_nats(a1,a2)), 2*mul_nats(a1,a3) + mul_nats(a2,a2), 2*mul_nats(a2,a3), mul_nats(a3,a3)), int_canon);      // PASSES
    fast_sqr_part1(inA_b);

    ghost var old_r8  := r8;
    ghost var old_r9  := r9;
    ghost var old_r10 := r10;
    ghost var old_r11 := r11;
    ghost var old_r12 := r12;
    ghost var old_r13 := r13;
    ghost var old_rax := rax;
    ghost var old_rcx := rcx;

    fast_sqr_part2();

    ghost var mid_r8  := r8;
    ghost var mid_r9  := r9;
    ghost var mid_r10 := r10;
    ghost var mid_r11 := r11;
    ghost var mid_r12 := r12;
    ghost var mid_r13 := r13;
    ghost var mid_r14 := r14;

    fast_sqr_part3(dst_b, inA_b);

    ghost var d0 := buffer64_read(dst_b, 0, mem);
    ghost var d1 := buffer64_read(dst_b, 1, mem);
    ghost var d2 := buffer64_read(dst_b, 2, mem);
    ghost var d3 := buffer64_read(dst_b, 3, mem);
    ghost var d4 := buffer64_read(dst_b, 4, mem);
    ghost var d5 := buffer64_read(dst_b, 5, mem);
    ghost var d6 := buffer64_read(dst_b, 6, mem);
    ghost var d7 := buffer64_read(dst_b, 7, mem);
    lemma_sqr(a, a0, a1, a2, a3, 
              old_r8, old_r9, old_r10, old_r11, old_r12, old_r13, old_rax, old_rcx,
              mid_r8, mid_r9, mid_r10, mid_r11, mid_r12, mid_r13, mid_r14,
              d0, d1, d2, d3, d4, d5, d6, d7, bool_bit(cf(efl)));
}


#reset-options "--z3rlimit 20"

procedure{:quick}{:public} fast_sqr_stdcall(
    inline win:bool,
    ghost dst_b:buffer64,
    ghost inA_b:buffer64,
    ghost stack_b:buffer64)
    lets
        dst_ptr @= rdi; inA_ptr @= rsi; 
        dst_in := (if win then rcx else rdi);
        inA_in := (if win then rdx else rsi);
    reads memTaint;
    modifies
        rax; rbx; rcx; rdx; rdi; rsi; r8; r9; r10; r11; r12; r13; r14; r15;
        rsp; efl; mem;
    requires
        adx_enabled && bmi2_enabled;
        buffers_disjoint(dst_b, inA_b);

        buffers_disjoint(stack_b, dst_b);
        buffers_disjoint(stack_b, inA_b);

        validDstAddrs64(mem, dst_in, dst_b, 8, memTaint, Secret);
        validSrcAddrs64(mem, inA_in, inA_b, 4, memTaint, Secret);
        valid_stack_slots(mem, rsp, stack_b, 5, memTaint);
    ensures
        let a0 := old(buffer64_read(inA_b, 0, mem));
        let a1 := old(buffer64_read(inA_b, 1, mem));
        let a2 := old(buffer64_read(inA_b, 2, mem));
        let a3 := old(buffer64_read(inA_b, 3, mem));

        let d0 := buffer64_read(dst_b, 0, mem);
        let d1 := buffer64_read(dst_b, 1, mem);
        let d2 := buffer64_read(dst_b, 2, mem);
        let d3 := buffer64_read(dst_b, 3, mem);
        let d4 := buffer64_read(dst_b, 4, mem);
        let d5 := buffer64_read(dst_b, 5, mem);
        let d6 := buffer64_read(dst_b, 6, mem);
        let d7 := buffer64_read(dst_b, 7, mem);

        let a := a0 + pow2_64 * a1 + pow2_128 * a2 + pow2_192 * a3;

        let d := d0 + pow2_64 * d1 + pow2_128 * d2 + pow2_192 * d3 +
                 pow2_256 * d4 + pow2_320 * d5 + pow2_384 * d6 + pow2_448 * d7;
        d == a * a;

        //////////////////////////////////////
        //   Framing
        //////////////////////////////////////

        modifies_buffer_2(dst_b, stack_b, old(mem), mem);
        validSrcAddrs64(mem, dst_in, dst_b, 8, memTaint, Secret);

        rbx == old(rbx);
        rsi == old(rsi);
        r12 == old(r12);
        r13 == old(r13);
        r14 == old(r14);

        rsp == old(rsp);
{
    // Store callee-save registers
    Push(r15, stack_b, 4);
    Push(rsi, stack_b, 3);
    Push(r12, stack_b, 2);
    Push(r13, stack_b, 1);
    Push(r14, stack_b, 0);

    // Line up the rest of the arguments
    inline if (win) {
        Mov64(dst_ptr, rcx);
        Mov64(inA_ptr, rdx);
    } 

    fast_sqr(dst_b, inA_b);

    Pop(r14, stack_b, 0);
    Pop(r13, stack_b, 1);
    Pop(r12, stack_b, 2);
    Pop(rsi, stack_b, 3);
    Pop(r15, stack_b, 4);
}
