/*
include "../../../arch/x64/X64.Vale.InsBasic.vaf"
include "../../../arch/x64/X64.Vale.InsMem.vaf"
include "../../../arch/x64/X64.Vale.InsVector.vaf"
include "../../../lib/util/x64/X64.Stack.vaf"
//i//nclude "../../../thirdPartyPorts/OpenSSL/aes/X64.AESGCM.vaf"
include "X64.AES.vaf"
include "X64.GF128_Mul.vaf"
include "X64.GCTR.vaf"
include "X64.GHash.vaf"
include{:fstar}{:open} "Prop_s"
include{:fstar}{:open} "open Opaque_s"
include{:/*TODO*/fstar}{:open} "FStar.Seq.Base"
include{:fstar}{:open} "Words_s"
include{:fstar}{:open} "Words.Seq_s"
include{:fstar}{:open} "Types_s"
include{:fstar}{:open} "Arch.Types"
include{:fstar}{:open} "AES_s"
include{:fstar}{:open} "GCTR_s"
include{:fstar}{:open} "GCTR"
include{:fstar}{:open} "GCM"
include{:fstar}{:open} "GHash_s"
include{:fstar}{:open} "GHash"
include{:fstar}{:open} "GCM_s"
include{:fstar}{:open} "GF128_s"
include{:fstar}{:open} "GF128"
include{:fstar}{:open} "X64.Poly1305.Math"
include{:fstar}{:open} "GCM_helpers"
include{:fstar}{:open} "Workarounds"
include{:fstar}{:open} "X64.Machine_s"
include{:fstar}{:open} "X64.Memory"
include{:fstar}{:open} "X64.Vale.State"
include{:fstar}{:open} "X64.Vale.Decls"
include{:fstar}{:open} "X64.Vale.QuickCode"
include{:fstar}{:open} "X64.Vale.QuickCodes"
include{:fstar}{:open} "X64.CPU_Features_s"
*/

module X64.GCMencryptOpt

/*
#verbatim{:interface}{:implementation}
module GHash = GHash
module GCTR = GCTR
open Prop_s
open Opaque_s
open FStar.Seq
open Words_s
open Words.Seq_s
open Types_s
open Arch.Types
open AES_s
open GCTR_s
open GCTR
open GCM
open GHash_s
open GHash
open GCM_s
open X64.AES
open GF128_s
open GF128
open X64.Poly1305.Math
open GCM_helpers
open Workarounds
open X64.GHash
open X64.GCTR
open X64.Machine_s
open X64.Memory
open X64.Vale.State
open X64.Vale.Decls
open X64.Vale.InsBasic
open X64.Vale.InsMem
open X64.Vale.InsVector
open X64.Vale.InsAes
open X64.Vale.QuickCode
open X64.Vale.QuickCodes
open X64.GF128_Mul
open X64.Stack
open X64.CPU_Features_s
open X64.AESGCM
#endverbatim

#verbatim{:interface}
let aes_reqs
  (alg:algorithm) (key:seq nat32) (round_keys:seq quad32) (keys_b:buffer128)
  (key_ptr:int) (mem:memory) (memTaint:memtaint) : prop0
  =
  aesni_enabled /\
  alg = AES_128 /\
  //(alg = AES_128 || alg = AES_256) /\
  is_aes_key_LE alg key /\
  length(round_keys) == nr(alg) + 1 /\
  round_keys == key_to_round_keys_LE alg key /\
  validSrcAddrs128 mem key_ptr keys_b (nr alg + 1) memTaint Secret /\
  buffer128_as_seq mem keys_b == round_keys
#endverbatim

function aes_reqs(alg:algorithm, key:seq(nat32), round_keys:seq(quad32), keys_b:buffer128,
    key_ptr:int, mem:memory, memTaint:memtaint) : prop extern;


///////////////////////////
// GCM
///////////////////////////
#reset-options "--z3rlimit 30"
procedure {:quick} gcm_blocks128(
    inline alg:algorithm,
    ghost in_b:buffer128,
    ghost out_b:buffer128,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    lets in_ptr @= rax; out_ptr @= rbx; len @= rcx; keys_ptr @= r8;
         icb @= xmm7; mask @= xmm8; hash @= xmm1; one @= xmm10; h @= xmm11;

    reads
        keys_ptr; in_ptr; out_ptr; len; mask; h; memTaint;

    modifies
        rdx; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; icb; one; mem; efl;

    requires
        // GCTR reqs
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(in_b, out_b) || in_b == out_b;
        validSrcAddrs128(mem,  in_ptr,  in_b, len, memTaint, Secret);
        validDstAddrs128(mem, out_ptr, out_b, len, memTaint, Secret);
        in_ptr  + 16 * len < pow2_64;
        out_ptr + 16 * len < pow2_64;
        buffer_length(in_b) == buffer_length(out_b) /\ 256 * buffer_length(in_b) < pow2_32;
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);

        // AES reqs
        aes_reqs(alg, key, round_keys, keys_b, keys_ptr, mem, memTaint);

        // GCM
        pclmulqdq_enabled;
    ensures
        modifies_buffer128(out_b, old(mem), mem);

        r9  ==  in_ptr + 16 * len;
        r10 == out_ptr + 16 * len;

        // GCTR
        gctr_partial(alg, len, old(buffer128_as_seq(mem, in_b)), buffer128_as_seq(mem, out_b), key, old(icb));
        icb == inc32(old(icb), old(len));

        // GHash
        len == 0 ==> hash == old(hash) /\ buffer128_as_seq(mem, out_b) == old(buffer128_as_seq(mem, out_b));
        len > 0 ==> length(slice_work_around(buffer128_as_seq(mem, out_b), len)) > 0 /\ 
                    hash == ghash_incremental(reverse_bytes_quad32(h), old(hash), slice_work_around(buffer128_as_seq(mem, out_b), len));
{
    Mov64(rdx, 0);
    Mov64(r9, in_ptr);
    Mov64(r10, out_ptr);

    // Initialize counter increment
    ZeroXmm(one);
    PinsrdImm(one, 1, 0, r12);

    ghost var plain_quads:seq(quad32) := buffer128_as_seq(mem, in_b);

    while (rdx != len)
        invariant
            //////////////////// Basic indexing //////////////////////
            0 <= rdx <= len;
            r9 == in_ptr + 16 * rdx;
            r10 == out_ptr + 16 * rdx;
            icb == inc32(old(icb), rdx);

            //////////////////// From requires //////////////////////
            // GCTR reqs
            buffers_disjoint128(keys_b, out_b);
            buffers_disjoint128(in_b, out_b) || in_b == out_b;
            validSrcAddrs128(mem,  in_ptr,  in_b, len, memTaint, Secret);
            validDstAddrs128(mem, out_ptr, out_b, len, memTaint, Secret);
            in_ptr  + 16 * len < pow2_64;
            out_ptr + 16 * len < pow2_64;
            buffer_length(in_b) == buffer_length(out_b);
            rdx != len ==> partial_seq_agreement(plain_quads, buffer128_as_seq(mem, in_b), rdx, buffer_length(in_b));

            // AES reqs
            aes_reqs(alg, key, round_keys, keys_b, keys_ptr, mem, memTaint);

            pclmulqdq_enabled;
            //////////////////// GCTR invariants //////////////////////
            mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);
            one == Mkfour(1, 0, 0, 0);

            //////////////////// Postcondition goals //////////////////////
            modifies_buffer128(out_b, old(mem), mem);
            gctr_partial(alg, rdx, plain_quads, buffer128_as_seq(mem, out_b), key, old(icb));

            rdx == 0 ==> hash == old(hash) /\ buffer128_as_seq(mem, out_b) == old(buffer128_as_seq(mem, out_b));
            hash == ghash_incremental0(reverse_bytes_quad32(h), old(hash), slice_work_around(buffer128_as_seq(mem, out_b), rdx));
        decreases
            len - rdx;
    {
        ghost var snap := buffer128_as_seq(mem, in_b);
        Mov128(xmm0, icb);
        Pshufb(xmm0, mask);
        AESEncryptBlock(alg, reverse_bytes_quad32(icb), key, round_keys, keys_b);
        reveal aes_encrypt_LE_def;

        Load128_buffer(xmm2, r9, 0, Secret, in_b, rdx);
        Pxor(xmm2, xmm0);
        Store128_buffer(r10, xmm2, 0, Secret, out_b, rdx);

        // Update our hash
        ghost var hash_input := xmm2;
        ghost var hash_prev := hash;
        compute_ghash_incremental_register();
        lemma_hash_append2(reverse_bytes_quad32(h), old(hash), hash_prev, hash, slice_work_around(buffer128_as_seq(mem, out_b), rdx), hash_input);
        assert equal(slice_work_around(buffer128_as_seq(mem, out_b), rdx + 1), append(slice_work_around(buffer128_as_seq(mem, out_b), rdx), create(1, hash_input)));

        Add64(rdx, 1);
        Add64(r9, 16);
        Add64(r10, 16);
        Inc32(icb, one);
    }
}


procedure {:quick} gcm_auth_bytes(
    inline alg:algorithm,
    ghost auth_b:buffer128,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    ) returns (
    ghost h:quad32,
    ghost y_0:quad32,
    ghost y_auth:quad32
    )

    lets auth_ptr @= rax; keys_ptr @= r8; auth_num_bytes @= r11; 
         hash @= xmm1; mask @= xmm8; h128 @= xmm11; 

    reads
        keys_ptr; auth_num_bytes; mask; mem; memTaint;

    modifies
        auth_ptr; rcx; rdx; r9; r12;
        xmm0; hash; xmm2; xmm3; xmm4; xmm5; xmm6; h128; 
        efl;


    requires
        // AES reqs
        aes_reqs(alg, key, round_keys, keys_b, keys_ptr, mem, memTaint);
            
        // GCM reqs
        validSrcAddrs128(mem, auth_ptr,  auth_b,  bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        4096 * auth_num_bytes < pow2_32;
        pclmulqdq_enabled;

        // Misc
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);
    ensures
        // Main result
        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let auth_padded_bytes := pad_to_128_bits(auth);
        let auth_padded_quads := le_bytes_to_seq_quad32(auth_padded_bytes);

        y_0 == Mkfour(0, 0, 0, 0);
        y_auth == ghash_incremental0(reverse_bytes_quad32(h), y_0, auth_padded_quads);
        hash == y_auth;

        // Other intermediate facts
        h128 == h;
        h == reverse_bytes_quad32(aes_encrypt_LE(alg, key, y_0));
        auth_num_bytes == 0 ==> rdx == old(rdx) /\ r9 == old(r9);
{
    // let h = aes_encrypt_LE alg key (Mkfour 0 0 0 0) in
    ZeroXmm(xmm0);
    AESEncryptBlock(alg, xmm0, key, round_keys, keys_b); // h = xmm0 = aes_encrypt_LE alg key (Mkfour 0 0 0 0) in
    Pshufb(xmm0, mask);   // reverse h, since the hashing code assumes the reversal has already happened
    h := xmm0;
    Mov128(h128, xmm0);     // Move h to xmm11 where ghash_incremental_bytes expects it

    // Compute the hashes incrementally, starting with auth data
    ZeroXmm(hash);
    y_0 := Mkfour(0, 0, 0, 0);
    ghash_incremental_bytes(auth_b);
    y_auth := hash;
    le_bytes_to_seq_quad32_empty();
}

#reset-options "--z3rlimit 10"
procedure {:quick} gcm_make_length_quad()
    lets plain_num_bytes @= r13; auth_num_bytes @= r11; mask @= xmm8;
    reads plain_num_bytes; auth_num_bytes; mask;

    modifies xmm2; rax; efl;
    requires
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);
        plain_num_bytes * 8 < pow2_32;
        auth_num_bytes * 8 < pow2_32;
    ensures
        old(plain_num_bytes) * 8 < pow2_32;
        old(auth_num_bytes) * 8 < pow2_32;
        xmm2 == reverse_bytes_quad32(Mkfour(#nat32(8 * old(plain_num_bytes)), 0, #nat32(8 * old(auth_num_bytes)), 0));
{
    // Prepare length fields
    ZeroXmm(xmm2);
    Mov64(rax, plain_num_bytes);
    IMul64(rax, 8);
    Pinsrd(xmm2, rax, 0);
    Mov64(rax, auth_num_bytes);
    IMul64(rax, 8);
    Pinsrd(xmm2, rax, 2);
    Pshufb(xmm2, xmm8);
}

#reset-options "--z3rlimit 30"
procedure {:quick} {:verify true} gcm_blocks(
    inline alg:algorithm,
    ghost arg_b:buffer64,
    ghost auth_b:buffer128,
    ghost in128x6_b:buffer128,
    ghost out128x6_b:buffer128,
    ghost in128_b:buffer128,
    ghost out128_b:buffer128,
    ghost inout_b:buffer128,
    ghost iv_b:buffer128,
    ghost stack_b:buffer128,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128,
    ghost hkeys_b:buffer128
    )
    lets
        auth_ptr @= rdi; auth_num_bytes @= rsi; arg_ptr @= rdx; keys_ptr @= rcx; iv_ptr @= r8; Xip @= r9;

        in128x6_ptr     := buffer64_read(arg_b, 0, mem); 
        out128x6_ptr    := buffer64_read(arg_b, 1, mem); 
        len128x6        := buffer64_read(arg_b, 2, mem); 
        in128_ptr       := buffer64_read(arg_b, 3, mem); 
        out128_ptr      := buffer64_read(arg_b, 4, mem); 
        len128          := buffer64_read(arg_b, 5, mem); 
        inout_ptr       := buffer64_read(arg_b, 6, mem);
        num_plain_bytes := buffer64_read(arg_b, 7, mem);

//        in128x6_ptr @= rdi; out128x6_ptr @= rsi; len128x6 @= rdx; key_ptr @= rcx; iv_ptr @= r8; Xip @= r9;
//        in128_ptr @= rax; out128_ptr @= rbp; len128 @= r10; 
//        inout_ptr @= r15;

    reads
        //in128_ptr; out128_ptr; len128; inout_ptr; iv_ptr; rsp; 
        rsp; memTaint;

    modifies
        rax; rbx; rcx; rdx; rdi; rsi; rbp;
        r8; r9; r10; r11; r12; r13; r14; r15;
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl;

    requires
        // Valid buffers and pointers
// TODO: Handle auth values that aren't a multiple of 128-bits
        validDstAddrs64 (mem,      arg_ptr,      arg_b,        8, memTaint, Public);
        validDstAddrs128(mem,     auth_ptr,     auth_b,  bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validDstAddrs128(mem,       iv_ptr,       iv_b,        1, memTaint, Secret);
        validSrcAddrs128(mem,  in128x6_ptr,  in128x6_b, len128x6, memTaint, Secret);
        validDstAddrs128(mem, out128x6_ptr, out128x6_b, len128x6, memTaint, Secret);
        validSrcAddrs128(mem,    in128_ptr,    in128_b,   len128, memTaint, Secret);
        validDstAddrs128(mem,   out128_ptr,   out128_b,   len128, memTaint, Secret);
        validDstAddrs128(mem,    inout_ptr,    inout_b,        1, memTaint, Secret);
        validDstAddrs128(mem,          rsp,    stack_b,        8, memTaint, Secret);
        validSrcAddrs128(mem,          Xip,    hkeys_b,       10, memTaint, Secret);

//        buffer_length(stack_b) >= 30;       
//        valid_stack_slots(mem, rsp, stack_b, 30, memTaint);
//        valid_taint_buf64(stack_b, mem, memTaint, Secret);

        locs_disjoint(list(loc_buffer(iv_b), loc_buffer(arg_b)));
        buffers_disjoint128(iv_b, keys_b);
        buffers_disjoint128(iv_b, stack_b);
        buffers_disjoint128(iv_b, in128x6_b);
        buffers_disjoint128(iv_b, out128x6_b);
        buffers_disjoint128(iv_b, hkeys_b);
        buffers_disjoint128(iv_b, in128_b);
        buffers_disjoint128(iv_b, out128_b);
        buffers_disjoint128(iv_b, inout_b);
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(arg_b)));
        buffers_disjoint128(stack_b, keys_b);
        buffers_disjoint128(stack_b, in128x6_b);
        buffers_disjoint128(stack_b, out128x6_b);
        buffers_disjoint128(stack_b, in128_b);
        buffers_disjoint128(stack_b, out128_b);
        buffers_disjoint128(stack_b, inout_b);
        buffers_disjoint128(stack_b, hkeys_b);
        locs_disjoint(list(loc_buffer(out128x6_b), loc_buffer(arg_b)));
        buffers_disjoint128(out128x6_b, keys_b);
        buffers_disjoint128(out128x6_b, hkeys_b);
        locs_disjoint(list(loc_buffer(out128_b), loc_buffer(arg_b)));
        buffers_disjoint128(out128_b, keys_b);
        buffers_disjoint128(out128_b, hkeys_b);
        locs_disjoint(list(loc_buffer(inout_b), loc_buffer(arg_b)));
        buffers_disjoint128(inout_b, keys_b);
        buffers_disjoint128(inout_b, hkeys_b);
        buffers_disjoint128(in128x6_b, out128x6_b) || in128x6_b == out128x6_b;
        buffers_disjoint128(in128_b, out128_b) || in128_b == out128_b;

        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
         in128x6_ptr + 0x10*len128x6 < pow2_64;
        out128x6_ptr + 0x10*len128x6 < pow2_64;

        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        buffer_length(in128x6_b) == buffer_length(out128x6_b);
        buffer_length(in128x6_b) == len128x6;
        num_plain_bytes < pow2_32;
        4096 * (buffer_length(in128x6_b)) * 16 < pow2_32;
        4096 * auth_num_bytes < pow2_32;
        Xip + 0x20 < pow2_64;

        buffer_addr(keys_b, mem) + 0x80 < pow2_64;

        // len128x6 is # of 128-bit blocks that come in 6-block chunks
        len128x6 % 6 == 0;
        len128x6 >= 18;
        //len128x6 / 6 >= 3;   // Should be implied by above... :(
        12 + len128x6 + 6 < pow2_32;

        // GCTR reqs
        aes_reqs(alg, key, round_keys, keys_b, keys_ptr, mem, memTaint);

        // GCM reqs
        pclmulqdq_enabled;


    ensures
//        modifies_buffer128(out_b, old(mem), mem);
//        validSrcAddrsOffset128(mem, out_ptr, out_b, block_offset, len, memTaint, Secret);

//        r9  ==  in128x6_ptr + 16 * len;
//        r10 == out128x6_ptr + 16 * len;

        // GCTR results
//        gctr_partial_opaque(alg, old(len128x6), old(buffer128_as_seq(mem, in128x6_b)), buffer128_as_seq(mem, out128x6_b), key, buffer128_read(iv_b, 0, mem));
        // GCM results
        //hash == ghash_incremental(reverse_bytes_quad32(h), old(hash), buffer128_as_seq(mem, out_b), old(len));
{
    // Preserve arguments that gcm_auth_bytes will clobber
    Mov64(rbp, arg_ptr);
    Mov64(r13, iv_ptr);
    Mov64(r14, Xip);

    // Line up the arguments for gcm_auth_bytes
    InitPshufbMask(xmm8, r12);
    Mov64(rax, auth_ptr);
    Mov64(r8, keys_ptr);
    Mov64(r11, auth_num_bytes);

    (ghost var h), (ghost var y_0), (ghost var y_auth) := gcm_auth_bytes(alg, auth_b, key, round_keys, keys_b);

    // Line up the arguments for AES_GCM_encrypt_6mult
    Load64_buffer(rdi, rbp,  0, Public, arg_b, 0);
    Load64_buffer(rsi, rbp,  8, Public, arg_b, 1);
    Load64_buffer(rdx, rbp, 16, Public, arg_b, 2);
    Mov64(keys_ptr, r8);
    Mov64(iv_ptr, r13);
    Mov64(Xip, r14);

    (ghost var ctr_BE) := AES_GCM_encrypt_6mult(alg, iv_b, in128x6_b, out128x6_b, stack_b, key, round_keys, keys_b, hkeys_b);

    // Line up arguments for gcm_blocks128
    Load64_buffer(rax, rbp, 24, Public, arg_b, 3);
    Load64_buffer(rbx, rbp, 32, Public, arg_b, 4);
    Load64_buffer(rcx, rbp, 40, Public, arg_b, 5);
    Load128_buffer(xmm7, iv_ptr, 0, Secret, iv_b, 0);
    Mov128(xmm1, xmm8);     // Move the hash value into the right place
    InitPshufbMask(xmm8, r12);
    Load128_buffer(xmm11, Xip, 0 - 0x20, Secret, hkeys_b, 0); // TODO: we're expecting h to already be in hkeys_b, so why are we computing it above in gcm_auth_bytes!?


//    gcm_blocks128(alg, in128_b, out128_b, key, round_keys, keys_b);
//    Mov64(rcx, 1);
//    gcm_blocks128(alg, inout_b, inout_b, key, round_keys, keys_b);
    // Do stuff from gcm_core
}




/*
#reset-options "--z3rlimit 30"
procedure {:quick} gcm_core_part1(
    inline alg:algorithm,
    ghost iv_BE:quad32,
    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost out_b:buffer128,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    ) returns (
    ghost h:quad32,
    ghost y_0:quad32,
    ghost y_auth:quad32,
    ghost y_cipher:quad32
    )

    lets plain_ptr @= r14; out_ptr @= rbx; keys_ptr @= r8; auth_ptr @= rax;
    plain_num_bytes @= r13; auth_num_bytes @= r11; mask @= xmm8;
    iv @= xmm7;

    reads
        plain_ptr; keys_ptr; plain_num_bytes; auth_num_bytes; memTaint;

    modifies
        rax; out_ptr; rcx; rdx; rdi; rsi; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; iv; mask; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl;


    requires
        // GCM reqs
        iv == reverse_bytes_quad32(iv_BE);
        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr,  auth_b,  bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, out_ptr,   out_b,   bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aes_reqs(alg, key, round_keys, keys_b, r8, mem, memTaint);
            
        pclmulqdq_enabled;
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);

        // Main result
        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._1;

        // Intermediate hash state needed for the next step
        let auth_padded_bytes := pad_to_128_bits(auth);
        let auth_padded_quads := le_bytes_to_seq_quad32(auth_padded_bytes);

        let cipher_padded_bytes := pad_to_128_bits(cipher);
        let cipher_padded_quads := le_bytes_to_seq_quad32(cipher_padded_bytes);

        y_0 == Mkfour(0, 0, 0, 0);
        y_auth == ghash_incremental0(reverse_bytes_quad32(h), y_0, auth_padded_quads);
        y_cipher == ghash_incremental0(reverse_bytes_quad32(h), y_auth, cipher_padded_quads);
        xmm1 == y_cipher;

        // Intermediate IV state
        iv == Mkfour(iv.lo0, iv_BE.lo1, iv_BE.hi2, iv_BE.hi3);

        // Other intermediate facts
        mask == Mkfour(0x0C0D0E0F, 0x08090A0B, 0x04050607, 0x00010203);
        xmm11 == h;
        h == reverse_bytes_quad32(aes_encrypt_LE(alg, key, y_0));
{
    InitPshufbMask(xmm8, r12);

    // let h = aes_encrypt_LE alg key (Mkfour 0 0 0 0) in
    ZeroXmm(xmm0);
    AESEncryptBlock(alg, xmm0, key, round_keys, keys_b); // h = xmm0 = aes_encrypt_LE alg key (Mkfour 0 0 0 0) in
    Pshufb(xmm0, xmm8);   // reverse h, since the hashing code assumes the reversal has already happened
    h := xmm0;
    Mov128(xmm11, xmm0);     // Save a copy of h

    // let j0_BE = Mkfour 1 iv_BE.lo1 iv_BE.hi2 iv_BE.hi3 in
    // (inc32 j0 1)
    Pshufb(iv, xmm8); // to big endian
    PinsrdImm(iv, 2, 0, r12);
    // assert iv == inc32(Mkfour(1, iv_BE.lo1, iv_BE.hi2, iv_BE.hi3), 1);

    // Compute the hashes incrementally, starting with auth data
    //Mov64(rax, auth_ptr);
    //Mov64(rcx, auth_num_bytes);
    ZeroXmm(xmm1);
    y_0 := Mkfour(0, 0, 0, 0);
    // assert xmm1 == y_0;
    ghash_incremental_bytes(auth_b);
    y_auth := xmm1;

//    ghost var auth_bytes := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem, auth_b)), auth_num_bytes);
//    ghost var auth_padded_bytes := pad_to_128_bits(auth_bytes);
//    ghost var auth_padded_quads := le_bytes_to_seq_quad32(auth_padded_bytes);
    ghost var plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
    ghost var auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
//
//    assert y_0 == Mkfour(0,0,0,0);
//    assert y_auth   == ghash_incremental0(h, y_0, auth_padded_quads);
//
    // let c = gctr_encrypt_LE (inc32 j0 1) p alg key in
    Mov64(rax, plain_ptr);
    //Mov64(rbx, out_ptr);
    Mov64(rcx, plain_num_bytes);
    ghost var icb_enc := iv;

    assert icb_enc == inc32 (Mkfour(1,iv_BE.lo1,iv_BE.hi2,iv_BE.hi3), 1);     // Passes -- REVIEW: Seems to be necessary for it to pass at the end of the procedure; unclear why that could possibly be the case
    gcm_one_pass(alg, plain_b, out_b, key, round_keys, keys_b);
    y_cipher := xmm1;
    ghost var cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem, out_b)), old(plain_num_bytes));
    gcm_encrypt_LE_fst_helper(icb_enc, iv_BE, plain, auth, cipher, alg, key);
    reveal le_bytes_to_seq_quad32_def;
}

#reset-options "--z3rlimit 30"
procedure {:quick} gcm_core(
    inline alg:algorithm,
    ghost iv_BE:quad32,
    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost out_b:buffer128,
    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )

    lets plain_ptr @= r14; out_ptr @= rbx; keys_ptr @= r8; auth_ptr @= rax;
    plain_num_bytes @= r13; auth_num_bytes @= r11; mask @= xmm8;
    iv @= xmm7;

    reads
        plain_ptr; keys_ptr; plain_num_bytes; auth_num_bytes; memTaint;

    modifies
        rax; out_ptr; rcx; rdx; rdi; rsi; r9; r10; r12; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; iv; mask; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl;


    requires
        // GCM reqs
        iv == reverse_bytes_quad32(iv_BE);
        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr,  auth_b,  bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, out_ptr,   out_b,   bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aes_reqs(alg, key, round_keys, keys_b, r8, mem, memTaint);
            
        pclmulqdq_enabled;
    ensures
        modifies_buffer128(out_b, old(mem), mem);
        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);

        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._1 /\
        le_quad32_to_bytes(xmm1) == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._2;
{
    (ghost var h), (ghost var y_0), (ghost var y_auth), (ghost var y_cipher) := gcm_core_part1(alg, iv_BE, plain_b, auth_b, out_b, key, round_keys, keys_b);

    gcm_make_length_quad();
    ghost var length_quad32 := xmm2;

    compute_ghash_incremental_register();
    ghost var y_final := xmm1;

    // Invoke lemma showing that incremental hashing works
    ghost var auth_bytes := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)), old(auth_num_bytes));
    ghost var auth_padded_quads := le_bytes_to_seq_quad32(pad_to_128_bits(auth_bytes));

    ghost var cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem, out_b)), old(plain_num_bytes));
    ghost var cipher_padded_quads := le_bytes_to_seq_quad32(pad_to_128_bits(cipher));
    lemma_hash_append3(reverse_bytes_quad32(h), y_0, y_auth, y_cipher, y_final,
                       auth_padded_quads, //buffer128_as_seq(mem, auth_b),
                       cipher_padded_quads, //buffer128_as_seq(mem, out_b),
                       create(1, length_quad32));


    PinsrdImm(iv, 1, 0, r12);   // Reconstruct j0 (this is all we need, since gctr_core says it only changes iv.lo0)
//    assert iv == iv_BE.(lo0 := 1);

    // Encrypt the hash value with gctr_register; result goes in xmm1
    gctr_register(alg, key, round_keys, keys_b); // Encrypt using j0 and xmm0 = hash_value

    ghost var plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));

//    assert 4096 * length(plain) < pow2_32;
//    assert 4096 * length(auth_bytes) < pow2_32;
//    assert 4096 * length(plain) < pow2_32 /\ 4096 * length(auth_bytes) < pow2_32 /\ cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth_bytes)._1;
//    assert length_quad32 == reverse_bytes_quad32(Mkfour(#nat32(8 * length(plain)), 0, #nat32(8 * length(auth_bytes)), 0));
//    //assert h == aes_encrypt_LE(alg, key, Mkfour(0,0,0,0));
//    assert y_final == ghash_LE(reverse_bytes_quad32(h), append(auth_padded_quads, append(cipher_padded_quads, create(1, length_quad32))));
    le_seq_quad32_to_bytes_of_singleton(xmm1);
//    assert le_quad32_to_bytes(xmm1) == gctr_encrypt_LE(Mkfour(1, iv_BE.lo1, iv_BE.hi2, iv_BE.hi3), le_quad32_to_bytes(y_final), alg, key);

//    assert length_quad32 == reverse_bytes_quad32(Mkfour(#nat32(8 * old(plain_num_bytes)), 0, #nat32(8 * old(auth_num_bytes)), 0));

    gcm_encrypt_LE_snd_helper(iv_BE, length_quad32, y_final, xmm1, plain, auth_bytes, cipher, alg, key);
    //be_bytes_to_quad32_to_bytes(iv_BE);
}


#reset-options "--z3rlimit 30"
procedure {:quick} gcm_encrypt_stdcall_inner(
    inline alg:algorithm,
    ghost args_b:buffer64,
    ghost iv_BE:quad32,

    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost iv_b:buffer128,
    ghost out_b:buffer128,
    ghost tag_b:buffer128,

    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    reads memTaint;
    modifies
        rax; rbx; rcx; rdx; rdi; rsi; r8; r9; r10; r11; r12; r13; r14; r15; xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl;
    lets
        args_ptr := r9;

        plain_ptr         := buffer64_read(args_b, 0, mem);
        plain_num_bytes   := buffer64_read(args_b, 1, mem);
        auth_ptr          := buffer64_read(args_b, 2, mem);
        auth_num_bytes    := buffer64_read(args_b, 3, mem);
        iv_ptr            := buffer64_read(args_b, 4, mem);
        expanded_key_ptr  := buffer64_read(args_b, 5, mem);
        out_ptr           := buffer64_read(args_b, 6, mem);
        tag_ptr           := buffer64_read(args_b, 7, mem);

    requires
        validSrcAddrs64(mem, args_ptr, args_b, 8, memTaint, Public);

        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(out_b, tag_b);

        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr, auth_b, bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, iv_ptr, iv_b, 1, memTaint, Secret);
        validDstAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, tag_ptr, tag_b, 1, memTaint, Secret);

        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        iv_BE == reverse_bytes_quad32(buffer128_read(iv_b, 0, mem));

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aes_reqs(alg, key, round_keys, keys_b, r8, mem, memTaint);
            
        pclmulqdq_enabled;
    ensures
        modifies_buffer128_2(out_b, tag_b, old(mem), mem);

        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);
        validSrcAddrs128(mem, old(tag_ptr), tag_b, 1, memTaint, Secret);

        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._1 /\
        le_quad32_to_bytes(buffer128_read(tag_b, 0, mem)) == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._2;
{
    Load64_buffer(r14, r9,  0, Public, args_b, 0);
    Load64_buffer(r13, r9,  8, Public, args_b, 1);
    Load64_buffer(rax, r9, 16, Public, args_b, 2);
    Load64_buffer(r11, r9, 24, Public, args_b, 3);
    Load64_buffer(r10, r9, 32, Public, args_b, 4);
    Load64_buffer(r8,  r9, 40, Public, args_b, 5);
    Load64_buffer(rbx, r9, 48, Public, args_b, 6);
    Load64_buffer(r15, r9, 56, Public, args_b, 7);

    // Load the IV into its XMM register
    Load128_buffer(xmm7, r10, 0, Secret, iv_b, 0);

    gcm_core(alg, iv_BE, plain_b, auth_b, out_b, key, round_keys, keys_b);

    // Auth tag is still in xmm1, so save it to memory
    Store128_buffer(r15, xmm1, 0, Secret, tag_b, 0);
}

#reset-options "--z3rlimit 30"
procedure {:quick} gcm_encrypt_stdcall(
    inline win:bool,
    inline alg:algorithm,
    ghost args_b:buffer64,
    ghost iv_BE:quad32,

    ghost plain_b:buffer128,
    ghost auth_b:buffer128,
    ghost iv_b:buffer128,
    ghost out_b:buffer128,
    ghost tag_b:buffer128,
    ghost stack_b:buffer64,

    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    reads memTaint;
    modifies
        rax; rbx; rcx; rdx; rdi; rsi; rsp; rbp; r8; r9; r10; r11; r12; r13; r14; r15; 
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl; 
    lets
        args_ptr := if win then rcx else rdi;

        plain_ptr         := buffer64_read(args_b, 0, mem);
        plain_num_bytes   := buffer64_read(args_b, 1, mem);
        auth_ptr          := buffer64_read(args_b, 2, mem);
        auth_num_bytes    := buffer64_read(args_b, 3, mem);
        iv_ptr            := buffer64_read(args_b, 4, mem);
        expanded_key_ptr  := buffer64_read(args_b, 5, mem);
        out_ptr           := buffer64_read(args_b, 6, mem);
        tag_ptr           := buffer64_read(args_b, 7, mem);

    requires
        validSrcAddrs64(mem, args_ptr, args_b, 8, memTaint, Public);

        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(out_b, tag_b);

        buffers_disjoint(args_b, stack_b);

        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(plain_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(auth_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(iv_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(out_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(tag_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(keys_b)));

        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr, auth_b, bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, iv_ptr, iv_b, 1, memTaint, Secret);
        validDstAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, tag_ptr, tag_b, 1, memTaint, Secret);

        valid_stack_slots(mem, rsp, stack_b, if win then 28 else 8, memTaint);
        valid_taint_buf64(stack_b, mem, memTaint, Public);

        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        iv_BE == reverse_bytes_quad32(buffer128_read(iv_b, 0, mem));

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aes_reqs(alg, key, round_keys, keys_b, r8, mem, memTaint);
            
        pclmulqdq_enabled;
    ensures
        modifies_mem(loc_union(loc_union(loc_buffer(stack_b), loc_buffer(out_b)), loc_buffer(tag_b)), old(mem), mem);

        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);
        validSrcAddrs128(mem, old(tag_ptr), tag_b, 1, memTaint, Secret);

        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._1 /\
        le_quad32_to_bytes(buffer128_read(tag_b, 0, mem)) == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._2;

        // Calling convention for caller/callee saved registers
        rsp == old(rsp);

        // Windows:
        win ==> rbx == old(rbx);
        win ==> rbp == old(rbp);
        win ==> rdi == old(rdi);
        win ==> rsi == old(rsi);
        win ==> r12 == old(r12);
        win ==> r13 == old(r13);
        win ==> r14 == old(r14);
        win ==> r15 == old(r15);

        win ==> xmm6  == old(xmm6);
        win ==> xmm7  == old(xmm7);
        win ==> xmm8  == old(xmm8);
        win ==> xmm10 == old(xmm10);
        win ==> xmm11 == old(xmm11);

        // Linux:
        !win ==> rbx == old(rbx);
        !win ==> rbp == old(rbp);
        !win ==> r12 == old(r12);
        !win ==> r13 == old(r13);
        !win ==> r14 == old(r14);
        !win ==> r15 == old(r15);
{
    // Shuffle the incoming pointer around
    inline if (win) {
        Mov64(r9, rcx);
    } else {
        Mov64(r9, rdi);
    }

    callee_save_registers(win, stack_b);
    gcm_encrypt_stdcall_inner(alg, args_b, iv_BE, plain_b, auth_b, iv_b, out_b, tag_b, key, round_keys, keys_b);
    callee_restore_registers(win, stack_b, old(xmm6), old(xmm7), old(xmm8), old(xmm9), old(xmm10), old(xmm11),
                             old(xmm12), old(xmm13), old(xmm14), old(xmm15));
}


// Take arguments in registers and the stack, instead of via an in-memory struct
procedure {:quick} gcm_encrypt2_stdcall(
    inline win:bool,
    inline alg:algorithm,
    ghost iv_BE:quad32,

    ghost plain_b:buffer128,
    ghost plain_num_bytes:nat64,
    ghost auth_b:buffer128,
    ghost auth_num_bytes:nat64,
    ghost iv_b:buffer128,
    ghost out_b:buffer128,
    ghost tag_b:buffer128,
    ghost stack_b:buffer64,

    ghost key:seq(nat32),
    ghost round_keys:seq(quad32),
    ghost keys_b:buffer128
    )
    reads memTaint;
    modifies
        rax; rbx; rcx; rdx; rdi; rsi; rsp; rbp; r8; r9; r10; r11; r12; r13; r14; r15; 
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        mem; efl; 
    lets
        plain_ptr        := if win then rcx else rdi;
        auth_ptr         := if win then r8  else rdx;
        iv_ptr           := if win then buffer64_read(stack_b, 28 + 4 + 1 + 0, mem) else r8;
        expanded_key_ptr := if win then buffer64_read(stack_b, 28 + 4 + 1 + 1, mem) else r9;
        out_ptr          := if win then buffer64_read(stack_b, 28 + 4 + 1 + 2, mem) else buffer64_read(stack_b, 8 + 0, mem);
        tag_ptr          := if win then buffer64_read(stack_b, 28 + 4 + 1 + 3, mem) else buffer64_read(stack_b, 8 + 1, mem);

    requires
        buffers_disjoint128(plain_b, out_b);
        buffers_disjoint128(auth_b, out_b);
        buffers_disjoint128(keys_b, out_b);
        buffers_disjoint128(out_b, tag_b);

        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(plain_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(auth_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(iv_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(out_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(tag_b)));
        locs_disjoint(list(loc_buffer(stack_b), loc_buffer(keys_b)));

        plain_num_bytes == (if win then rdx else rsi);
        auth_num_bytes == (if win then r9 else rcx);
        validSrcAddrs128(mem, plain_ptr, plain_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, auth_ptr, auth_b, bytes_to_quad_size(auth_num_bytes), memTaint, Secret);
        validSrcAddrs128(mem, iv_ptr, iv_b, 1, memTaint, Secret);
        validDstAddrs128(mem, out_ptr, out_b, bytes_to_quad_size(plain_num_bytes), memTaint, Secret);
        validDstAddrs128(mem, tag_ptr, tag_b, 1, memTaint, Secret);

        buffer_length(stack_b) >= (if win then 4 + 1 + 4 + 28 else 2 + 8);       // TODO: On Windows, we need to allow room for "shadow space" (32B), ret (8B), and args
        valid_stack_slots(mem, rsp, stack_b, if win then 28 else 8, memTaint);
        valid_taint_buf64(stack_b, mem, memTaint, Public);

        plain_ptr + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        auth_ptr  + 16 * bytes_to_quad_size(auth_num_bytes)  < pow2_64;
        out_ptr   + 16 * bytes_to_quad_size(plain_num_bytes) < pow2_64;
        buffer_length(plain_b) == buffer_length(out_b);
        buffer_length(out_b) == bytes_to_quad_size(plain_num_bytes);
        buffer_length(auth_b) == bytes_to_quad_size(auth_num_bytes);
        256 * buffer_length(plain_b) < pow2_32;
        4096 * plain_num_bytes < pow2_32;
        4096 * auth_num_bytes < pow2_32;

        iv_BE == reverse_bytes_quad32(buffer128_read(iv_b, 0, mem));

        // To simplify length calculations, restrict auth and plain length further
        256 * bytes_to_quad_size(auth_num_bytes)  < pow2_32;
        256 * bytes_to_quad_size(plain_num_bytes) < pow2_32;

        // AES reqs
        aes_reqs(alg, key, round_keys, keys_b, r8, mem, memTaint);

        pclmulqdq_enabled;
    ensures
        modifies_mem(loc_union(loc_union(loc_buffer(stack_b), loc_buffer(out_b)), loc_buffer(tag_b)), old(mem), mem);

        validSrcAddrs128(mem, old(out_ptr), out_b, old(bytes_to_quad_size(plain_num_bytes)), memTaint, Secret);
        validSrcAddrs128(mem, old(tag_ptr), tag_b, 1, memTaint, Secret);

        let auth   := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), auth_b)),  old(auth_num_bytes));
        let plain  := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(old(mem), plain_b)), old(plain_num_bytes));
        let cipher := slice_work_around(le_seq_quad32_to_bytes(buffer128_as_seq(mem,      out_b)),   old(plain_num_bytes));

//        // TODO: First two clauses work around Vale's type limitations
        4096 * length(plain) < pow2_32 /\
        4096 * length(auth) < pow2_32 /\
        cipher == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._1 /\
        le_quad32_to_bytes(buffer128_read(tag_b, 0, mem)) == gcm_encrypt_LE(alg, seq_nat32_to_seq_nat8_LE(key), be_quad32_to_bytes(iv_BE), plain, auth)._2;

        // Calling convention for caller/callee saved registers
        rsp == old(rsp);

        // Windows:
        win ==> rbx == old(rbx);
        win ==> rbp == old(rbp);
        win ==> rdi == old(rdi);
        win ==> rsi == old(rsi);
        win ==> r12 == old(r12);
        win ==> r13 == old(r13);
        win ==> r14 == old(r14);
        win ==> r15 == old(r15);

        win ==> xmm6  == old(xmm6);
        win ==> xmm7  == old(xmm7);
        win ==> xmm8  == old(xmm8);
        win ==> xmm9  == old(xmm9);
        win ==> xmm10 == old(xmm10);
        win ==> xmm11 == old(xmm11);
        win ==> xmm12 == old(xmm12);
        win ==> xmm13 == old(xmm13);
        win ==> xmm14 == old(xmm14);
        win ==> xmm15 == old(xmm15);

        // Linux:
        !win ==> rbx == old(rbx);
        !win ==> rbp == old(rbp);
        !win ==> r12 == old(r12);
        !win ==> r13 == old(r13);
        !win ==> r14 == old(r14);
        !win ==> r15 == old(r15);
{
    callee_save_registers(win, stack_b);
//    assert rsp == old(rsp) - 224;

    // Shuffle the incoming arguments around
    inline if (win) {
        Mov64(r14, rcx);
        Mov64(r13, rdx);
        Mov64(rax, r8);
        Mov64(r11, r9);

        // These are offset, since we already moved rsp during callee_save_registers
        Load64_buffer(r10, rsp, 224 + 40 + 0, Public, stack_b, 28 + 4 + 1 + 0);
        Load64_buffer(r8,  rsp, 224 + 40 + 8, Public, stack_b, 28 + 4 + 1 + 1);
        Load64_buffer(rbx, rsp, 224 + 40 +16, Public, stack_b, 28 + 4 + 1 + 2);
        Load64_buffer(r15, rsp, 224 + 40 +24, Public, stack_b, 28 + 4 + 1 + 3);
    } else {
        Mov64(r14, rdi);
        Mov64(r13, rsi);
        Mov64(rax, rdx);
        Mov64(r11, rcx);
        Mov64(r10, r8);
        Mov64(r8,  r9);

        // These are offset, since we already moved rsp during callee_save_registers
        Load64_buffer(rbx, rsp, 64 + 0, Public, stack_b, 8 + 0);
        Load64_buffer(r15, rsp, 64 + 8, Public, stack_b, 8 + 1);
    }

    // Load the IV into its XMM register
    Load128_buffer(xmm7, r10, 0, Secret, iv_b, 0);

    gcm_core(alg, iv_BE, plain_b, auth_b, out_b, key, round_keys, keys_b);

    // Auth tag is still in xmm1, so save it to memory
    Store128_buffer(r15, xmm1, 0, Secret, tag_b, 0);

    callee_restore_registers(win, stack_b, old(xmm6), old(xmm7), old(xmm8), old(xmm9), old(xmm10), old(xmm11),
                             old(xmm12), old(xmm13), old(xmm14), old(xmm15));
}
*/
*/
