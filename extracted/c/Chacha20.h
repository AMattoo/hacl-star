/* This file auto-generated by KreMLin! */
#ifndef __Hacl_Symmetric_Chacha20_H
#define __Hacl_Symmetric_Chacha20_H


#include "Hacl_Symmetric_HSalsa20.h"
#include "kremlib.h"
#include "testlib.h"

typedef uint32_t Hacl_Symmetric_Chacha20_u32;

typedef uint32_t Hacl_Symmetric_Chacha20_h32;

typedef uint8_t *Hacl_Symmetric_Chacha20_uint8_p;

typedef uint32_t *Hacl_Symmetric_Chacha20_chacha_ctx;

void Hacl_Symmetric_Chacha20_lemma_max_uint32(Prims_nat n);

uint32_t Hacl_Symmetric_Chacha20_op_Less_Less_Less(uint32_t a, uint32_t s);

uint32_t Hacl_Symmetric_Chacha20_load32_le(uint8_t *k);

void Hacl_Symmetric_Chacha20_store32_le(uint8_t *k, uint32_t x);

void Hacl_Symmetric_Chacha20_chacha_keysetup(uint32_t *ctx, uint8_t *k);

void Hacl_Symmetric_Chacha20_chacha_ietf_ivsetup(uint32_t *ctx, uint8_t *iv, uint32_t counter);

void Hacl_Symmetric_Chacha20_chacha_encrypt_bytes_core(uint32_t *ctx, uint8_t *m, uint8_t *c);

void
Hacl_Symmetric_Chacha20_chacha_encrypt_bytes_loop(
  uint32_t *ctx,
  uint8_t *m,
  uint8_t *c,
  uint32_t len
);

void
Hacl_Symmetric_Chacha20_chacha_encrypt_bytes_finish(
  uint32_t *ctx,
  uint8_t *m,
  uint8_t *c,
  uint32_t len
);

void
Hacl_Symmetric_Chacha20_chacha_encrypt_bytes(
  uint32_t *ctx,
  uint8_t *m,
  uint8_t *c,
  uint32_t len
);
#endif
