/* This file auto-generated by KreMLin! */
#ifndef __Hacl_EC_H
#define __Hacl_EC_H


#include "Hacl_Bignum.h"
#include "kremlib.h"
#include "testlib.h"

typedef uint64_t *Hacl_EC_Point_point;

uint64_t *Hacl_EC_Point_getx(uint64_t *p);

uint64_t *Hacl_EC_Point_gety(uint64_t *p);

uint64_t *Hacl_EC_Point_getz(uint64_t *p);

uint64_t *Hacl_EC_Point_make(uint64_t *x, uint64_t *y, uint64_t *z);

bool Hacl_EC_Point_valid(FStar_HyperStack_mem h, uint64_t *p);

void Hacl_EC_Point_swap_conditional(uint64_t *a, uint64_t *b, uint64_t iswap);

void Hacl_EC_Point_copy(uint64_t *output, uint64_t *input);

typedef uint8_t *Hacl_EC_Format_uint8_p;

extern uint8_t Hacl_EC_Format_zero_8;

void Hacl_EC_Format_fexpand(uint64_t *output, uint8_t *input);

void Hacl_EC_Format_scalar_of_point(uint8_t *scalar, uint64_t *point);

void
Hacl_EC_AddAndDouble_fmonty__1(
  uint64_t *buf,
  uint64_t *x2,
  uint64_t *z2,
  uint64_t *x3,
  uint64_t *z3,
  uint64_t *x,
  uint64_t *z,
  uint64_t *xprime,
  uint64_t *zprime,
  uint64_t *qx
);

void
Hacl_EC_AddAndDouble_fmonty__2(
  uint64_t *buf,
  uint64_t *x2,
  uint64_t *z2,
  uint64_t *x3,
  uint64_t *z3,
  uint64_t *x,
  uint64_t *z,
  uint64_t *xprime,
  uint64_t *zprime,
  uint64_t *qx
);

void Hacl_EC_AddAndDouble_lemma_5413_is_55(void *s);

void
Hacl_EC_AddAndDouble_fmonty__3(
  uint64_t *buf,
  uint64_t *x2,
  uint64_t *z2,
  uint64_t *x3,
  uint64_t *z3,
  uint64_t *x,
  uint64_t *z,
  uint64_t *xprime,
  uint64_t *zprime,
  uint64_t *qx
);

void
Hacl_EC_AddAndDouble_fmonty__(
  uint64_t *buf,
  uint64_t *x2,
  uint64_t *z2,
  uint64_t *x3,
  uint64_t *z3,
  uint64_t *x,
  uint64_t *z,
  uint64_t *xprime,
  uint64_t *zprime,
  uint64_t *qx
);

void
Hacl_EC_AddAndDouble_fmonty_(
  uint64_t *x2,
  uint64_t *z2,
  uint64_t *x3,
  uint64_t *z3,
  uint64_t *x,
  uint64_t *z,
  uint64_t *xprime,
  uint64_t *zprime,
  uint64_t *qx
);

void
Hacl_EC_AddAndDouble_fmonty(
  uint64_t *pp,
  uint64_t *ppq,
  uint64_t *p,
  uint64_t *pq,
  uint64_t *qmqp
);

typedef uint8_t *Hacl_EC_Ladder_uint8_p;

void
Hacl_EC_Ladder_cmult_small_loop(
  uint64_t *nq,
  uint64_t *nqpq,
  uint64_t *nq2,
  uint64_t *nqpq2,
  uint64_t *q,
  uint8_t byt,
  uint32_t i
);

void
Hacl_EC_Ladder_cmult_big_loop(
  uint8_t *n,
  uint64_t *nq,
  uint64_t *nqpq,
  uint64_t *nq2,
  uint64_t *nqpq2,
  uint64_t *q,
  uint32_t i
);

void Hacl_EC_Ladder_cmult(uint64_t *result, uint8_t *n, uint64_t *q);

void Hacl_EC_crypto_scalarmult(uint8_t *mypublic, uint8_t *secret, uint8_t *basepoint);
#endif
