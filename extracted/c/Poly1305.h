/* This file auto-generated by KreMLin! */
#ifndef __Hacl_MAC_H
#define __Hacl_MAC_H


#include "Hacl_Bignum.h"
#include "kremlib.h"
#include "testlib.h"

typedef void *Hacl_MAC_Poly1305_64_log_t;

typedef uint64_t *Hacl_MAC_Poly1305_64_bigint;

typedef uint8_t *Hacl_MAC_Poly1305_64_uint8_p;

typedef uint64_t *Hacl_MAC_Poly1305_64_elemB;

typedef uint8_t *Hacl_MAC_Poly1305_64_wordB;

typedef uint8_t *Hacl_MAC_Poly1305_64_wordB_16;

typedef struct {
  uint64_t *x00;
  uint64_t *x01;
}
Hacl_MAC_Poly1305_64_poly1305_state;

bool Hacl_MAC_Poly1305_64_uu___is_MkState(Hacl_MAC_Poly1305_64_poly1305_state projectee);

uint64_t
*Hacl_MAC_Poly1305_64___proj__MkState__item__r(Hacl_MAC_Poly1305_64_poly1305_state projectee);

uint64_t
*Hacl_MAC_Poly1305_64___proj__MkState__item__h(Hacl_MAC_Poly1305_64_poly1305_state projectee);

uint64_t Hacl_MAC_Poly1305_64_load64_le(uint8_t *b);

void Hacl_MAC_Poly1305_64_store64_le(uint8_t *b, uint64_t z);

Prims_nat Hacl_MAC_Poly1305_64_sel_int(FStar_HyperStack_mem h, uint64_t *b);

void Hacl_MAC_Poly1305_64_upd_3(uint64_t *b, uint64_t b0, uint64_t b1, uint64_t b2);

void Hacl_MAC_Poly1305_64_poly1305_encode_r(uint64_t *r, uint8_t *key);

extern uint64_t Hacl_MAC_Poly1305_64_mask_42;

extern uint64_t Hacl_MAC_Poly1305_64_mask_44;

void Hacl_MAC_Poly1305_64_toField(uint64_t *b, uint8_t *m);

void Hacl_MAC_Poly1305_64_toField_plus_2_128(uint64_t *b, uint8_t *m);

void Hacl_MAC_Poly1305_64_poly1305_start(uint64_t *a);

void Hacl_MAC_Poly1305_64_poly1305_init_(Hacl_MAC_Poly1305_64_poly1305_state st, uint8_t *key);

void
Hacl_MAC_Poly1305_64_poly1305_update(
  void *log,
  Hacl_MAC_Poly1305_64_poly1305_state st,
  uint8_t *m
);

void
Hacl_MAC_Poly1305_64_poly1305_blocks(
  void *log,
  Hacl_MAC_Poly1305_64_poly1305_state st,
  uint8_t *m,
  uint64_t len
);

void Hacl_MAC_Poly1305_64_poly1305_concat(uint8_t *b, uint8_t *m, uint64_t len);

void
Hacl_MAC_Poly1305_64_poly1305_process_last_block_(
  uint8_t *block,
  Hacl_MAC_Poly1305_64_poly1305_state st,
  uint8_t *m,
  uint64_t rem_
);

void
Hacl_MAC_Poly1305_64_poly1305_process_last_block(
  Hacl_MAC_Poly1305_64_poly1305_state st,
  uint8_t *m,
  uint64_t rem_
);

void Hacl_MAC_Poly1305_64_poly1305_last_pass(uint64_t *acc);

void Hacl_MAC_Poly1305_64_store128_le(uint8_t *mac, FStar_UInt128_t mac_);

void
Hacl_MAC_Poly1305_64_poly1305_finish__(
  void *log,
  Hacl_MAC_Poly1305_64_poly1305_state st,
  uint8_t *mac,
  uint8_t *m,
  uint64_t len,
  uint8_t *key_s
);

void
Hacl_MAC_Poly1305_64_poly1305_finish_(
  void *log,
  Hacl_MAC_Poly1305_64_poly1305_state st,
  uint8_t *mac,
  uint8_t *m,
  uint64_t len,
  uint8_t *key_s
);

void
Hacl_MAC_Poly1305_64_crypto_onetimeauth(
  uint8_t *output,
  uint8_t *input,
  uint64_t len,
  uint8_t *k
);
#endif
