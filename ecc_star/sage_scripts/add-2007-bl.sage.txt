def mynumerator(x):
  if parent(x) == R:
    return x
  return numerator(x)

class fastfrac:
  def __init__(self,top,bot=1):
    if parent(top) == ZZ or parent(top) == R:
      self.top = R(top)
      self.bot = R(bot)
    elif top.__class__ == fastfrac:
      self.top = top.top
      self.bot = top.bot * bot
    else:
      self.top = R(numerator(top))
      self.bot = R(denominator(top)) * bot
  def reduce(self):
    return fastfrac(self.top / self.bot)
  def sreduce(self):
    return fastfrac(I.reduce(self.top),I.reduce(self.bot))
  def iszero(self):
    return self.top in I and not (self.bot in I)
  def isdoublingzero(self):
    return self.top in J and not (self.bot in J)
  def __add__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top + self.bot * other,self.bot)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.bot + self.bot * other.top,self.bot * other.bot)
    return NotImplemented
  def __sub__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top - self.bot * other,self.bot)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.bot - self.bot * other.top,self.bot * other.bot)
    return NotImplemented
  def __neg__(self):
    return fastfrac(-self.top,self.bot)
  def __mul__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top * other,self.bot)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.top,self.bot * other.bot)
    return NotImplemented
  def __rmul__(self,other):
    return self.__mul__(other)
  def __div__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top,self.bot * other)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.bot,self.bot * other.top)
    return NotImplemented
  def __pow__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top ^ other,self.bot ^ other)
    return NotImplemented

def isidentity(x):
  return x.iszero()

def isdoublingidentity(x):
  return x.isdoublingzero()

R.<ua,ub,ux2,uy2,ux1,uy1,uX1,uY1,uZ1,uX2,uY2,uZ2> = PolynomialRing(QQ,12,order='invlex')
I = R.ideal([
  mynumerator((uy1^2)-(ux1^3+ua*ux1+ub))
, mynumerator((ux1)-(uX1/uZ1^2))
, mynumerator((uy1)-(uY1/uZ1^3))
, mynumerator((uy2^2)-(ux2^3+ua*ux2+ub))
, mynumerator((ux2)-(uX2/uZ2^2))
, mynumerator((uy2)-(uY2/uZ2^3))
, mynumerator((ua)-(-3))
])

J = I + R.ideal([0
, uX1-uX2
, uY1-uY2
, uZ1-uZ2
])

ua = fastfrac(ua)
ub = fastfrac(ub)
ux2 = fastfrac(ux2)
uy2 = fastfrac(uy2)
ux1 = fastfrac(ux1)
uy1 = fastfrac(uy1)
uX1 = fastfrac(uX1)
uY1 = fastfrac(uY1)
uZ1 = fastfrac(uZ1)
uX2 = fastfrac(uX2)
uY2 = fastfrac(uY2)
uZ2 = fastfrac(uZ2)


uZ1Z1 = ((uZ1^2))
uZ2Z2 = ((uZ2^2))
uU1 = ((uX1*uZ2Z2))
uU2 = ((uX2*uZ1Z1))
uS1 = ((uY1*uZ2*uZ2Z2))
uS2 = ((uY2*uZ1*uZ1Z1))
uH = ((uU2-uU1))
uI = (((fastfrac(2)*uH)^2))
uJ = ((uH*uI))
ur = ((fastfrac(2)*(uS2-uS1)))
uV = ((uU1*uI))
uX3 = ((ur^2-uJ-fastfrac(2)*uV))
uY3 = ((ur*(uV-uX3)-fastfrac(2)*uS1*uJ))
uZ3 = ((((uZ1+uZ2)^2-uZ1Z1-uZ2Z2)*uH))

ux3 = (((uy2-uy1)^2/(ux2-ux1)^2-ux1-ux2)).reduce()
uy3 = (((fastfrac(2)*ux1+ux2)*(uy2-uy1)/(ux2-ux1)-(uy2-uy1)^3/(ux2-ux1)^3-uy1)).reduce()

print isidentity((uy3^2)-(ux3^3+ua*ux3+ub))
print isidentity((ux3)-(uX3/uZ3^2))
print isidentity((uy3)-(uY3/uZ3^3))

unified = True
uX4 = uX3
uY4 = uY3
uZ4 = uZ3
ux4 = (((fastfrac(3)*ux1^2+ua)^2/(fastfrac(2)*uy1)^2-ux1-ux1)).reduce()
uy4 = (((fastfrac(2)*ux1+ux1)*(fastfrac(3)*ux1^2+ua)/(fastfrac(2)*uy1)-(fastfrac(3)*ux1^2+ua)^3/(fastfrac(2)*uy1)^3-uy1)).reduce()
if unified: unified = isdoublingidentity((uy4^2)-(ux4^3+ua*ux4+ub))
if unified: unified = isdoublingidentity((ux4)-(uX4/uZ4^2))
if unified: unified = isdoublingidentity((uy4)-(uY4/uZ4^3))
if unified: print "Unified"

