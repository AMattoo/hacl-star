
open Prims
let op_Bar_Amp = (fun x y -> (UInt.log_and_wide x y))

let op_Bar_Greater_Greater = (fun x y -> (UInt.shift_right_wide x y))

let op_Bar_Less_Less = (fun x y -> (UInt.shift_left_wide x y))

let op_Bar_Plus = (fun x y -> (UInt.add_wide x y))

let op_Bar_Star = (fun x y -> (UInt.mul_wide x y))

let op_Bar_Subtraction = (fun x y -> (UInt.sub_wide x y))

let satisfies_modulo_constraints = (fun h b -> (Obj.magic (())))

let lemma_satisfies = (fun h b n -> ())

let sum_satisfies_constraints = (fun h0 h1 cpy a b -> ())

let n0 = Parameters.ndiff'

let n1 = Parameters.ndiff

let difference_satisfies_constraints = (fun h0 h1 cpy a b -> ())

let lemma_satisfies_2 = (fun h b -> ())

let lemma_satisfies_4 = (fun a b c d -> ())

let lemma_satisfies_3 = (fun b c -> ())

let mul_satisfies_constraints = (fun h0 h1 res a b -> ())

let templ_large = (fun i -> 64)

type bigint_large =
Prims.unit Bigint.biginteger

let lemma_helper_00 = (fun n m -> ())

let lemma_helper_01 = (fun n m -> ())

let lemma_helper_02 = (fun _24_99 -> ())

let lemma_helper_04 = (fun a b c d -> ())

let lemma_helper_03 = (fun h b -> ())

let kPrime = (fun _24_140 -> (match (()) with
| () -> begin
(let a = (Bigint.create_wide_templ 4 templ_large)
in (let v_2_64 = (op_Bar_Less_Less UInt.one_wide 64)
in (let v_2_32 = (op_Bar_Less_Less UInt.one_wide 32)
in (let _24_144 = ()
in (let _24_146 = ()
in (let _24_148 = ()
in (let _24_150 = ()
in (let _24_152 = ()
in (let a0 = (op_Bar_Subtraction v_2_64 UInt.one_wide)
in (let a1 = (op_Bar_Subtraction v_2_32 UInt.one_wide)
in (let a3 = (op_Bar_Plus (op_Bar_Subtraction v_2_64 v_2_32) UInt.one_wide)
in (let _24_157 = ()
in (let _24_159 = (Bigint.upd_wide a 0 a0)
in (let _24_161 = (Bigint.upd_wide a 1 a1)
in (let _24_163 = (Bigint.upd_wide a 3 a3)
in (let h = (FStar_ST.get ())
in (let _24_166 = ()
in a)))))))))))))))))
end))

let lemma_helper_10 = (fun _24_168 -> ())

let zero_110 = (fun _24_193 -> (match (()) with
| () -> begin
(let _24_194 = ()
in (let v2_32 = (op_Bar_Less_Less UInt.one_wide 32)
in (let v2_46 = (op_Bar_Less_Less UInt.one_wide 46)
in (let v2_64 = (op_Bar_Less_Less UInt.one_wide 64)
in (let v2_110 = (op_Bar_Less_Less UInt.one_wide 110)
in (let two64m0 = (op_Bar_Subtraction v2_64 UInt.one_wide)
in (let two110p32m0 = (op_Bar_Subtraction (op_Bar_Plus v2_110 v2_32) UInt.one_wide)
in (let two64m46 = (op_Bar_Subtraction v2_64 v2_46)
in (let two64m32 = (op_Bar_Subtraction v2_64 v2_32)
in (let a = (Bigint.create_wide_templ 4 templ_large)
in (let _24_205 = (Bigint.upd_wide a 0 two64m0)
in (let _24_207 = (Bigint.upd_wide a 1 two110p32m0)
in (let _24_209 = (Bigint.upd_wide a 2 two64m46)
in (let _24_211 = (Bigint.upd_wide a 3 two64m32)
in (let h = (FStar_ST.get ())
in (let _24_214 = ()
in a))))))))))))))))
end))

let lemma_helper_20 = (fun _24_222 -> ())

let lemma_helper_21 = (fun _24_239 -> ())

let add_zero_71 = (fun b -> (let h0 = (FStar_ST.get ())
in (let _24_272 = ()
in (let zero71m39 = (op_Bar_Subtraction (op_Bar_Less_Less UInt.one_wide 71) (op_Bar_Less_Less UInt.one_wide 39))
in (let zero71m40 = (op_Bar_Subtraction (op_Bar_Less_Less UInt.one_wide 71) (op_Bar_Less_Less UInt.one_wide 40))
in (let zero71 = (op_Bar_Less_Less UInt.one_wide 71)
in (let b0 = (Bigint.index_wide b 0)
in (let b1 = (Bigint.index_wide b 1)
in (let b2 = (Bigint.index_wide b 2)
in (let b3 = (Bigint.index_wide b 3)
in (let b4 = (Bigint.index_wide b 4)
in (let b5 = (Bigint.index_wide b 5)
in (let b6 = (Bigint.index_wide b 6)
in (let b7 = (Bigint.index_wide b 7)
in (let _24_285 = ()
in (let _24_287 = (Bigint.upd_wide b 0 (op_Bar_Plus b0 zero71m39))
in (let _24_289 = (Bigint.upd_wide b 1 (op_Bar_Plus b1 zero71m39))
in (let _24_291 = (Bigint.upd_wide b 2 (op_Bar_Plus b2 zero71m39))
in (let _24_293 = (Bigint.upd_wide b 3 (op_Bar_Plus b3 zero71))
in (let _24_295 = (Bigint.upd_wide b 4 (op_Bar_Plus b4 zero71m39))
in (let _24_297 = (Bigint.upd_wide b 5 (op_Bar_Plus b5 zero71m39))
in (let _24_299 = (Bigint.upd_wide b 6 (op_Bar_Plus b6 zero71))
in (let _24_301 = (Bigint.upd_wide b 7 (op_Bar_Plus b7 zero71m40))
in (let h1 = (FStar_ST.get ())
in ()))))))))))))))))))))))))

let add_top_to_bottom = (fun b -> (let _24_311 = ()
in (let b0 = (Bigint.index_wide b 0)
in (let b1 = (Bigint.index_wide b 1)
in (let b2 = (Bigint.index_wide b 2)
in (let b3 = (Bigint.index_wide b 3)
in (let b4 = (Bigint.index_wide b 4)
in (let b5 = (Bigint.index_wide b 5)
in (let b6 = (Bigint.index_wide b 6)
in (let b7 = (Bigint.index_wide b 7)
in (let b8 = (Bigint.index_wide b 8)
in (let b9 = (Bigint.index_wide b 9)
in (let b10 = (Bigint.index_wide b 10)
in (let b11 = (Bigint.index_wide b 11)
in (let b12 = (Bigint.index_wide b 12)
in (let b13 = (Bigint.index_wide b 13)
in (let b14 = (Bigint.index_wide b 14)
in (let v0 = (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Plus (op_Bar_Plus b0 b8) b9) b11) b12) b13) b14)
in (let v1 = (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Plus (op_Bar_Plus b1 b9) b10) b12) b13) b14)
in (let v2 = (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Plus (op_Bar_Plus b2 b10) b11) b13) b14)
in (let v3 = (op_Bar_Plus (op_Bar_Plus (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Plus b3 (op_Bar_Less_Less b11 1)) b9) b8) (op_Bar_Less_Less b12 1)) b13)
in (let v4 = (op_Bar_Plus (op_Bar_Plus (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Plus b4 (op_Bar_Less_Less b12 1)) b9) b10) (op_Bar_Less_Less b13 1)) b14)
in (let v5 = (op_Bar_Plus (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Plus b5 (op_Bar_Less_Less b13 1)) b10) b11) (op_Bar_Less_Less b14 1))
in (let v6 = (op_Bar_Plus (op_Bar_Plus (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Plus b6 b13) b8) b9) (op_Bar_Less_Less b14 1)) b14)
in (let v7 = (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Subtraction (op_Bar_Plus b7 b8) b10) b11) b12) b13)
in (let _24_336 = (Bigint.upd_wide b 0 v0)
in (let _24_338 = (Bigint.upd_wide b 1 v1)
in (let _24_340 = (Bigint.upd_wide b 2 v2)
in (let _24_342 = (Bigint.upd_wide b 3 v3)
in (let _24_344 = (Bigint.upd_wide b 4 v4)
in (let _24_346 = (Bigint.upd_wide b 5 v5)
in (let _24_348 = (Bigint.upd_wide b 6 v6)
in (Bigint.upd_wide b 7 v7)))))))))))))))))))))))))))))))))

let freduce_degree' = (fun b -> (let _24_357 = (add_zero_71 b)
in (add_top_to_bottom b)))

let lemma_helper_31 = (fun a b c -> ())

let lemma_helper_32 = (fun a b -> ())

let lemma_helper_30 = (fun b0 b1 -> ())

let shrink = (fun input b' -> (let h0 = (FStar_ST.get ())
in (let b0 = (Bigint.index_wide b' 0)
in (let b1 = (Bigint.index_wide b' 1)
in (let b2 = (Bigint.index_wide b' 2)
in (let b3 = (Bigint.index_wide b' 3)
in (let b4 = (Bigint.index_wide b' 4)
in (let b5 = (Bigint.index_wide b' 5)
in (let b6 = (Bigint.index_wide b' 6)
in (let b7 = (Bigint.index_wide b' 7)
in (let _24_410 = ()
in (let _24_412 = (Bigint.upd_wide input 0 (op_Bar_Plus b0 (op_Bar_Less_Less b1 32)))
in (let _24_414 = ()
in (let _24_416 = (Bigint.upd_wide input 1 (op_Bar_Plus b2 (op_Bar_Less_Less b3 32)))
in (let _24_418 = ()
in (let _24_420 = (Bigint.upd_wide input 2 (op_Bar_Plus b4 (op_Bar_Less_Less b5 32)))
in (let _24_422 = ()
in (let _24_424 = (Bigint.upd_wide input 3 (op_Bar_Plus b6 (op_Bar_Less_Less b7 32)))
in (let h1 = (FStar_ST.get ())
in ())))))))))))))))))))

let mod_2_64 = (fun x -> (let _24_430 = ()
in (let mask64 = (op_Bar_Subtraction (op_Bar_Less_Less UInt.one_wide 64) UInt.one_wide)
in (let r = (UInt.log_and_wide x mask64)
in r))))

let lemma_helper_40 = (fun a b c -> ())

let lemma_helper_41 = (fun a b -> ())

let lemma_helper_42 = (fun a b -> ())

let lemma_helper_43 = (fun a b -> ())

let lemma_helper_44 = (fun a b c -> ())

let add_zero_110 = (fun tmp input -> (let h0 = (FStar_ST.get ())
in (let zero110 = (zero_110 ())
in (let z3 = (Bigint.index_wide zero110 3)
in (let z2 = (Bigint.index_wide zero110 2)
in (let z1 = (Bigint.index_wide zero110 1)
in (let z0 = (Bigint.index_wide zero110 0)
in (let i3 = (Bigint.index_wide input 3)
in (let i2 = (Bigint.index_wide input 2)
in (let i1 = (Bigint.index_wide input 1)
in (let i0 = (Bigint.index_wide input 0)
in (let r2 = (mod_2_64 i2)
in (let c2 = (op_Bar_Greater_Greater i2 64)
in (let _24_508 = ()
in (let _24_510 = ()
in (let t3 = (op_Bar_Plus (op_Bar_Plus z3 i3) c2)
in (let _24_513 = ()
in (let t2 = (op_Bar_Plus z2 r2)
in (let _24_516 = ()
in (let t1 = (op_Bar_Plus i1 z1)
in (let _24_519 = ()
in (let t0 = (op_Bar_Plus z0 i0)
in (let _24_522 = ()
in (let _24_524 = (Bigint.upd_wide tmp 3 t3)
in (let _24_526 = (Bigint.upd_wide tmp 2 t2)
in (let _24_528 = (Bigint.upd_wide tmp 1 t1)
in (let _24_530 = (Bigint.upd_wide tmp 0 t0)
in (let _24_532 = ()
in (let h1 = (FStar_ST.get ())
in ())))))))))))))))))))))))))))))

let lemma_helper_51 = (fun c3 c3_2_32 -> ())

let lemma_helper_52 = (fun r3 c3_2_32 c3 -> ())

let lemma_helper_53 = (fun t1 c3_2_32 -> ())

let lemma_helper_54 = (fun t0 c3 -> ())

let carry_top_1 = (fun t -> (let h0 = (FStar_ST.get ())
in (let t3 = (Bigint.index_wide t 3)
in (let t1 = (Bigint.index_wide t 1)
in (let t0 = (Bigint.index_wide t 0)
in (let c3 = (op_Bar_Greater_Greater t3 64)
in (let _24_589 = ()
in (let r3 = (mod_2_64 t3)
in (let c3_2_32 = (op_Bar_Less_Less c3 32)
in (let _24_593 = ()
in (let _24_595 = ()
in (let _24_597 = ()
in (let _24_599 = ()
in (let t3' = (op_Bar_Subtraction (op_Bar_Plus r3 c3_2_32) c3)
in (let _24_602 = ()
in (let t1' = (op_Bar_Subtraction t1 c3_2_32)
in (let _24_605 = ()
in (let t0' = (op_Bar_Plus t0 c3)
in (let _24_608 = (Bigint.upd_wide t 3 t3')
in (let _24_610 = (Bigint.upd_wide t 1 t1')
in (let _24_612 = (Bigint.upd_wide t 0 t0')
in (let h1 = (FStar_ST.get ())
in ()))))))))))))))))))))))

let lemma_helper_61 = (fun c3 c3_2_32 -> ())

let lemma_helper_62 = (fun r3 c3_2_32 c3 -> ())

let lemma_helper_63 = (fun t1 c3_2_32 -> ())

let lemma_helper_64 = (fun t0 c3 -> ())

let carry_top_2 = (fun t -> (let h0 = (FStar_ST.get ())
in (let t3 = (Bigint.index_wide t 3)
in (let t1 = (Bigint.index_wide t 1)
in (let t0 = (Bigint.index_wide t 0)
in (let c3 = (op_Bar_Greater_Greater t3 64)
in (let _24_673 = ()
in (let r3 = (mod_2_64 t3)
in (let c3_2_32 = (op_Bar_Less_Less c3 32)
in (let _24_677 = ()
in (let _24_679 = ()
in (let t3' = (op_Bar_Subtraction (op_Bar_Plus r3 c3_2_32) c3)
in (let _24_682 = ()
in (let t1' = (op_Bar_Subtraction t1 c3_2_32)
in (let _24_685 = ()
in (let t0' = (op_Bar_Plus t0 c3)
in (let _24_688 = (Bigint.upd_wide t 3 t3')
in (let _24_690 = (Bigint.upd_wide t 1 t1')
in (let _24_692 = (Bigint.upd_wide t 0 t0')
in (let h1 = (FStar_ST.get ())
in ()))))))))))))))))))))

let cond_subtract_prime = (fun tmp -> (let _24_702 = ()
in (let prime = (kPrime ())
in (let t3 = (Bigint.index_wide tmp 3)
in (let kPrime3Test = (op_Bar_Plus (op_Bar_Subtraction (op_Bar_Less_Less UInt.one_wide 64) (op_Bar_Less_Less UInt.one_wide 32)) UInt.one_wide)
in (let mask = (UInt.gte_wide t3 kPrime3Test)
in (let t0 = (Bigint.index_wide tmp 0)
in (let t1 = (Bigint.index_wide tmp 1)
in (let t3 = (Bigint.index_wide tmp 3)
in (let p0 = (Bigint.index_wide prime 0)
in (let p1 = (Bigint.index_wide prime 1)
in (let p3 = (Bigint.index_wide prime 3)
in (let _24_714 = (Bigint.upd_wide tmp 0 (op_Bar_Subtraction t0 (op_Bar_Amp mask p0)))
in (let _24_716 = (Bigint.upd_wide tmp 1 (op_Bar_Subtraction t1 (op_Bar_Amp mask p1)))
in (Bigint.upd_wide tmp 3 (op_Bar_Subtraction t3 (op_Bar_Amp mask p3)))))))))))))))))

let carry_pass = (fun tmp -> (let _24_725 = ()
in (let mask64 = (op_Bar_Subtraction (op_Bar_Less_Less UInt.one_wide 64) UInt.one_wide)
in (let t0 = (Bigint.index_wide tmp 0)
in (let t1 = (Bigint.index_wide tmp 1)
in (let _24_730 = (Bigint.upd_wide tmp 1 (op_Bar_Plus t1 (op_Bar_Greater_Greater t0 64)))
in (let _24_732 = (Bigint.upd_wide tmp 0 (op_Bar_Amp t0 mask64))
in (let t1 = (Bigint.index_wide tmp 1)
in (let t2 = (Bigint.index_wide tmp 2)
in (let t3 = (Bigint.index_wide tmp 3)
in (let _24_737 = (Bigint.upd_wide tmp 2 (op_Bar_Plus t2 (op_Bar_Greater_Greater t1 64)))
in (let t2 = (Bigint.index_wide tmp 2)
in (let _24_740 = (Bigint.upd_wide tmp 1 (op_Bar_Amp t1 mask64))
in (let _24_742 = (Bigint.upd_wide tmp 3 (op_Bar_Plus t3 (op_Bar_Greater_Greater t2 64)))
in (Bigint.upd_wide tmp 2 (op_Bar_Amp t2 mask64))))))))))))))))

let expand = (fun b' tmp -> (let _24_754 = ()
in (let t0 = (Bigint.index_wide tmp 0)
in (let t1 = (Bigint.index_wide tmp 1)
in (let t2 = (Bigint.index_wide tmp 2)
in (let t3 = (Bigint.index_wide tmp 3)
in (let mask32 = (UInt.to_wide "0xffffffff")
in (let _24_761 = (Bigint.upd_wide b' 0 (op_Bar_Amp t0 mask32))
in (let _24_763 = (Bigint.upd_wide b' 1 (op_Bar_Greater_Greater t0 32))
in (let _24_765 = (Bigint.upd_wide b' 2 (op_Bar_Amp t1 mask32))
in (let _24_767 = (Bigint.upd_wide b' 3 (op_Bar_Greater_Greater t1 32))
in (let _24_769 = (Bigint.upd_wide b' 4 (op_Bar_Amp t2 mask32))
in (let _24_771 = (Bigint.upd_wide b' 5 (op_Bar_Greater_Greater t2 32))
in (let _24_773 = (Bigint.upd_wide b' 6 (op_Bar_Amp t3 mask32))
in (Bigint.upd_wide b' 7 (op_Bar_Greater_Greater t3 32))))))))))))))))

let lemma_helper_80 = (fun h0 h1 h2 h3 b i t -> ())

let freduce_coefficients = (fun b' -> (let h0 = (FStar_ST.get ())
in (let input = (Bigint.create_wide_templ 4 templ_large)
in (let h0' = (FStar_ST.get ())
in (let _24_799 = ()
in (let _24_801 = (shrink input b')
in (let h1 = (FStar_ST.get ())
in (let _24_804 = ()
in (let _24_806 = ()
in (let tmp = (Bigint.create_wide_templ 4 templ_large)
in (let h1' = (FStar_ST.get ())
in (let _24_810 = ()
in (let _24_812 = (add_zero_110 tmp input)
in (let _24_814 = (carry_top_1 tmp)
in (let _24_816 = (carry_top_2 tmp)
in (let _24_818 = (cond_subtract_prime tmp)
in (let h2 = (FStar_ST.get ())
in (let _24_821 = ()
in (let _24_823 = ()
in (let _24_825 = (carry_pass tmp)
in (let h3 = (FStar_ST.get ())
in (let _24_828 = ()
in (let _24_830 = (expand b' tmp)
in (let h1 = (FStar_ST.get ())
in ()))))))))))))))))))))))))

let freduce_degree = (fun b -> (let _24_842 = (freduce_degree' b)
in (freduce_coefficients b)))

let carry_top_to_0 = (fun b -> ())

let add_big_zero = (fun b -> (let _24_851 = ()
in (let two33m1 = (UInt.to_limb "0x1fffffffe")
in (let two33m2 = (UInt.to_limb "0x1fffffffc")
in (let two33 = (UInt.to_limb "0x200000000")
in (let b0 = (Bigint.index_limb b 0)
in (let _24_857 = (Bigint.upd_limb b 0 (UInt.add_limb b0 two33m1))
in (let b1 = (Bigint.index_limb b 1)
in (let _24_860 = (Bigint.upd_limb b 1 (UInt.add_limb b1 two33m1))
in (let b2 = (Bigint.index_limb b 2)
in (let _24_863 = (Bigint.upd_limb b 2 (UInt.add_limb b2 two33m1))
in (let b3 = (Bigint.index_limb b 3)
in (let _24_866 = (Bigint.upd_limb b 3 (UInt.add_limb b3 two33))
in (let b4 = (Bigint.index_limb b 4)
in (let _24_869 = (Bigint.upd_limb b 4 (UInt.add_limb b4 two33m1))
in (let b5 = (Bigint.index_limb b 5)
in (let _24_872 = (Bigint.upd_limb b 5 (UInt.add_limb b5 two33m1))
in (let b6 = (Bigint.index_limb b 6)
in (let _24_875 = (Bigint.upd_limb b 6 (UInt.add_limb b6 two33))
in (let b7 = (Bigint.index_limb b 7)
in (Bigint.upd_limb b 7 (UInt.add_limb b7 two33m2))))))))))))))))))))))

let subtract_u64 = (fun result carry v -> (let z = (FStar_ST.read result)
in (let r = (UInt.limb_to_wide z)
in (let _24_891 = ()
in (let r = (UInt.sub_mod_wide r (UInt.limb_to_wide v))
in (let _24_894 = (FStar_ST.op_Colon_Equals carry (UInt.wide_to_limb (op_Bar_Amp (op_Bar_Greater_Greater r 64) UInt.one_wide)))
in (FStar_ST.op_Colon_Equals result (UInt.wide_to_limb r))))))))

let rec felem_contract_loop = (fun output prime all_equal_so_far result ctr -> (let _24_911 = ()
in (match (ctr) with
| 0 -> begin
()
end
| _24_915 -> begin
(let i = (ctr - 1)
in (let pi = (Bigint.index_wide prime i)
in (let oi = (Bigint.index_limb output i)
in (let a = (op_Bar_Subtraction pi (UInt.limb_to_wide oi))
in (let _24_920 = (let _65_634 = (let _65_633 = (FStar_ST.read all_equal_so_far)
in (UInt.log_or_limb _65_633 (UInt.wide_to_limb (op_Bar_Greater_Greater a 64))))
in (FStar_ST.op_Colon_Equals result _65_634))
in (let equal = (UInt.log_xor_limb (UInt.wide_to_limb pi) oi)
in (let equal = (UInt.sub_limb equal UInt.one_limb)
in (let equal = (UInt.log_and_limb equal (UInt.shift_left_limb equal 32))
in (let equal = (UInt.log_and_limb equal (UInt.shift_left_limb equal 16))
in (let equal = (UInt.log_and_limb equal (UInt.shift_left_limb equal 8))
in (let equal = (UInt.log_and_limb equal (UInt.shift_left_limb equal 4))
in (let equal = (UInt.log_and_limb equal (UInt.shift_left_limb equal 2))
in (let equal = (UInt.log_and_limb equal (UInt.shift_left_limb equal 1))
in (let equal = (UInt.eq_limb (UInt.log_and_limb (UInt.shift_right_limb equal 63) UInt.one_limb) UInt.one_limb)
in (let _24_931 = (let _65_640 = (let _65_639 = (FStar_ST.read all_equal_so_far)
in (UInt.log_and_limb _65_639 equal))
in (FStar_ST.op_Colon_Equals all_equal_so_far _65_640))
in (felem_contract_loop output prime all_equal_so_far result (ctr - 1)))))))))))))))))
end)))

let normalize = (fun output -> (let _24_940 = ()
in (let input = (Bigint.create_limb 4)
in (let b0 = (Bigint.index_limb output 0)
in (let b1 = (Bigint.index_limb output 1)
in (let b2 = (Bigint.index_limb output 2)
in (let b3 = (Bigint.index_limb output 3)
in (let b4 = (Bigint.index_limb output 4)
in (let b5 = (Bigint.index_limb output 5)
in (let b6 = (Bigint.index_limb output 6)
in (let b7 = (Bigint.index_limb output 7)
in (let _24_951 = (Bigint.upd_limb input 0 (UInt.add_limb b0 (UInt.shift_left_limb b1 32)))
in (let _24_953 = (Bigint.upd_limb input 1 (UInt.add_limb b2 (UInt.shift_left_limb b3 32)))
in (let _24_955 = (Bigint.upd_limb input 2 (UInt.add_limb b4 (UInt.shift_left_limb b5 32)))
in (let _24_957 = (Bigint.upd_limb input 3 (UInt.add_limb b6 (UInt.shift_left_limb b7 32)))
in (let all_equal_so_far = (FStar_ST.alloc (UInt.to_limb "0xffffffffffffffff"))
in (let result = (FStar_ST.alloc UInt.zero_limb)
in (let prime = (kPrime ())
in (let _24_962 = (felem_contract_loop input prime all_equal_so_far result 4)
in (let _24_964 = (let _65_654 = (let _65_653 = (FStar_ST.read result)
in (let _65_652 = (FStar_ST.read all_equal_so_far)
in (UInt.log_or_limb _65_653 _65_652)))
in (FStar_ST.op_Colon_Equals result _65_654))
in (let final_result = (FStar_ST.read result)
in (let carry = (FStar_ST.alloc UInt.zero_limb)
in (let _24_968 = (let _65_661 = (Bigint.index_limb input 0)
in (FStar_ST.op_Colon_Equals result _65_661))
in (let p0 = (Bigint.index_wide prime 0)
in (let _24_971 = (subtract_u64 result carry (UInt.log_and_limb final_result (UInt.wide_to_limb p0)))
in (let _24_973 = (let _65_663 = (FStar_ST.read result)
in (Bigint.upd_limb input 0 _65_663))
in (let _24_975 = (let _65_665 = (Bigint.index_limb input 1)
in (FStar_ST.op_Colon_Equals result _65_665))
in (let _24_977 = (let _65_667 = (FStar_ST.read carry)
in (subtract_u64 result carry _65_667))
in (let _24_979 = (let _65_669 = (FStar_ST.read result)
in (Bigint.upd_limb input 1 _65_669))
in (let _24_981 = (let _65_671 = (Bigint.index_limb input 2)
in (FStar_ST.op_Colon_Equals result _65_671))
in (let _24_983 = (let _65_673 = (FStar_ST.read carry)
in (subtract_u64 result carry _65_673))
in (let _24_985 = (let _65_675 = (FStar_ST.read result)
in (Bigint.upd_limb input 2 _65_675))
in (let _24_987 = (let _65_677 = (Bigint.index_limb input 3)
in (FStar_ST.op_Colon_Equals result _65_677))
in (let _24_989 = (let _65_679 = (FStar_ST.read carry)
in (subtract_u64 result carry _65_679))
in (let _24_991 = (let _65_681 = (FStar_ST.read result)
in (Bigint.upd_limb input 3 _65_681))
in (let p1 = (Bigint.index_wide prime 1)
in (let _24_994 = (let _65_683 = (Bigint.index_limb input 1)
in (FStar_ST.op_Colon_Equals result _65_683))
in (let _24_996 = (subtract_u64 result carry (UInt.log_and_limb final_result (UInt.wide_to_limb p1)))
in (let _24_998 = (let _65_685 = (FStar_ST.read result)
in (Bigint.upd_limb input 1 _65_685))
in (let _24_1000 = (let _65_687 = (Bigint.index_limb input 2)
in (FStar_ST.op_Colon_Equals result _65_687))
in (let _24_1002 = (let _65_689 = (FStar_ST.read carry)
in (subtract_u64 result carry _65_689))
in (let _24_1004 = (let _65_691 = (FStar_ST.read result)
in (Bigint.upd_limb input 2 _65_691))
in (let _24_1006 = (let _65_693 = (Bigint.index_limb input 3)
in (FStar_ST.op_Colon_Equals result _65_693))
in (let _24_1008 = (let _65_695 = (FStar_ST.read carry)
in (subtract_u64 result carry _65_695))
in (let _24_1010 = (let _65_697 = (FStar_ST.read result)
in (Bigint.upd_limb input 3 _65_697))
in (let p2 = (Bigint.index_wide prime 2)
in (let _24_1013 = (let _65_699 = (Bigint.index_limb input 2)
in (FStar_ST.op_Colon_Equals result _65_699))
in (let _24_1015 = (subtract_u64 result carry (UInt.log_and_limb final_result (UInt.wide_to_limb p2)))
in (let _24_1017 = (let _65_701 = (FStar_ST.read result)
in (Bigint.upd_limb input 2 _65_701))
in (let _24_1019 = (let _65_703 = (Bigint.index_limb input 3)
in (FStar_ST.op_Colon_Equals result _65_703))
in (let _24_1021 = (let _65_705 = (FStar_ST.read carry)
in (subtract_u64 result carry _65_705))
in (let _24_1023 = (let _65_707 = (FStar_ST.read result)
in (Bigint.upd_limb input 3 _65_707))
in (let p3 = (Bigint.index_wide prime 3)
in (let _24_1026 = (let _65_709 = (Bigint.index_limb input 3)
in (FStar_ST.op_Colon_Equals result _65_709))
in (let _24_1028 = (subtract_u64 result carry (UInt.log_and_limb final_result (UInt.wide_to_limb p3)))
in (let _24_1030 = (let _65_711 = (FStar_ST.read result)
in (Bigint.upd_limb input 3 _65_711))
in (let mask32 = (UInt.to_limb "0xffffffff")
in (let i0 = (Bigint.index_limb input 0)
in (let i1 = (Bigint.index_limb input 1)
in (let i2 = (Bigint.index_limb input 2)
in (let i3 = (Bigint.index_limb input 3)
in (let _24_1037 = (Bigint.upd_limb output 0 (UInt.log_and_limb i0 mask32))
in (let _24_1039 = (Bigint.upd_limb output 1 (UInt.shift_right_limb i0 32))
in (let _24_1041 = (Bigint.upd_limb output 2 (UInt.log_and_limb i1 mask32))
in (let _24_1043 = (Bigint.upd_limb output 3 (UInt.shift_right_limb i1 32))
in (let _24_1045 = (Bigint.upd_limb output 4 (UInt.log_and_limb i2 mask32))
in (let _24_1047 = (Bigint.upd_limb output 5 (UInt.shift_right_limb i2 32))
in (let _24_1049 = (Bigint.upd_limb output 6 (UInt.log_and_limb i3 mask32))
in (Bigint.upd_limb output 7 (UInt.shift_right_limb i3 32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))




