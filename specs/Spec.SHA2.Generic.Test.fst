module Spec.SHA2.Generic.Test

open Spec.Lib.IntTypes
open Spec.Lib.IntSeq

module Hash = Spec.SHA2.Generic


//
// Test 1
//

let test1_plaintext = List.Tot.map u8 [
  0x61; 0x62; 0x63;
]

let test1_expected224 = List.Tot.map u8 [
  0x23; 0x09; 0x7d; 0x22; 0x34; 0x05; 0xd8; 0x22;
  0x86; 0x42; 0xa4; 0x77; 0xbd; 0xa2; 0x55; 0xb3;
  0x2a; 0xad; 0xbc; 0xe4; 0xbd; 0xa0; 0xb3; 0xf7;
  0xe3; 0x6c; 0x9d; 0xa7
]

let test1_expected256 = List.Tot.map u8 [
  0xba; 0x78; 0x16; 0xbf; 0x8f; 0x01; 0xcf; 0xea;
  0x41; 0x41; 0x40; 0xde; 0x5d; 0xae; 0x22; 0x23;
  0xb0; 0x03; 0x61; 0xa3; 0x96; 0x17; 0x7a; 0x9c;
  0xb4; 0x10; 0xff; 0x61; 0xf2; 0x00; 0x15; 0xad
]

let test1_expected384 = List.Tot.map u8 [
  0xcb; 0x00; 0x75; 0x3f; 0x45; 0xa3; 0x5e; 0x8b;
  0xb5; 0xa0; 0x3d; 0x69; 0x9a; 0xc6; 0x50; 0x07;
  0x27; 0x2c; 0x32; 0xab; 0x0e; 0xde; 0xd1; 0x63;
  0x1a; 0x8b; 0x60; 0x5a; 0x43; 0xff; 0x5b; 0xed;
  0x80; 0x86; 0x07; 0x2b; 0xa1; 0xe7; 0xcc; 0x23;
  0x58; 0xba; 0xec; 0xa1; 0x34; 0xc8; 0x25; 0xa7
]

let test1_expected512 = List.Tot.map u8 [
  0xdd; 0xaf; 0x35; 0xa1; 0x93; 0x61; 0x7a; 0xba;
  0xcc; 0x41; 0x73; 0x49; 0xae; 0x20; 0x41; 0x31;
  0x12; 0xe6; 0xfa; 0x4e; 0x89; 0xa9; 0x7e; 0xa2;
  0x0a; 0x9e; 0xee; 0xe6; 0x4b; 0x55; 0xd3; 0x9a;
  0x21; 0x92; 0x99; 0x2a; 0x27; 0x4f; 0xc1; 0xa8;
  0x36; 0xba; 0x3c; 0x23; 0xa3; 0xfe; 0xeb; 0xbd;
  0x45; 0x4d; 0x44; 0x23; 0x64; 0x3c; 0xe8; 0x0e;
  0x2a; 0x9a; 0xc9; 0x4f; 0xa5; 0x4c; 0xa4; 0x9f
]

//
// Test 2
//

let test2_plaintext = List.Tot.map u8 []

let test2_expected224 = List.Tot.map u8 [
  0xd1; 0x4a; 0x02; 0x8c; 0x2a; 0x3a; 0x2b; 0xc9;
  0x47; 0x61; 0x02; 0xbb; 0x28; 0x82; 0x34; 0xc4;
  0x15; 0xa2; 0xb0; 0x1f; 0x82; 0x8e; 0xa6; 0x2a;
  0xc5; 0xb3; 0xe4; 0x2f
]

let test2_expected256 = List.Tot.map u8 [
  0xe3; 0xb0; 0xc4; 0x42; 0x98; 0xfc; 0x1c; 0x14;
  0x9a; 0xfb; 0xf4; 0xc8; 0x99; 0x6f; 0xb9; 0x24;
  0x27; 0xae; 0x41; 0xe4; 0x64; 0x9b; 0x93; 0x4c;
  0xa4; 0x95; 0x99; 0x1b; 0x78; 0x52; 0xb8; 0x55
]

let test2_expected384 = List.Tot.map u8 [
  0x38; 0xb0; 0x60; 0xa7; 0x51; 0xac; 0x96; 0x38;
  0x4c; 0xd9; 0x32; 0x7e; 0xb1; 0xb1; 0xe3; 0x6a;
  0x21; 0xfd; 0xb7; 0x11; 0x14; 0xbe; 0x07; 0x43;
  0x4c; 0x0c; 0xc7; 0xbf; 0x63; 0xf6; 0xe1; 0xda;
  0x27; 0x4e; 0xde; 0xbf; 0xe7; 0x6f; 0x65; 0xfb;
  0xd5; 0x1a; 0xd2; 0xf1; 0x48; 0x98; 0xb9; 0x5b
]

let test2_expected512 = List.Tot.map u8 [
  0xcf; 0x83; 0xe1; 0x35; 0x7e; 0xef; 0xb8; 0xbd;
  0xf1; 0x54; 0x28; 0x50; 0xd6; 0x6d; 0x80; 0x07;
  0xd6; 0x20; 0xe4; 0x05; 0x0b; 0x57; 0x15; 0xdc;
  0x83; 0xf4; 0xa9; 0x21; 0xd3; 0x6c; 0xe9; 0xce;
  0x47; 0xd0; 0xd1; 0x3c; 0x5d; 0x85; 0xf2; 0xb0;
  0xff; 0x83; 0x18; 0xd2; 0x87; 0x7e; 0xec; 0x2f;
  0x63; 0xb9; 0x31; 0xbd; 0x47; 0x41; 0x7a; 0x81;
  0xa5; 0x38; 0x32; 0x7a; 0xf9; 0x27; 0xda; 0x3e
]

//
// Test 3
//

let test3_plaintext = List.Tot.map u8 [
  0x61; 0x62; 0x63; 0x64; 0x62; 0x63; 0x64; 0x65;
  0x63; 0x64; 0x65; 0x66; 0x64; 0x65; 0x66; 0x67;
  0x65; 0x66; 0x67; 0x68; 0x66; 0x67; 0x68; 0x69;
  0x67; 0x68; 0x69; 0x6a; 0x68; 0x69; 0x6a; 0x6b;
  0x69; 0x6a; 0x6b; 0x6c; 0x6a; 0x6b; 0x6c; 0x6d;
  0x6b; 0x6c; 0x6d; 0x6e; 0x6c; 0x6d; 0x6e; 0x6f;
  0x6d; 0x6e; 0x6f; 0x70; 0x6e; 0x6f; 0x70; 0x71
]

let test3_expected224 = List.Tot.map u8 [
  0x75; 0x38; 0x8b; 0x16; 0x51; 0x27; 0x76; 0xcc;
  0x5d; 0xba; 0x5d; 0xa1; 0xfd; 0x89; 0x01; 0x50;
  0xb0; 0xc6; 0x45; 0x5c; 0xb4; 0xf5; 0x8b; 0x19;
  0x52; 0x52; 0x25; 0x25
]

let test3_expected256 = List.Tot.map u8 [
  0x24; 0x8d; 0x6a; 0x61; 0xd2; 0x06; 0x38; 0xb8;
  0xe5; 0xc0; 0x26; 0x93; 0x0c; 0x3e; 0x60; 0x39;
  0xa3; 0x3c; 0xe4; 0x59; 0x64; 0xff; 0x21; 0x67;
  0xf6; 0xec; 0xed; 0xd4; 0x19; 0xdb; 0x06; 0xc1
]

let test3_expected384 = List.Tot.map u8 [
  0x33; 0x91; 0xfd; 0xdd; 0xfc; 0x8d; 0xc7; 0x39;
  0x37; 0x07; 0xa6; 0x5b; 0x1b; 0x47; 0x09; 0x39;
  0x7c; 0xf8; 0xb1; 0xd1; 0x62; 0xaf; 0x05; 0xab;
  0xfe; 0x8f; 0x45; 0x0d; 0xe5; 0xf3; 0x6b; 0xc6;
  0xb0; 0x45; 0x5a; 0x85; 0x20; 0xbc; 0x4e; 0x6f;
  0x5f; 0xe9; 0x5b; 0x1f; 0xe3; 0xc8; 0x45; 0x2b
]

let test3_expected512 = List.Tot.map u8 [
  0x20; 0x4a; 0x8f; 0xc6; 0xdd; 0xa8; 0x2f; 0x0a;
  0x0c; 0xed; 0x7b; 0xeb; 0x8e; 0x08; 0xa4; 0x16;
  0x57; 0xc1; 0x6e; 0xf4; 0x68; 0xb2; 0x28; 0xa8;
  0x27; 0x9b; 0xe3; 0x31; 0xa7; 0x03; 0xc3; 0x35;
  0x96; 0xfd; 0x15; 0xc1; 0x3b; 0x1b; 0x07; 0xf9;
  0xaa; 0x1d; 0x3b; 0xea; 0x57; 0x78; 0x9c; 0xa0;
  0x31; 0xad; 0x85; 0xc7; 0xa7; 0x1d; 0xd7; 0x03;
  0x54; 0xec; 0x63; 0x12; 0x38; 0xca; 0x34; 0x45
]

//
// Test 4
//

let test4_plaintext = List.Tot.map u8 [
  0x61; 0x62; 0x63; 0x64; 0x65; 0x66; 0x67; 0x68;
  0x62; 0x63; 0x64; 0x65; 0x66; 0x67; 0x68; 0x69;
  0x63; 0x64; 0x65; 0x66; 0x67; 0x68; 0x69; 0x6a;
  0x64; 0x65; 0x66; 0x67; 0x68; 0x69; 0x6a; 0x6b;
  0x65; 0x66; 0x67; 0x68; 0x69; 0x6a; 0x6b; 0x6c;
  0x66; 0x67; 0x68; 0x69; 0x6a; 0x6b; 0x6c; 0x6d;
  0x67; 0x68; 0x69; 0x6a; 0x6b; 0x6c; 0x6d; 0x6e;
  0x68; 0x69; 0x6a; 0x6b; 0x6c; 0x6d; 0x6e; 0x6f;
  0x69; 0x6a; 0x6b; 0x6c; 0x6d; 0x6e; 0x6f; 0x70;
  0x6a; 0x6b; 0x6c; 0x6d; 0x6e; 0x6f; 0x70; 0x71;
  0x6b; 0x6c; 0x6d; 0x6e; 0x6f; 0x70; 0x71; 0x72;
  0x6c; 0x6d; 0x6e; 0x6f; 0x70; 0x71; 0x72; 0x73;
  0x6d; 0x6e; 0x6f; 0x70; 0x71; 0x72; 0x73; 0x74;
  0x6e; 0x6f; 0x70; 0x71; 0x72; 0x73; 0x74; 0x75
]

let test4_expected224 = List.Tot.map u8 [
  0xc9; 0x7c; 0xa9; 0xa5; 0x59; 0x85; 0x0c; 0xe9;
  0x7a; 0x04; 0xa9; 0x6d; 0xef; 0x6d; 0x99; 0xa9;
  0xe0; 0xe0; 0xe2; 0xab; 0x14; 0xe6; 0xb8; 0xdf;
  0x26; 0x5f; 0xc0; 0xb3
]

let test4_expected256 = List.Tot.map u8 [
  0xcf; 0x5b; 0x16; 0xa7; 0x78; 0xaf; 0x83; 0x80;
  0x03; 0x6c; 0xe5; 0x9e; 0x7b; 0x04; 0x92; 0x37;
  0x0b; 0x24; 0x9b; 0x11; 0xe8; 0xf0; 0x7a; 0x51;
  0xaf; 0xac; 0x45; 0x03; 0x7a; 0xfe; 0xe9; 0xd1
]

let test4_expected384 = List.Tot.map u8 [
  0x09; 0x33; 0x0c; 0x33; 0xf7; 0x11; 0x47; 0xe8;
  0x3d; 0x19; 0x2f; 0xc7; 0x82; 0xcd; 0x1b; 0x47;
  0x53; 0x11; 0x1b; 0x17; 0x3b; 0x3b; 0x05; 0xd2;
  0x2f; 0xa0; 0x80; 0x86; 0xe3; 0xb0; 0xf7; 0x12;
  0xfc; 0xc7; 0xc7; 0x1a; 0x55; 0x7e; 0x2d; 0xb9;
  0x66; 0xc3; 0xe9; 0xfa; 0x91; 0x74; 0x60; 0x39
]

let test4_expected512 = List.Tot.map u8 [
  0x8e; 0x95; 0x9b; 0x75; 0xda; 0xe3; 0x13; 0xda;
  0x8c; 0xf4; 0xf7; 0x28; 0x14; 0xfc; 0x14; 0x3f;
  0x8f; 0x77; 0x79; 0xc6; 0xeb; 0x9f; 0x7f; 0xa1;
  0x72; 0x99; 0xae; 0xad; 0xb6; 0x88; 0x90; 0x18;
  0x50; 0x1d; 0x28; 0x9e; 0x49; 0x00; 0xf7; 0xe4;
  0x33; 0x1b; 0x99; 0xde; 0xc4; 0xb5; 0x43; 0x3a;
  0xc7; 0xd3; 0x29; 0xee; 0xb6; 0xdd; 0x26; 0x54;
  0x5e; 0x96; 0xe5; 0x5b; 0x87; 0x4b; 0xe9; 0x09
]

//
// Test 5
//

let test5_expected224 = List.Tot.map u8 [

]

// let test5_expected256 = List.Tot.map u8 [
//   0xcd; 0xc7; 0x6e; 0x5c; 0x99; 0x14; 0xfb; 0x92;
//   0x81; 0xa1; 0xc7; 0xe2; 0x84; 0xd7; 0x3e; 0x67;
//   0xf1; 0x80; 0x9a; 0x48; 0xa4; 0x97; 0x20; 0x0e;
//   0x04; 0x6d; 0x39; 0xcc; 0xc7; 0x11; 0x2c; 0xd0
// ]
//
// let test5_expected384 = List.Tot.map u8 [
//   0x9d; 0x0e; 0x18; 0x09; 0x71; 0x64; 0x74; 0xcb;
//   0x08; 0x6e; 0x83; 0x4e; 0x31; 0x0a; 0x4a; 0x1c;
//   0xed; 0x14; 0x9e; 0x9c; 0x00; 0xf2; 0x48; 0x52;
//   0x79; 0x72; 0xce; 0xc5; 0x70; 0x4c; 0x2a; 0x5b;
//   0x07; 0xb8; 0xb3; 0xdc; 0x38; 0xec; 0xc4; 0xeb;
//   0xae; 0x97; 0xdd; 0xd8; 0x7f; 0x3d; 0x89; 0x85
// ]
//
// let test5_expected512 = List.Tot.map u8 [
//   0xe7; 0x18; 0x48; 0x3d; 0x0c; 0xe7; 0x69; 0x64;
//   0x4e; 0x2e; 0x42; 0xc7; 0xbc; 0x15; 0xb4; 0x63;
//   0x8e; 0x1f; 0x98; 0xb1; 0x3b; 0x20; 0x44; 0x28;
//   0x56; 0x32; 0xa8; 0x03; 0xaf; 0xa9; 0x73; 0xeb;
//   0xde; 0x0f; 0xf2; 0x44; 0x87; 0x7e; 0xa6; 0x0a;
//   0x4c; 0xb0; 0x43; 0x2c; 0xe5; 0x77; 0xc3; 0x1b;
//   0xeb; 0x00; 0x9c; 0x5c; 0x2c; 0x49; 0xaa; 0x2e;
//   0x4e; 0xad; 0xb2; 0x17; 0xad; 0x8c; 0xc0; 0x9b
// ]



//
// Main
//

let test () =
  assert_norm(List.Tot.length test1_plaintext = 3);
  assert_norm(List.Tot.length test1_expected512 = 64);
  // (Hash.hash Hash.params_sha2_224 (createL test1_plaintext) = createL test1_expected224) &&
  // (Hash.hash Hash.params_sha2_224 (createL test2_plaintext) = createL test2_expected224) &&
  // (Hash.hash Hash.params_sha2_224 (createL test3_plaintext) = createL test3_expected224) &&
  // (Hash.hash Hash.params_sha2_224 (createL test4_plaintext) = createL test4_expected224) &&

  // (Hash.hash' Hash.params_sha2_256 (createL test1_plaintext) = createL test1_expected256) //&&
  // (Hash.hash Hash.params_sha2_256 (createL test2_plaintext) = createL test2_expected256) &&
  // (Hash.hash Hash.params_sha2_256 (createL test3_plaintext) = createL test3_expected256) &&
  // (Hash.hash Hash.params_sha2_256 (createL test4_plaintext) = createL test4_expected256)

  // (Hash.hash Hash.params_sha2_384 (createL test1_plaintext) = createL test1_expected384) &&
  // (Hash.hash Hash.params_sha2_384 (createL test2_plaintext) = createL test2_expected384) &&
  // (Hash.hash Hash.params_sha2_384 (createL test3_plaintext) = createL test3_expected384) &&
  // (Hash.hash Hash.params_sha2_384 (createL test4_plaintext) = createL test4_expected384) &&

  (Hash.hash Hash.parameters_sha2_512 (List.Tot.length test1_plaintext) (createL test1_plaintext) == createL test1_expected512) //&&
  // (Hash.hash Hash.params_sha2_512 (createL test2_plaintext) = createL test2_expected512) &&
  // (Hash.hash Hash.params_sha2_512 (createL test3_plaintext) = createL test3_expected512) &&
  // (Hash.hash Hash.params_sha2_512 (createL test4_plaintext) = createL test4_expected512)
