module Spec.AESGCM.Test

#reset-options "--z3rlimit 100 --initial_fuel 0 --max_fuel 0 --initial_ifuel 0"

open FStar.Mul
open Spec.Lib.IntTypes
open Spec.Lib.RawIntTypes
open Spec.Lib.IntSeq
open Spec.Lib.Stateful

module AEAD = Spec.AESGCM

let key_length = 16

let test1_key = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test1_nonce = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test1_msg = List.Tot.map u8 [

]

let test1_aad = List.Tot.map u8 [

]

let test1_expected = List.Tot.map u8 [
0x58; 0xe2; 0xfc; 0xce; 0xfa; 0x7e; 0x30; 0x61; 0x36; 0x7f; 0x1d; 0x57; 0xa4; 0xe7; 0x45; 0x5a
]

let test1_ciphertext = List.Tot.map u8 [

]

let test1_hash_key = List.Tot.map u8 [
0x66; 0xe9; 0x4b; 0xd4; 0xef; 0x8a; 0x2c; 0x3b; 0x88; 0x4c; 0xfa; 0x59; 0xca; 0x34; 0x2b; 0x2e
]

let test1_ghash = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test1_nonce_length: size_nat = 12
let test1_msg_length: size_nat = 0
let test1_aad_length: size_nat = 0
let test1_c_length: size_nat = 0

let test2_key = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test2_nonce = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test2_msg = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test2_aad = List.Tot.map u8 [

]

let test2_expected = List.Tot.map u8 [
0x03; 0x88; 0xda; 0xce; 0x60; 0xb6; 0xa3; 0x92; 0xf3; 0x28; 0xc2; 0xb9; 0x71; 0xb2; 0xfe; 0x78; 0xab; 0x6e; 0x47; 0xd4; 0x2c; 0xec; 0x13; 0xbd; 0xf5; 0x3a; 0x67; 0xb2; 0x12; 0x57; 0xbd; 0xdf
]

let test2_ciphertext = List.Tot.map u8 [
0x03; 0x88; 0xda; 0xce; 0x60; 0xb6; 0xa3; 0x92; 0xf3; 0x28; 0xc2; 0xb9; 0x71; 0xb2; 0xfe; 0x78
]

let test2_hash_key = List.Tot.map u8 [
0x66; 0xe9; 0x4b; 0xd4; 0xef; 0x8a; 0x2c; 0x3b; 0x88; 0x4c; 0xfa; 0x59; 0xca; 0x34; 0x2b; 0x2e
]

let test2_ghash = List.Tot.map u8 [
0xf3; 0x8c; 0xbb; 0x1a; 0xd6; 0x92; 0x23; 0xdc; 0xc3; 0x45; 0x7a; 0xe5; 0xb6; 0xb0; 0xf8; 0x85
]

let test2_nonce_length: size_nat = 12
let test2_msg_length: size_nat = 16
let test2_aad_length: size_nat = 0
let test2_c_length: size_nat = 16

let test3_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08
]

let test3_nonce = List.Tot.map u8 [
0xca; 0xfe; 0xba; 0xbe; 0xfa; 0xce; 0xdb; 0xad; 0xde; 0xca; 0xf8; 0x88
]

let test3_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39; 0x1a; 0xaf; 0xd2; 0x55
]

let test3_aad = List.Tot.map u8 [

]

let test3_expected = List.Tot.map u8 [
0x42; 0x83; 0x1e; 0xc2; 0x21; 0x77; 0x74; 0x24; 0x4b; 0x72; 0x21; 0xb7; 0x84; 0xd0; 0xd4; 0x9c; 0xe3; 0xaa; 0x21; 0x2f; 0x2c; 0x02; 0xa4; 0xe0; 0x35; 0xc1; 0x7e; 0x23; 0x29; 0xac; 0xa1; 0x2e; 0x21; 0xd5; 0x14; 0xb2; 0x54; 0x66; 0x93; 0x1c; 0x7d; 0x8f; 0x6a; 0x5a; 0xac; 0x84; 0xaa; 0x05; 0x1b; 0xa3; 0x0b; 0x39; 0x6a; 0x0a; 0xac; 0x97; 0x3d; 0x58; 0xe0; 0x91; 0x47; 0x3f; 0x59; 0x85; 0x4d; 0x5c; 0x2a; 0xf3; 0x27; 0xcd; 0x64; 0xa6; 0x2c; 0xf3; 0x5a; 0xbd; 0x2b; 0xa6; 0xfa; 0xb4
]

let test3_ciphertext = List.Tot.map u8 [
0x42; 0x83; 0x1e; 0xc2; 0x21; 0x77; 0x74; 0x24; 0x4b; 0x72; 0x21; 0xb7; 0x84; 0xd0; 0xd4; 0x9c; 0xe3; 0xaa; 0x21; 0x2f; 0x2c; 0x02; 0xa4; 0xe0; 0x35; 0xc1; 0x7e; 0x23; 0x29; 0xac; 0xa1; 0x2e; 0x21; 0xd5; 0x14; 0xb2; 0x54; 0x66; 0x93; 0x1c; 0x7d; 0x8f; 0x6a; 0x5a; 0xac; 0x84; 0xaa; 0x05; 0x1b; 0xa3; 0x0b; 0x39; 0x6a; 0x0a; 0xac; 0x97; 0x3d; 0x58; 0xe0; 0x91; 0x47; 0x3f; 0x59; 0x85
]

let test3_hash_key = List.Tot.map u8 [
0xb8; 0x3b; 0x53; 0x37; 0x08; 0xbf; 0x53; 0x5d; 0x0a; 0xa6; 0xe5; 0x29; 0x80; 0xd5; 0x3b; 0x78
]

let test3_ghash = List.Tot.map u8 [
0x7f; 0x1b; 0x32; 0xb8; 0x1b; 0x82; 0x0d; 0x02; 0x61; 0x4f; 0x88; 0x95; 0xac; 0x1d; 0x4e; 0xac
]

let test3_nonce_length: size_nat = 12
let test3_msg_length: size_nat = 64
let test3_aad_length: size_nat = 0
let test3_c_length: size_nat = 64

let test4_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08
]

let test4_nonce = List.Tot.map u8 [
0xca; 0xfe; 0xba; 0xbe; 0xfa; 0xce; 0xdb; 0xad; 0xde; 0xca; 0xf8; 0x88
]

let test4_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39
]

let test4_aad = List.Tot.map u8 [
0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xab; 0xad; 0xda; 0xd2
]

let test4_expected = List.Tot.map u8 [
0x42; 0x83; 0x1e; 0xc2; 0x21; 0x77; 0x74; 0x24; 0x4b; 0x72; 0x21; 0xb7; 0x84; 0xd0; 0xd4; 0x9c; 0xe3; 0xaa; 0x21; 0x2f; 0x2c; 0x02; 0xa4; 0xe0; 0x35; 0xc1; 0x7e; 0x23; 0x29; 0xac; 0xa1; 0x2e; 0x21; 0xd5; 0x14; 0xb2; 0x54; 0x66; 0x93; 0x1c; 0x7d; 0x8f; 0x6a; 0x5a; 0xac; 0x84; 0xaa; 0x05; 0x1b; 0xa3; 0x0b; 0x39; 0x6a; 0x0a; 0xac; 0x97; 0x3d; 0x58; 0xe0; 0x91; 0x5b; 0xc9; 0x4f; 0xbc; 0x32; 0x21; 0xa5; 0xdb; 0x94; 0xfa; 0xe9; 0x5a; 0xe7; 0x12; 0x1a; 0x47
]

let test4_ciphertext = List.Tot.map u8 [
0x42; 0x83; 0x1e; 0xc2; 0x21; 0x77; 0x74; 0x24; 0x4b; 0x72; 0x21; 0xb7; 0x84; 0xd0; 0xd4; 0x9c; 0xe3; 0xaa; 0x21; 0x2f; 0x2c; 0x02; 0xa4; 0xe0; 0x35; 0xc1; 0x7e; 0x23; 0x29; 0xac; 0xa1; 0x2e; 0x21; 0xd5; 0x14; 0xb2; 0x54; 0x66; 0x93; 0x1c; 0x7d; 0x8f; 0x6a; 0x5a; 0xac; 0x84; 0xaa; 0x05; 0x1b; 0xa3; 0x0b; 0x39; 0x6a; 0x0a; 0xac; 0x97; 0x3d; 0x58; 0xe0; 0x91
]

let test4_hash_key = List.Tot.map u8 [
0xb8; 0x3b; 0x53; 0x37; 0x08; 0xbf; 0x53; 0x5d; 0x0a; 0xa6; 0xe5; 0x29; 0x80; 0xd5; 0x3b; 0x78
]

let test4_ghash = List.Tot.map u8 [
0x69; 0x8e; 0x57; 0xf7; 0x0e; 0x6e; 0xcc; 0x7f; 0xd9; 0x46; 0x3b; 0x72; 0x60; 0xa9; 0xae; 0x5f
]

let test4_nonce_length: size_nat = 12
let test4_msg_length: size_nat = 60
let test4_aad_length: size_nat = 20
let test4_c_length: size_nat = 60

let test5_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08
]

let test5_nonce = List.Tot.map u8 [
0xca; 0xfe; 0xba; 0xbe; 0xfa; 0xce; 0xdb; 0xad
]

let test5_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39
]

let test5_aad = List.Tot.map u8 [
0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xab; 0xad; 0xda; 0xd2
]

let test5_expected = List.Tot.map u8 [
0x61; 0x35; 0x3b; 0x4c; 0x28; 0x06; 0x93; 0x4a; 0x77; 0x7f; 0xf5; 0x1f; 0xa2; 0x2a; 0x47; 0x55; 0x69; 0x9b; 0x2a; 0x71; 0x4f; 0xcd; 0xc6; 0xf8; 0x37; 0x66; 0xe5; 0xf9; 0x7b; 0x6c; 0x74; 0x23; 0x73; 0x80; 0x69; 0x00; 0xe4; 0x9f; 0x24; 0xb2; 0x2b; 0x09; 0x75; 0x44; 0xd4; 0x89; 0x6b; 0x42; 0x49; 0x89; 0xb5; 0xe1; 0xeb; 0xac; 0x0f; 0x07; 0xc2; 0x3f; 0x45; 0x98; 0x36; 0x12; 0xd2; 0xe7; 0x9e; 0x3b; 0x07; 0x85; 0x56; 0x1b; 0xe1; 0x4a; 0xac; 0xa2; 0xfc; 0xcb
]

let test5_ciphertext = List.Tot.map u8 [
0x61; 0x35; 0x3b; 0x4c; 0x28; 0x06; 0x93; 0x4a; 0x77; 0x7f; 0xf5; 0x1f; 0xa2; 0x2a; 0x47; 0x55; 0x69; 0x9b; 0x2a; 0x71; 0x4f; 0xcd; 0xc6; 0xf8; 0x37; 0x66; 0xe5; 0xf9; 0x7b; 0x6c; 0x74; 0x23; 0x73; 0x80; 0x69; 0x00; 0xe4; 0x9f; 0x24; 0xb2; 0x2b; 0x09; 0x75; 0x44; 0xd4; 0x89; 0x6b; 0x42; 0x49; 0x89; 0xb5; 0xe1; 0xeb; 0xac; 0x0f; 0x07; 0xc2; 0x3f; 0x45; 0x98
]

let test5_hash_key = List.Tot.map u8 [
0xb8; 0x3b; 0x53; 0x37; 0x08; 0xbf; 0x53; 0x5d; 0x0a; 0xa6; 0xe5; 0x29; 0x80; 0xd5; 0x3b; 0x78
]

let test5_ghash = List.Tot.map u8 [
0xdf; 0x58; 0x6b; 0xb4; 0xc2; 0x49; 0xb9; 0x2c; 0xb6; 0x92; 0x28; 0x77; 0xe4; 0x44; 0xd3; 0x7b
]

let test5_nonce_length: size_nat = 8
let test5_msg_length: size_nat = 60
let test5_aad_length: size_nat = 20
let test5_c_length: size_nat = 60

let test6_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08
]

let test6_nonce = List.Tot.map u8 [
0x93; 0x13; 0x22; 0x5d; 0xf8; 0x84; 0x06; 0xe5; 0x55; 0x90; 0x9c; 0x5a; 0xff; 0x52; 0x69; 0xaa; 0x6a; 0x7a; 0x95; 0x38; 0x53; 0x4f; 0x7d; 0xa1; 0xe4; 0xc3; 0x03; 0xd2; 0xa3; 0x18; 0xa7; 0x28; 0xc3; 0xc0; 0xc9; 0x51; 0x56; 0x80; 0x95; 0x39; 0xfc; 0xf0; 0xe2; 0x42; 0x9a; 0x6b; 0x52; 0x54; 0x16; 0xae; 0xdb; 0xf5; 0xa0; 0xde; 0x6a; 0x57; 0xa6; 0x37; 0xb3; 0x9b
]

let test6_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39
]

let test6_aad = List.Tot.map u8 [
0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xab; 0xad; 0xda; 0xd2
]

let test6_expected = List.Tot.map u8 [
0x8c; 0xe2; 0x49; 0x98; 0x62; 0x56; 0x15; 0xb6; 0x03; 0xa0; 0x33; 0xac; 0xa1; 0x3f; 0xb8; 0x94; 0xbe; 0x91; 0x12; 0xa5; 0xc3; 0xa2; 0x11; 0xa8; 0xba; 0x26; 0x2a; 0x3c; 0xca; 0x7e; 0x2c; 0xa7; 0x01; 0xe4; 0xa9; 0xa4; 0xfb; 0xa4; 0x3c; 0x90; 0xcc; 0xdc; 0xb2; 0x81; 0xd4; 0x8c; 0x7c; 0x6f; 0xd6; 0x28; 0x75; 0xd2; 0xac; 0xa4; 0x17; 0x03; 0x4c; 0x34; 0xae; 0xe5; 0x61; 0x9c; 0xc5; 0xae; 0xff; 0xfe; 0x0b; 0xfa; 0x46; 0x2a; 0xf4; 0x3c; 0x16; 0x99; 0xd0; 0x50
]

let test6_ciphertext = List.Tot.map u8 [
0x8c; 0xe2; 0x49; 0x98; 0x62; 0x56; 0x15; 0xb6; 0x03; 0xa0; 0x33; 0xac; 0xa1; 0x3f; 0xb8; 0x94; 0xbe; 0x91; 0x12; 0xa5; 0xc3; 0xa2; 0x11; 0xa8; 0xba; 0x26; 0x2a; 0x3c; 0xca; 0x7e; 0x2c; 0xa7; 0x01; 0xe4; 0xa9; 0xa4; 0xfb; 0xa4; 0x3c; 0x90; 0xcc; 0xdc; 0xb2; 0x81; 0xd4; 0x8c; 0x7c; 0x6f; 0xd6; 0x28; 0x75; 0xd2; 0xac; 0xa4; 0x17; 0x03; 0x4c; 0x34; 0xae; 0xe5
]

let test6_hash_key = List.Tot.map u8 [
0xb8; 0x3b; 0x53; 0x37; 0x08; 0xbf; 0x53; 0x5d; 0x0a; 0xa6; 0xe5; 0x29; 0x80; 0xd5; 0x3b; 0x78
]

let test6_ghash = List.Tot.map u8 [
0x1c; 0x5a; 0xfe; 0x97; 0x60; 0xd3; 0x93; 0x2f; 0x3c; 0x9a; 0x87; 0x8a; 0xac; 0x3d; 0xc3; 0xde
]

let test6_nonce_length: size_nat = 60
let test6_msg_length: size_nat = 60
let test6_aad_length: size_nat = 20
let test6_c_length: size_nat = 60

let test7_key = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test7_nonce = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test7_msg = List.Tot.map u8 [

]

let test7_aad = List.Tot.map u8 [

]

let test7_expected = List.Tot.map u8 [
0xcd; 0x33; 0xb2; 0x8a; 0xc7; 0x73; 0xf7; 0x4b; 0xa0; 0x0e; 0xd1; 0xf3; 0x12; 0x57; 0x24; 0x35
]

let test7_ciphertext = List.Tot.map u8 [

]

let test7_hash_key = List.Tot.map u8 [
0xaa; 0xe0; 0x69; 0x92; 0xac; 0xbf; 0x52; 0xa3; 0xe8; 0xf4; 0xa9; 0x6e; 0xc9; 0x30; 0x0b; 0xd7
]

let test7_ghash = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test7_nonce_length: size_nat = 12
let test7_msg_length: size_nat = 0
let test7_aad_length: size_nat = 0
let test7_c_length: size_nat = 0

let test8_key = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test8_nonce = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test8_msg = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test8_aad = List.Tot.map u8 [

]

let test8_expected = List.Tot.map u8 [
0x98; 0xe7; 0x24; 0x7c; 0x07; 0xf0; 0xfe; 0x41; 0x1c; 0x26; 0x7e; 0x43; 0x84; 0xb0; 0xf6; 0x00; 0x2f; 0xf5; 0x8d; 0x80; 0x03; 0x39; 0x27; 0xab; 0x8e; 0xf4; 0xd4; 0x58; 0x75; 0x14; 0xf0; 0xfb
]

let test8_ciphertext = List.Tot.map u8 [
0x98; 0xe7; 0x24; 0x7c; 0x07; 0xf0; 0xfe; 0x41; 0x1c; 0x26; 0x7e; 0x43; 0x84; 0xb0; 0xf6; 0x00
]

let test8_hash_key = List.Tot.map u8 [
0xaa; 0xe0; 0x69; 0x92; 0xac; 0xbf; 0x52; 0xa3; 0xe8; 0xf4; 0xa9; 0x6e; 0xc9; 0x30; 0x0b; 0xd7
]

let test8_ghash = List.Tot.map u8 [
0xe2; 0xc6; 0x3f; 0x0a; 0xc4; 0x4a; 0xd0; 0xe0; 0x2e; 0xfa; 0x05; 0xab; 0x67; 0x43; 0xd4; 0xce
]

let test8_nonce_length: size_nat = 12
let test8_msg_length: size_nat = 16
let test8_aad_length: size_nat = 0
let test8_c_length: size_nat = 16

let test9_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08; 0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c
]

let test9_nonce = List.Tot.map u8 [
0xca; 0xfe; 0xba; 0xbe; 0xfa; 0xce; 0xdb; 0xad; 0xde; 0xca; 0xf8; 0x88
]

let test9_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39; 0x1a; 0xaf; 0xd2; 0x55
]

let test9_aad = List.Tot.map u8 [

]

let test9_expected = List.Tot.map u8 [
0x39; 0x80; 0xca; 0x0b; 0x3c; 0x00; 0xe8; 0x41; 0xeb; 0x06; 0xfa; 0xc4; 0x87; 0x2a; 0x27; 0x57; 0x85; 0x9e; 0x1c; 0xea; 0xa6; 0xef; 0xd9; 0x84; 0x62; 0x85; 0x93; 0xb4; 0x0c; 0xa1; 0xe1; 0x9c; 0x7d; 0x77; 0x3d; 0x00; 0xc1; 0x44; 0xc5; 0x25; 0xac; 0x61; 0x9d; 0x18; 0xc8; 0x4a; 0x3f; 0x47; 0x18; 0xe2; 0x44; 0x8b; 0x2f; 0xe3; 0x24; 0xd9; 0xcc; 0xda; 0x27; 0x10; 0xac; 0xad; 0xe2; 0x56; 0x99; 0x24; 0xa7; 0xc8; 0x58; 0x73; 0x36; 0xbf; 0xb1; 0x18; 0x02; 0x4d; 0xb8; 0x67; 0x4a; 0x14
]

let test9_ciphertext = List.Tot.map u8 [
0x39; 0x80; 0xca; 0x0b; 0x3c; 0x00; 0xe8; 0x41; 0xeb; 0x06; 0xfa; 0xc4; 0x87; 0x2a; 0x27; 0x57; 0x85; 0x9e; 0x1c; 0xea; 0xa6; 0xef; 0xd9; 0x84; 0x62; 0x85; 0x93; 0xb4; 0x0c; 0xa1; 0xe1; 0x9c; 0x7d; 0x77; 0x3d; 0x00; 0xc1; 0x44; 0xc5; 0x25; 0xac; 0x61; 0x9d; 0x18; 0xc8; 0x4a; 0x3f; 0x47; 0x18; 0xe2; 0x44; 0x8b; 0x2f; 0xe3; 0x24; 0xd9; 0xcc; 0xda; 0x27; 0x10; 0xac; 0xad; 0xe2; 0x56
]

let test9_hash_key = List.Tot.map u8 [
0x46; 0x69; 0x23; 0xec; 0x9a; 0xe6; 0x82; 0x21; 0x4f; 0x2c; 0x08; 0x2b; 0xad; 0xb3; 0x92; 0x49
]

let test9_ghash = List.Tot.map u8 [
0x51; 0x11; 0x0d; 0x40; 0xf6; 0xc8; 0xff; 0xf0; 0xeb; 0x1a; 0xe3; 0x34; 0x45; 0xa8; 0x89; 0xf0
]

let test9_nonce_length: size_nat = 12
let test9_msg_length: size_nat = 64
let test9_aad_length: size_nat = 0
let test9_c_length: size_nat = 64

let test10_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08; 0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c
]

let test10_nonce = List.Tot.map u8 [
0xca; 0xfe; 0xba; 0xbe; 0xfa; 0xce; 0xdb; 0xad; 0xde; 0xca; 0xf8; 0x88
]

let test10_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39
]

let test10_aad = List.Tot.map u8 [
0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xab; 0xad; 0xda; 0xd2
]

let test10_expected = List.Tot.map u8 [
0x39; 0x80; 0xca; 0x0b; 0x3c; 0x00; 0xe8; 0x41; 0xeb; 0x06; 0xfa; 0xc4; 0x87; 0x2a; 0x27; 0x57; 0x85; 0x9e; 0x1c; 0xea; 0xa6; 0xef; 0xd9; 0x84; 0x62; 0x85; 0x93; 0xb4; 0x0c; 0xa1; 0xe1; 0x9c; 0x7d; 0x77; 0x3d; 0x00; 0xc1; 0x44; 0xc5; 0x25; 0xac; 0x61; 0x9d; 0x18; 0xc8; 0x4a; 0x3f; 0x47; 0x18; 0xe2; 0x44; 0x8b; 0x2f; 0xe3; 0x24; 0xd9; 0xcc; 0xda; 0x27; 0x10; 0x25; 0x19; 0x49; 0x8e; 0x80; 0xf1; 0x47; 0x8f; 0x37; 0xba; 0x55; 0xbd; 0x6d; 0x27; 0x61; 0x8c
]

let test10_ciphertext = List.Tot.map u8 [
0x39; 0x80; 0xca; 0x0b; 0x3c; 0x00; 0xe8; 0x41; 0xeb; 0x06; 0xfa; 0xc4; 0x87; 0x2a; 0x27; 0x57; 0x85; 0x9e; 0x1c; 0xea; 0xa6; 0xef; 0xd9; 0x84; 0x62; 0x85; 0x93; 0xb4; 0x0c; 0xa1; 0xe1; 0x9c; 0x7d; 0x77; 0x3d; 0x00; 0xc1; 0x44; 0xc5; 0x25; 0xac; 0x61; 0x9d; 0x18; 0xc8; 0x4a; 0x3f; 0x47; 0x18; 0xe2; 0x44; 0x8b; 0x2f; 0xe3; 0x24; 0xd9; 0xcc; 0xda; 0x27; 0x10
]

let test10_hash_key = List.Tot.map u8 [
0x46; 0x69; 0x23; 0xec; 0x9a; 0xe6; 0x82; 0x21; 0x4f; 0x2c; 0x08; 0x2b; 0xad; 0xb3; 0x92; 0x49
]

let test10_ghash = List.Tot.map u8 [
0xed; 0x2c; 0xe3; 0x06; 0x2e; 0x4a; 0x8e; 0xc0; 0x6d; 0xb8; 0xb4; 0xc4; 0x90; 0xe8; 0xa2; 0x68
]

let test10_nonce_length: size_nat = 12
let test10_msg_length: size_nat = 60
let test10_aad_length: size_nat = 20
let test10_c_length: size_nat = 60

let test11_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08; 0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c
]

let test11_nonce = List.Tot.map u8 [
0xca; 0xfe; 0xba; 0xbe; 0xfa; 0xce; 0xdb; 0xad
]

let test11_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39
]

let test11_aad = List.Tot.map u8 [
0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xab; 0xad; 0xda; 0xd2
]

let test11_expected = List.Tot.map u8 [
0x0f; 0x10; 0xf5; 0x99; 0xae; 0x14; 0xa1; 0x54; 0xed; 0x24; 0xb3; 0x6e; 0x25; 0x32; 0x4d; 0xb8; 0xc5; 0x66; 0x63; 0x2e; 0xf2; 0xbb; 0xb3; 0x4f; 0x83; 0x47; 0x28; 0x0f; 0xc4; 0x50; 0x70; 0x57; 0xfd; 0xdc; 0x29; 0xdf; 0x9a; 0x47; 0x1f; 0x75; 0xc6; 0x65; 0x41; 0xd4; 0xd4; 0xda; 0xd1; 0xc9; 0xe9; 0x3a; 0x19; 0xa5; 0x8e; 0x8b; 0x47; 0x3f; 0xa0; 0xf0; 0x62; 0xf7; 0x65; 0xdc; 0xc5; 0x7f; 0xcf; 0x62; 0x3a; 0x24; 0x09; 0x4f; 0xcc; 0xa4; 0x0d; 0x35; 0x33; 0xf8
]

let test11_ciphertext = List.Tot.map u8 [
0x0f; 0x10; 0xf5; 0x99; 0xae; 0x14; 0xa1; 0x54; 0xed; 0x24; 0xb3; 0x6e; 0x25; 0x32; 0x4d; 0xb8; 0xc5; 0x66; 0x63; 0x2e; 0xf2; 0xbb; 0xb3; 0x4f; 0x83; 0x47; 0x28; 0x0f; 0xc4; 0x50; 0x70; 0x57; 0xfd; 0xdc; 0x29; 0xdf; 0x9a; 0x47; 0x1f; 0x75; 0xc6; 0x65; 0x41; 0xd4; 0xd4; 0xda; 0xd1; 0xc9; 0xe9; 0x3a; 0x19; 0xa5; 0x8e; 0x8b; 0x47; 0x3f; 0xa0; 0xf0; 0x62; 0xf7
]

let test11_hash_key = List.Tot.map u8 [
0x46; 0x69; 0x23; 0xec; 0x9a; 0xe6; 0x82; 0x21; 0x4f; 0x2c; 0x08; 0x2b; 0xad; 0xb3; 0x92; 0x49
]

let test11_ghash = List.Tot.map u8 [
0x1e; 0x6a; 0x13; 0x38; 0x06; 0x60; 0x78; 0x58; 0xee; 0x80; 0xea; 0xf2; 0x37; 0x06; 0x40; 0x89
]

let test11_nonce_length: size_nat = 8
let test11_msg_length: size_nat = 60
let test11_aad_length: size_nat = 20
let test11_c_length: size_nat = 60

let test12_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08; 0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c
]

let test12_nonce = List.Tot.map u8 [
0x93; 0x13; 0x22; 0x5d; 0xf8; 0x84; 0x06; 0xe5; 0x55; 0x90; 0x9c; 0x5a; 0xff; 0x52; 0x69; 0xaa; 0x6a; 0x7a; 0x95; 0x38; 0x53; 0x4f; 0x7d; 0xa1; 0xe4; 0xc3; 0x03; 0xd2; 0xa3; 0x18; 0xa7; 0x28; 0xc3; 0xc0; 0xc9; 0x51; 0x56; 0x80; 0x95; 0x39; 0xfc; 0xf0; 0xe2; 0x42; 0x9a; 0x6b; 0x52; 0x54; 0x16; 0xae; 0xdb; 0xf5; 0xa0; 0xde; 0x6a; 0x57; 0xa6; 0x37; 0xb3; 0x9b
]

let test12_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39
]

let test12_aad = List.Tot.map u8 [
0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xab; 0xad; 0xda; 0xd2
]

let test12_expected = List.Tot.map u8 [
0xd2; 0x7e; 0x88; 0x68; 0x1c; 0xe3; 0x24; 0x3c; 0x48; 0x30; 0x16; 0x5a; 0x8f; 0xdc; 0xf9; 0xff; 0x1d; 0xe9; 0xa1; 0xd8; 0xe6; 0xb4; 0x47; 0xef; 0x6e; 0xf7; 0xb7; 0x98; 0x28; 0x66; 0x6e; 0x45; 0x81; 0xe7; 0x90; 0x12; 0xaf; 0x34; 0xdd; 0xd9; 0xe2; 0xf0; 0x37; 0x58; 0x9b; 0x29; 0x2d; 0xb3; 0xe6; 0x7c; 0x03; 0x67; 0x45; 0xfa; 0x22; 0xe7; 0xe9; 0xb7; 0x37; 0x3b; 0xdc; 0xf5; 0x66; 0xff; 0x29; 0x1c; 0x25; 0xbb; 0xb8; 0x56; 0x8f; 0xc3; 0xd3; 0x76; 0xa6; 0xd9
]

let test12_ciphertext = List.Tot.map u8 [
0xd2; 0x7e; 0x88; 0x68; 0x1c; 0xe3; 0x24; 0x3c; 0x48; 0x30; 0x16; 0x5a; 0x8f; 0xdc; 0xf9; 0xff; 0x1d; 0xe9; 0xa1; 0xd8; 0xe6; 0xb4; 0x47; 0xef; 0x6e; 0xf7; 0xb7; 0x98; 0x28; 0x66; 0x6e; 0x45; 0x81; 0xe7; 0x90; 0x12; 0xaf; 0x34; 0xdd; 0xd9; 0xe2; 0xf0; 0x37; 0x58; 0x9b; 0x29; 0x2d; 0xb3; 0xe6; 0x7c; 0x03; 0x67; 0x45; 0xfa; 0x22; 0xe7; 0xe9; 0xb7; 0x37; 0x3b
]

let test12_hash_key = List.Tot.map u8 [
0x46; 0x69; 0x23; 0xec; 0x9a; 0xe6; 0x82; 0x21; 0x4f; 0x2c; 0x08; 0x2b; 0xad; 0xb3; 0x92; 0x49
]

let test12_ghash = List.Tot.map u8 [
0x82; 0x56; 0x7f; 0xb0; 0xb4; 0xcc; 0x37; 0x18; 0x01; 0xea; 0xde; 0xc0; 0x05; 0x96; 0x8e; 0x94
]

let test12_nonce_length: size_nat = 60
let test12_msg_length: size_nat = 60
let test12_aad_length: size_nat = 20
let test12_c_length: size_nat = 60

let test13_key = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test13_nonce = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test13_msg = List.Tot.map u8 [

]

let test13_aad = List.Tot.map u8 [

]

let test13_expected = List.Tot.map u8 [
0x53; 0x0f; 0x8a; 0xfb; 0xc7; 0x45; 0x36; 0xb9; 0xa9; 0x63; 0xb4; 0xf1; 0xc4; 0xcb; 0x73; 0x8b
]

let test13_ciphertext = List.Tot.map u8 [

]

let test13_hash_key = List.Tot.map u8 [
0xdc; 0x95; 0xc0; 0x78; 0xa2; 0x40; 0x89; 0x89; 0xad; 0x48; 0xa2; 0x14; 0x92; 0x84; 0x20; 0x87
]

let test13_ghash = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test13_nonce_length: size_nat = 12
let test13_msg_length: size_nat = 0
let test13_aad_length: size_nat = 0
let test13_c_length: size_nat = 0

let test14_key = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test14_nonce = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test14_msg = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test14_aad = List.Tot.map u8 [

]

let test14_expected = List.Tot.map u8 [
0xce; 0xa7; 0x40; 0x3d; 0x4d; 0x60; 0x6b; 0x6e; 0x07; 0x4e; 0xc5; 0xd3; 0xba; 0xf3; 0x9d; 0x18; 0xd0; 0xd1; 0xc8; 0xa7; 0x99; 0x99; 0x6b; 0xf0; 0x26; 0x5b; 0x98; 0xb5; 0xd4; 0x8a; 0xb9; 0x19
]

let test14_ciphertext = List.Tot.map u8 [
0xce; 0xa7; 0x40; 0x3d; 0x4d; 0x60; 0x6b; 0x6e; 0x07; 0x4e; 0xc5; 0xd3; 0xba; 0xf3; 0x9d; 0x18
]

let test14_hash_key = List.Tot.map u8 [
0xdc; 0x95; 0xc0; 0x78; 0xa2; 0x40; 0x89; 0x89; 0xad; 0x48; 0xa2; 0x14; 0x92; 0x84; 0x20; 0x87
]

let test14_ghash = List.Tot.map u8 [
0x83; 0xde; 0x42; 0x5c; 0x5e; 0xdc; 0x5d; 0x49; 0x8f; 0x38; 0x2c; 0x44; 0x10; 0x41; 0xca; 0x92
]

let test14_nonce_length: size_nat = 12
let test14_msg_length: size_nat = 16
let test14_aad_length: size_nat = 0
let test14_c_length: size_nat = 16

let test15_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08; 0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08
]

let test15_nonce = List.Tot.map u8 [
0xca; 0xfe; 0xba; 0xbe; 0xfa; 0xce; 0xdb; 0xad; 0xde; 0xca; 0xf8; 0x88
]

let test15_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39; 0x1a; 0xaf; 0xd2; 0x55
]

let test15_aad = List.Tot.map u8 [

]

let test15_expected = List.Tot.map u8 [
0x52; 0x2d; 0xc1; 0xf0; 0x99; 0x56; 0x7d; 0x07; 0xf4; 0x7f; 0x37; 0xa3; 0x2a; 0x84; 0x42; 0x7d; 0x64; 0x3a; 0x8c; 0xdc; 0xbf; 0xe5; 0xc0; 0xc9; 0x75; 0x98; 0xa2; 0xbd; 0x25; 0x55; 0xd1; 0xaa; 0x8c; 0xb0; 0x8e; 0x48; 0x59; 0x0d; 0xbb; 0x3d; 0xa7; 0xb0; 0x8b; 0x10; 0x56; 0x82; 0x88; 0x38; 0xc5; 0xf6; 0x1e; 0x63; 0x93; 0xba; 0x7a; 0x0a; 0xbc; 0xc9; 0xf6; 0x62; 0x89; 0x80; 0x15; 0xad; 0xb0; 0x94; 0xda; 0xc5; 0xd9; 0x34; 0x71; 0xbd; 0xec; 0x1a; 0x50; 0x22; 0x70; 0xe3; 0xcc; 0x6c
]

let test15_ciphertext = List.Tot.map u8 [
0x52; 0x2d; 0xc1; 0xf0; 0x99; 0x56; 0x7d; 0x07; 0xf4; 0x7f; 0x37; 0xa3; 0x2a; 0x84; 0x42; 0x7d; 0x64; 0x3a; 0x8c; 0xdc; 0xbf; 0xe5; 0xc0; 0xc9; 0x75; 0x98; 0xa2; 0xbd; 0x25; 0x55; 0xd1; 0xaa; 0x8c; 0xb0; 0x8e; 0x48; 0x59; 0x0d; 0xbb; 0x3d; 0xa7; 0xb0; 0x8b; 0x10; 0x56; 0x82; 0x88; 0x38; 0xc5; 0xf6; 0x1e; 0x63; 0x93; 0xba; 0x7a; 0x0a; 0xbc; 0xc9; 0xf6; 0x62; 0x89; 0x80; 0x15; 0xad
]

let test15_hash_key = List.Tot.map u8 [
0xac; 0xbe; 0xf2; 0x05; 0x79; 0xb4; 0xb8; 0xeb; 0xce; 0x88; 0x9b; 0xac; 0x87; 0x32; 0xda; 0xd7
]

let test15_ghash = List.Tot.map u8 [
0x4d; 0xb8; 0x70; 0xd3; 0x7c; 0xb7; 0x5f; 0xcb; 0x46; 0x09; 0x7c; 0x36; 0x23; 0x0d; 0x16; 0x12
]

let test15_nonce_length: size_nat = 12
let test15_msg_length: size_nat = 64
let test15_aad_length: size_nat = 0
let test15_c_length: size_nat = 64

let test16_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08; 0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08
]

let test16_nonce = List.Tot.map u8 [
0xca; 0xfe; 0xba; 0xbe; 0xfa; 0xce; 0xdb; 0xad; 0xde; 0xca; 0xf8; 0x88
]

let test16_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39
]

let test16_aad = List.Tot.map u8 [
0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xab; 0xad; 0xda; 0xd2
]

let test16_expected = List.Tot.map u8 [
0x52; 0x2d; 0xc1; 0xf0; 0x99; 0x56; 0x7d; 0x07; 0xf4; 0x7f; 0x37; 0xa3; 0x2a; 0x84; 0x42; 0x7d; 0x64; 0x3a; 0x8c; 0xdc; 0xbf; 0xe5; 0xc0; 0xc9; 0x75; 0x98; 0xa2; 0xbd; 0x25; 0x55; 0xd1; 0xaa; 0x8c; 0xb0; 0x8e; 0x48; 0x59; 0x0d; 0xbb; 0x3d; 0xa7; 0xb0; 0x8b; 0x10; 0x56; 0x82; 0x88; 0x38; 0xc5; 0xf6; 0x1e; 0x63; 0x93; 0xba; 0x7a; 0x0a; 0xbc; 0xc9; 0xf6; 0x62; 0x76; 0xfc; 0x6e; 0xce; 0x0f; 0x4e; 0x17; 0x68; 0xcd; 0xdf; 0x88; 0x53; 0xbb; 0x2d; 0x55; 0x1b
]

let test16_ciphertext = List.Tot.map u8 [
0x52; 0x2d; 0xc1; 0xf0; 0x99; 0x56; 0x7d; 0x07; 0xf4; 0x7f; 0x37; 0xa3; 0x2a; 0x84; 0x42; 0x7d; 0x64; 0x3a; 0x8c; 0xdc; 0xbf; 0xe5; 0xc0; 0xc9; 0x75; 0x98; 0xa2; 0xbd; 0x25; 0x55; 0xd1; 0xaa; 0x8c; 0xb0; 0x8e; 0x48; 0x59; 0x0d; 0xbb; 0x3d; 0xa7; 0xb0; 0x8b; 0x10; 0x56; 0x82; 0x88; 0x38; 0xc5; 0xf6; 0x1e; 0x63; 0x93; 0xba; 0x7a; 0x0a; 0xbc; 0xc9; 0xf6; 0x62
]

let test16_hash_key = List.Tot.map u8 [
0xac; 0xbe; 0xf2; 0x05; 0x79; 0xb4; 0xb8; 0xeb; 0xce; 0x88; 0x9b; 0xac; 0x87; 0x32; 0xda; 0xd7
]

let test16_ghash = List.Tot.map u8 [
0x8b; 0xd0; 0xc4; 0xd8; 0xaa; 0xcd; 0x39; 0x1e; 0x67; 0xcc; 0xa4; 0x47; 0xe8; 0xc3; 0x8f; 0x65
]

let test16_nonce_length: size_nat = 12
let test16_msg_length: size_nat = 60
let test16_aad_length: size_nat = 20
let test16_c_length: size_nat = 60

let test17_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08; 0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08
]

let test17_nonce = List.Tot.map u8 [
0xca; 0xfe; 0xba; 0xbe; 0xfa; 0xce; 0xdb; 0xad
]

let test17_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39
]

let test17_aad = List.Tot.map u8 [
0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xab; 0xad; 0xda; 0xd2
]

let test17_expected = List.Tot.map u8 [
0xc3; 0x76; 0x2d; 0xf1; 0xca; 0x78; 0x7d; 0x32; 0xae; 0x47; 0xc1; 0x3b; 0xf1; 0x98; 0x44; 0xcb; 0xaf; 0x1a; 0xe1; 0x4d; 0x0b; 0x97; 0x6a; 0xfa; 0xc5; 0x2f; 0xf7; 0xd7; 0x9b; 0xba; 0x9d; 0xe0; 0xfe; 0xb5; 0x82; 0xd3; 0x39; 0x34; 0xa4; 0xf0; 0x95; 0x4c; 0xc2; 0x36; 0x3b; 0xc7; 0x3f; 0x78; 0x62; 0xac; 0x43; 0x0e; 0x64; 0xab; 0xe4; 0x99; 0xf4; 0x7c; 0x9b; 0x1f; 0x3a; 0x33; 0x7d; 0xbf; 0x46; 0xa7; 0x92; 0xc4; 0x5e; 0x45; 0x49; 0x13; 0xfe; 0x2e; 0xa8; 0xf2
]

let test17_ciphertext = List.Tot.map u8 [
0xc3; 0x76; 0x2d; 0xf1; 0xca; 0x78; 0x7d; 0x32; 0xae; 0x47; 0xc1; 0x3b; 0xf1; 0x98; 0x44; 0xcb; 0xaf; 0x1a; 0xe1; 0x4d; 0x0b; 0x97; 0x6a; 0xfa; 0xc5; 0x2f; 0xf7; 0xd7; 0x9b; 0xba; 0x9d; 0xe0; 0xfe; 0xb5; 0x82; 0xd3; 0x39; 0x34; 0xa4; 0xf0; 0x95; 0x4c; 0xc2; 0x36; 0x3b; 0xc7; 0x3f; 0x78; 0x62; 0xac; 0x43; 0x0e; 0x64; 0xab; 0xe4; 0x99; 0xf4; 0x7c; 0x9b; 0x1f
]

let test17_hash_key = List.Tot.map u8 [
0xac; 0xbe; 0xf2; 0x05; 0x79; 0xb4; 0xb8; 0xeb; 0xce; 0x88; 0x9b; 0xac; 0x87; 0x32; 0xda; 0xd7
]

let test17_ghash = List.Tot.map u8 [
0x75; 0xa3; 0x42; 0x88; 0xb8; 0xc6; 0x8f; 0x81; 0x1c; 0x52; 0xb2; 0xe9; 0xa2; 0xf9; 0x7f; 0x63
]

let test17_nonce_length: size_nat = 8
let test17_msg_length: size_nat = 60
let test17_aad_length: size_nat = 20
let test17_c_length: size_nat = 60

let test18_key = List.Tot.map u8 [
0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08; 0xfe; 0xff; 0xe9; 0x92; 0x86; 0x65; 0x73; 0x1c; 0x6d; 0x6a; 0x8f; 0x94; 0x67; 0x30; 0x83; 0x08
]

let test18_nonce = List.Tot.map u8 [
0x93; 0x13; 0x22; 0x5d; 0xf8; 0x84; 0x06; 0xe5; 0x55; 0x90; 0x9c; 0x5a; 0xff; 0x52; 0x69; 0xaa; 0x6a; 0x7a; 0x95; 0x38; 0x53; 0x4f; 0x7d; 0xa1; 0xe4; 0xc3; 0x03; 0xd2; 0xa3; 0x18; 0xa7; 0x28; 0xc3; 0xc0; 0xc9; 0x51; 0x56; 0x80; 0x95; 0x39; 0xfc; 0xf0; 0xe2; 0x42; 0x9a; 0x6b; 0x52; 0x54; 0x16; 0xae; 0xdb; 0xf5; 0xa0; 0xde; 0x6a; 0x57; 0xa6; 0x37; 0xb3; 0x9b
]

let test18_msg = List.Tot.map u8 [
0xd9; 0x31; 0x32; 0x25; 0xf8; 0x84; 0x06; 0xe5; 0xa5; 0x59; 0x09; 0xc5; 0xaf; 0xf5; 0x26; 0x9a; 0x86; 0xa7; 0xa9; 0x53; 0x15; 0x34; 0xf7; 0xda; 0x2e; 0x4c; 0x30; 0x3d; 0x8a; 0x31; 0x8a; 0x72; 0x1c; 0x3c; 0x0c; 0x95; 0x95; 0x68; 0x09; 0x53; 0x2f; 0xcf; 0x0e; 0x24; 0x49; 0xa6; 0xb5; 0x25; 0xb1; 0x6a; 0xed; 0xf5; 0xaa; 0x0d; 0xe6; 0x57; 0xba; 0x63; 0x7b; 0x39
]

let test18_aad = List.Tot.map u8 [
0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xfe; 0xed; 0xfa; 0xce; 0xde; 0xad; 0xbe; 0xef; 0xab; 0xad; 0xda; 0xd2
]

let test18_expected = List.Tot.map u8 [
0x5a; 0x8d; 0xef; 0x2f; 0x0c; 0x9e; 0x53; 0xf1; 0xf7; 0x5d; 0x78; 0x53; 0x65; 0x9e; 0x2a; 0x20; 0xee; 0xb2; 0xb2; 0x2a; 0xaf; 0xde; 0x64; 0x19; 0xa0; 0x58; 0xab; 0x4f; 0x6f; 0x74; 0x6b; 0xf4; 0x0f; 0xc0; 0xc3; 0xb7; 0x80; 0xf2; 0x44; 0x45; 0x2d; 0xa3; 0xeb; 0xf1; 0xc5; 0xd8; 0x2c; 0xde; 0xa2; 0x41; 0x89; 0x97; 0x20; 0x0e; 0xf8; 0x2e; 0x44; 0xae; 0x7e; 0x3f; 0xa4; 0x4a; 0x82; 0x66; 0xee; 0x1c; 0x8e; 0xb0; 0xc8; 0xb5; 0xd4; 0xcf; 0x5a; 0xe9; 0xf1; 0x9a
]

let test18_ciphertext = List.Tot.map u8 [
0x5a; 0x8d; 0xef; 0x2f; 0x0c; 0x9e; 0x53; 0xf1; 0xf7; 0x5d; 0x78; 0x53; 0x65; 0x9e; 0x2a; 0x20; 0xee; 0xb2; 0xb2; 0x2a; 0xaf; 0xde; 0x64; 0x19; 0xa0; 0x58; 0xab; 0x4f; 0x6f; 0x74; 0x6b; 0xf4; 0x0f; 0xc0; 0xc3; 0xb7; 0x80; 0xf2; 0x44; 0x45; 0x2d; 0xa3; 0xeb; 0xf1; 0xc5; 0xd8; 0x2c; 0xde; 0xa2; 0x41; 0x89; 0x97; 0x20; 0x0e; 0xf8; 0x2e; 0x44; 0xae; 0x7e; 0x3f
]

let test18_hash_key = List.Tot.map u8 [
0xac; 0xbe; 0xf2; 0x05; 0x79; 0xb4; 0xb8; 0xeb; 0xce; 0x88; 0x9b; 0xac; 0x87; 0x32; 0xda; 0xd7
]

let test18_ghash = List.Tot.map u8 [
0xd5; 0xff; 0xcf; 0x6f; 0xc5; 0xac; 0x4d; 0x69; 0x72; 0x21; 0x87; 0x42; 0x1a; 0x7f; 0x17; 0x0b
]

let test18_nonce_length: size_nat = 60
let test18_msg_length: size_nat = 60
let test18_aad_length: size_nat = 20
let test18_c_length: size_nat = 60

let test19_key = List.Tot.map u8 [

]

let test19_nonce = List.Tot.map u8 [

]

let test19_msg = List.Tot.map u8 [

]

let test19_aad = List.Tot.map u8 [

]

let test19_expected = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0xff; 0xce; 0xf9; 0xeb; 0xbf; 0xfd; 0xbd; 0x8b; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00
]

let test19_ciphertext = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0xff; 0xce; 0xf9; 0xeb; 0xbf; 0xfd; 0xbd; 0x8b
]

let test19_hash_key = List.Tot.map u8 [
0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0xfc; 0xef; 0xef; 0x64; 0xff; 0xc4; 0x76; 0x6c
]

let test19_ghash = List.Tot.map u8 [
0x35; 0x61; 0xe3; 0x4e; 0x52; 0xd8; 0xb5; 0x98; 0xf9; 0x93; 0x79; 0x82; 0x51; 0x2f; 0xff; 0x27
]

let test19_nonce_length: size_nat = 0
let test19_msg_length: size_nat = 0
let test19_aad_length: size_nat = 0
let test19_c_length: size_nat = 16


val test_aesgcm:
  text_len:size_nat ->
  text:lbytes text_len ->
  aad_len:size_nat ->
  aad:lbytes aad_len ->
  n_len:size_nat ->
  n:lbytes n_len ->
  k:lbytes key_length ->
  expected:lbytes (16 + text_len) ->
  FStar.All.ML unit
let test_aesgcm text_len text aad_len aad n_len n k expected =
  let output = AEAD.aead_encrypt k n text_len text aad_len aad in
  let result = for_all2 (fun a b -> uint_to_nat #U8 a = uint_to_nat #U8 b) output expected in
  IO.print_string   "Expected ciphertext: ";
  let test_expected : lbytes key_length = createL expected in
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a));  IO.print_string ":") (as_list test_expected);
  IO.print_string "\nComputed ciphertext: ";
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a));  IO.print_string ":") (as_list output);
  if result then IO.print_string "\nSuccess!\n"
  else IO.print_string "\nFailure :(\n"

val test_ghash:
  expected:lbytes AEAD.blocksize ->
  text_len:size_nat ->
  text:lbytes text_len ->
  aad_len:size_nat ->
  aad:lbytes aad_len ->
  k:lbytes key_length ->
  FStar.All.ML unit
let test_ghash expected text_len text aad_len aad k =
  let output = AEAD.ghash text_len text aad_len aad (create 16 0uy) k in
  let result = for_all2 (fun a b -> uint_to_nat #U8 a = uint_to_nat #U8 b) output expected in
  IO.print_string   "Expected tag: ";
  let test_expected : lbytes key_length = createL expected in
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a));  IO.print_string ":") (as_list test_expected);
  IO.print_string "\nComputed tag: ";
  List.iter (fun a -> IO.print_string (UInt8.to_string (u8_to_UInt8 a));  IO.print_string ":") (as_list output);
  if result then IO.print_string "\nSuccess!\n"
else IO.print_string "\nFailure :(\n"

let test () =
  test_ghash test1_ghash test1_c_length test1_ciphertext test1_aad_length test1_aad test1_key;
  test_aesgcm test1_msg_length test1_msg test1_aad_length test1_aad test1_nonce_length test1_nonce test1_key test1_expected;
  test_ghash test2_ghash test2_c_length test2_ciphertext test2_aad_length test2_aad test2_key;
  test_aesgcm test2_msg_length test2_msg test2_aad_length test2_aad test2_nonce_length test2_nonce test2_key test2_expected;
  test_ghash test3_ghash test3_c_length test3_ciphertext test3_aad_length test3_aad test3_key;
  test_aesgcm test3_msg_length test3_msg test3_aad_length test3_aad test3_nonce_length test3_nonce test3_key test3_expected;
  test_ghash test4_ghash test4_c_length test4_ciphertext test4_aad_length test4_aad test4_key;
  test_aesgcm test4_msg_length test4_msg test4_aad_length test4_aad test4_nonce_length test4_nonce test4_key test4_expected;
  test_ghash test5_ghash test5_c_length test5_ciphertext test5_aad_length test5_aad test5_key;
  (* test_aesgcm test5_msg_length test5_msg test5_aad_length test5_aad test5_nonce_length test5_nonce test5_key test5_expected; *)
  test_ghash test6_ghash test6_c_length test6_ciphertext test6_aad_length test6_aad test6_key;
  (* test_aesgcm test6_msg_length test6_msg test6_aad_length test6_aad test6_nonce_length test6_nonce test6_key test6_expected; *)
  test_ghash test7_ghash test7_c_length test7_ciphertext test7_aad_length test7_aad test7_key;
  test_aesgcm test7_msg_length test7_msg test7_aad_length test7_aad test7_nonce_length test7_nonce test7_key test7_expected;
  test_ghash test8_ghash test8_c_length test8_ciphertext test8_aad_length test8_aad test8_key;
  test_aesgcm test8_msg_length test8_msg test8_aad_length test8_aad test8_nonce_length test8_nonce test8_key test8_expected;
  test_ghash test9_ghash test9_c_length test9_ciphertext test9_aad_length test9_aad test9_key;
  test_aesgcm test9_msg_length test9_msg test9_aad_length test9_aad test9_nonce_length test9_nonce test9_key test9_expected;
  test_ghash test10_ghash test10_c_length test10_ciphertext test10_aad_length test10_aad test10_key;
  test_aesgcm test10_msg_length test10_msg test10_aad_length test10_aad test10_nonce_length test10_nonce test10_key test10_expected;
  test_ghash test11_ghash test11_c_length test11_ciphertext test11_aad_length test11_aad test11_key;
  (* test_aesgcm test11_msg_length test11_msg test11_aad_length test11_aad test11_nonce_length test11_nonce test11_key test11_expected; *)
  test_ghash test12_ghash test12_c_length test12_ciphertext test12_aad_length test12_aad test12_key;
  (* test_aesgcm test12_msg_length test12_msg test12_aad_length test12_aad test12_nonce_length test12_nonce test12_key test12_expected; *)
  test_ghash test13_ghash test13_c_length test13_ciphertext test13_aad_length test13_aad test13_key;
  test_aesgcm test13_msg_length test13_msg test13_aad_length test13_aad test13_nonce_length test13_nonce test13_key test13_expected;
  test_ghash test14_ghash test14_c_length test14_ciphertext test14_aad_length test14_aad test14_key;
  test_aesgcm test14_msg_length test14_msg test14_aad_length test14_aad test14_nonce_length test14_nonce test14_key test14_expected;
  test_ghash test15_ghash test15_c_length test15_ciphertext test15_aad_length test15_aad test15_key;
  test_aesgcm test15_msg_length test15_msg test15_aad_length test15_aad test15_nonce_length test15_nonce test15_key test15_expected;
  test_ghash test16_ghash test16_c_length test16_ciphertext test16_aad_length test16_aad test16_key;
  test_aesgcm test16_msg_length test16_msg test16_aad_length test16_aad test16_nonce_length test16_nonce test16_key test16_expected;
  test_ghash test17_ghash test17_c_length test17_ciphertext test17_aad_length test17_aad test17_key;
  (* test_aesgcm test17_msg_length test17_msg test17_aad_length test17_aad test17_nonce_length test17_nonce test17_key test17_expected; *)
  test_ghash test18_ghash test18_c_length test18_ciphertext test18_aad_length test18_aad test18_key;
  (* test_aesgcm test18_msg_length test18_msg test18_aad_length test18_aad test18_nonce_length test18_nonce test18_key test18_expected; *)
  test_ghash test19_ghash test19_c_length test19_ciphertext test19_aad_length test19_aad test19_key;
  (* test_aesgcm test19_msg_length test19_msg test19_aad_length test19_aad test19_nonce_length test19_nonce test19_key test19_expected; *)
  ()
