module Test

(* This file is provided for test purposes only. It can be built in a single
 * invocation of KreMLin, as in the Makefile.
 *)

module B = FStar.Buffer
module U32 = FStar.UInt32

open FStar.HyperStack.ST
open EverCrypt.Helpers

val test_sha256: unit -> St unit
let test_sha256 () =
  push_frame();

  let output_len = 32ul in
  let output = B.create 0uy output_len in

  let plaintext_len = 3ul in
  let plaintext = B.createL [ 0x61uy; 0x62uy; 0x63uy; ] in

  let expected = B.createL [
      0xBAuy; 0x78uy; 0x16uy; 0xBFuy; 0x8Fuy; 0x01uy; 0xCFuy; 0xEAuy;
      0x41uy; 0x41uy; 0x40uy; 0xDEuy; 0x5Duy; 0xAEuy; 0x22uy; 0x23uy;
      0xB0uy; 0x03uy; 0x61uy; 0xA3uy; 0x96uy; 0x17uy; 0x7Auy; 0x9Cuy;
      0xB4uy; 0x10uy; 0xFFuy; 0x61uy; 0xF2uy; 0x00uy; 0x15uy; 0xADuy
    ] in

  (* Allocate memory for state *)
  let ctx = B.create 0ul U32.(64ul +^ 64ul +^ 8ul +^ 1ul) in

  (* Call the hash function *)
  EverCrypt.sha256_init ctx;
  EverCrypt.sha256_update_last ctx plaintext plaintext_len;
  EverCrypt.sha256_finish ctx output;

  (* Display the result *)
  TestLib.compare_and_print !$"of SHA256" expected output 32ul;

  pop_frame()

val test_chacha20_poly1305: unit -> St unit
let test_chacha20_poly1305 _ =
  push_frame();

  (* Tests: RFC7539 *)
  let k = B.createL
    [0x80uy; 0x81uy; 0x82uy; 0x83uy; 0x84uy; 0x85uy; 0x86uy; 0x87uy;
     0x88uy; 0x89uy; 0x8auy; 0x8buy; 0x8cuy; 0x8duy; 0x8euy; 0x8fuy;
     0x90uy; 0x91uy; 0x92uy; 0x93uy; 0x94uy; 0x95uy; 0x96uy; 0x97uy;
     0x98uy; 0x99uy; 0x9auy; 0x9buy; 0x9cuy; 0x9duy; 0x9euy; 0x9fuy] in
  let m = B.createL
    [0x4cuy; 0x61uy; 0x64uy; 0x69uy; 0x65uy; 0x73uy; 0x20uy; 0x61uy;
     0x6euy; 0x64uy; 0x20uy; 0x47uy; 0x65uy; 0x6euy; 0x74uy; 0x6cuy;
     0x65uy; 0x6duy; 0x65uy; 0x6euy; 0x20uy; 0x6fuy; 0x66uy; 0x20uy;
     0x74uy; 0x68uy; 0x65uy; 0x20uy; 0x63uy; 0x6cuy; 0x61uy; 0x73uy;
     0x73uy; 0x20uy; 0x6fuy; 0x66uy; 0x20uy; 0x27uy; 0x39uy; 0x39uy;
     0x3auy; 0x20uy; 0x49uy; 0x66uy; 0x20uy; 0x49uy; 0x20uy; 0x63uy;
     0x6fuy; 0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x6fuy; 0x66uy; 0x66uy;
     0x65uy; 0x72uy; 0x20uy; 0x79uy; 0x6fuy; 0x75uy; 0x20uy; 0x6fuy;
     0x6euy; 0x6cuy; 0x79uy; 0x20uy; 0x6fuy; 0x6euy; 0x65uy; 0x20uy;
     0x74uy; 0x69uy; 0x70uy; 0x20uy; 0x66uy; 0x6fuy; 0x72uy; 0x20uy;
     0x74uy; 0x68uy; 0x65uy; 0x20uy; 0x66uy; 0x75uy; 0x74uy; 0x75uy;
     0x72uy; 0x65uy; 0x2cuy; 0x20uy; 0x73uy; 0x75uy; 0x6euy; 0x73uy;
     0x63uy; 0x72uy; 0x65uy; 0x65uy; 0x6euy; 0x20uy; 0x77uy; 0x6fuy;
     0x75uy; 0x6cuy; 0x64uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x69uy;
     0x74uy; 0x2euy] in
  let n = B.createL
    [0x07uy; 0x00uy; 0x00uy; 0x00uy; 0x40uy; 0x41uy; 0x42uy; 0x43uy;
     0x44uy; 0x45uy; 0x46uy; 0x47uy] in
  let aad = B.createL
    [0x50uy; 0x51uy; 0x52uy; 0x53uy; 0xc0uy; 0xc1uy; 0xc2uy; 0xc3uy;
     0xc4uy; 0xc5uy; 0xc6uy; 0xc7uy] in
  let cipher = B.createL
    [0xd3uy; 0x1auy; 0x8duy; 0x34uy; 0x64uy; 0x8euy; 0x60uy; 0xdbuy;
     0x7buy; 0x86uy; 0xafuy; 0xbcuy; 0x53uy; 0xefuy; 0x7euy; 0xc2uy;
     0xa4uy; 0xaduy; 0xeduy; 0x51uy; 0x29uy; 0x6euy; 0x08uy; 0xfeuy;
     0xa9uy; 0xe2uy; 0xb5uy; 0xa7uy; 0x36uy; 0xeeuy; 0x62uy; 0xd6uy;
     0x3duy; 0xbeuy; 0xa4uy; 0x5euy; 0x8cuy; 0xa9uy; 0x67uy; 0x12uy;
     0x82uy; 0xfauy; 0xfbuy; 0x69uy; 0xdauy; 0x92uy; 0x72uy; 0x8buy;
     0x1auy; 0x71uy; 0xdeuy; 0x0auy; 0x9euy; 0x06uy; 0x0buy; 0x29uy;
     0x05uy; 0xd6uy; 0xa5uy; 0xb6uy; 0x7euy; 0xcduy; 0x3buy; 0x36uy;
     0x92uy; 0xdduy; 0xbduy; 0x7fuy; 0x2duy; 0x77uy; 0x8buy; 0x8cuy;
     0x98uy; 0x03uy; 0xaeuy; 0xe3uy; 0x28uy; 0x09uy; 0x1buy; 0x58uy;
     0xfauy; 0xb3uy; 0x24uy; 0xe4uy; 0xfauy; 0xd6uy; 0x75uy; 0x94uy;
     0x55uy; 0x85uy; 0x80uy; 0x8buy; 0x48uy; 0x31uy; 0xd7uy; 0xbcuy;
     0x3fuy; 0xf4uy; 0xdeuy; 0xf0uy; 0x8euy; 0x4buy; 0x7auy; 0x9duy;
     0xe5uy; 0x76uy; 0xd2uy; 0x65uy; 0x86uy; 0xceuy; 0xc6uy; 0x4buy;
     0x61uy; 0x16uy;] in
  let tag = B.createL
     [0x1auy; 0xe1uy; 0x0buy; 0x59uy; 0x4fuy; 0x09uy; 0xe2uy; 0x6auy;
      0x7euy; 0x90uy; 0x2euy; 0xcbuy; 0xd0uy; 0x60uy; 0x06uy; 0x91uy] in
  let cipher' = B.create 0uy 114ul in
  let tag' = B.create 0uy 16ul in

  let l = EverCrypt.chacha20_poly1305_encrypt cipher' tag' m 114ul aad 12ul k n in

  TestLib.compare_and_print !$"of Chacha20-Poly1305 cipher" cipher cipher' 114ul;
  TestLib.compare_and_print !$"of Chacha20-Poly1305 tag" tag tag' 16ul;

  let open FStar.Bytes in
  let m   = bytes_of_hex "4c616469657320616e642047656e746c656d656e206f662074686520636c617373206f66202739393a204966204920636f756c64206f6666657220796f75206f6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73637265656e20776f756c642062652069742e" in
  let aad = bytes_of_hex "50515253c0c1c2c3c4c5c6c7" in
  let k   = bytes_of_hex "808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f" in
  let n   = bytes_of_hex "070000004041424344454647" in
  let cipher', tag' = EverCrypt.Bytes.chacha20_poly1305_encrypt m aad k n in

  ignore(IO.debug_print_string (print_bytes cipher'));
  ignore(IO.debug_print_string (print_bytes tag'));

  pop_frame()


let main (): St C.exit_code =
  push_frame ();
/// Hacl tests
  EverCrypt.(init (Some Hacl));
  test_sha256 ();
  test_chacha20_poly1305 ();
/// Vale tests
  EverCrypt.(init (Some Vale));
  test_sha256 ();
  pop_frame ();
  C.EXIT_SUCCESS
