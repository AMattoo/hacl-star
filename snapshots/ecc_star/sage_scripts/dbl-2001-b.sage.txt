def mynumerator(x):
  if parent(x) == R:
    return x
  return numerator(x)

class fastfrac:
  def __init__(self,top,bot=1):
    if parent(top) == ZZ or parent(top) == R:
      self.top = R(top)
      self.bot = R(bot)
    elif top.__class__ == fastfrac:
      self.top = top.top
      self.bot = top.bot * bot
    else:
      self.top = R(numerator(top))
      self.bot = R(denominator(top)) * bot
  def reduce(self):
    return fastfrac(self.top / self.bot)
  def sreduce(self):
    return fastfrac(I.reduce(self.top),I.reduce(self.bot))
  def iszero(self):
    return self.top in I and not (self.bot in I)
  def isdoublingzero(self):
    return self.top in J and not (self.bot in J)
  def __add__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top + self.bot * other,self.bot)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.bot + self.bot * other.top,self.bot * other.bot)
    return NotImplemented
  def __sub__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top - self.bot * other,self.bot)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.bot - self.bot * other.top,self.bot * other.bot)
    return NotImplemented
  def __neg__(self):
    return fastfrac(-self.top,self.bot)
  def __mul__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top * other,self.bot)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.top,self.bot * other.bot)
    return NotImplemented
  def __rmul__(self,other):
    return self.__mul__(other)
  def __div__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top,self.bot * other)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.bot,self.bot * other.top)
    return NotImplemented
  def __pow__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top ^ other,self.bot ^ other)
    return NotImplemented

def isidentity(x):
  return x.iszero()

def isdoublingidentity(x):
  return x.isdoublingzero()

R.<ua,ub,ux1,uy1,uX1,uY1,uZ1> = PolynomialRing(QQ,7,order='invlex')
I = R.ideal([
  mynumerator((uy1^2)-(ux1^3+ua*ux1+ub))
, mynumerator((ux1)-(uX1/uZ1^2))
, mynumerator((uy1)-(uY1/uZ1^3))
, mynumerator((ua)-(-3))
])

ua = fastfrac(ua)
ub = fastfrac(ub)
ux1 = fastfrac(ux1)
uy1 = fastfrac(uy1)
uX1 = fastfrac(uX1)
uY1 = fastfrac(uY1)
uZ1 = fastfrac(uZ1)


udelta = ((uZ1^2))
ugamma = ((uY1^2))
ubeta = ((uX1*ugamma))
ualpha = ((fastfrac(3)*(uX1-udelta)*(uX1+udelta)))
uX3 = ((ualpha^2-fastfrac(8)*ubeta))
uZ3 = (((uY1+uZ1)^2-ugamma-udelta))
uY3 = ((ualpha*(fastfrac(4)*ubeta-uX3)-fastfrac(8)*ugamma^2))

ux3 = (((fastfrac(3)*ux1^2+ua)^2/(fastfrac(2)*uy1)^2-ux1-ux1)).reduce()
uy3 = (((fastfrac(2)*ux1+ux1)*(fastfrac(3)*ux1^2+ua)/(fastfrac(2)*uy1)-(fastfrac(3)*ux1^2+ua)^3/(fastfrac(2)*uy1)^3-uy1)).reduce()

print isidentity((uy3^2)-(ux3^3+ua*ux3+ub))
print isidentity((ux3)-(uX3/uZ3^2))
print isidentity((uy3)-(uY3/uZ3^3))

