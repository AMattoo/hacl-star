/* This file was auto-generated by KreMLin! */
#include "kremlib.h"
#ifndef __Hacl_UInt128_H
#define __Hacl_UInt128_H





typedef struct 
{
  uint64_t low;
  uint64_t high;
}
FStar_UInt128_uint128;

typedef FStar_UInt128_uint128 FStar_UInt128_t;

extern void FStar_UInt128_constant_time_carry_ok(uint64_t x0, uint64_t x1);

typedef struct 
{
  uint64_t fst;
  uint64_t snd;
  uint64_t thd;
  uint64_t f3;
}
K___uint64_t_uint64_t_uint64_t_uint64_t;

extern Prims_int Hacl_UInt128_n;

typedef FStar_UInt128_uint128 Hacl_UInt128_t;

Prims_int Hacl_UInt128_v(FStar_UInt128_uint128 x);

FStar_UInt128_uint128 Hacl_UInt128_add(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_add_mod(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_sub(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_sub_mod(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_logand(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_logxor(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_logor(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_lognot(FStar_UInt128_uint128 a);

FStar_UInt128_uint128 Hacl_UInt128_shift_right(FStar_UInt128_uint128 a, uint32_t s);

FStar_UInt128_uint128 Hacl_UInt128_shift_left(FStar_UInt128_uint128 a, uint32_t s);

FStar_UInt128_uint128 Hacl_UInt128_eq_mask(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_gte_mask(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_gt_mask(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_lt_mask(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_lte_mask(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128
Hacl_UInt128_op_Plus_Hat(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128
Hacl_UInt128_op_Plus_Percent_Hat(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128
Hacl_UInt128_op_Subtraction_Hat(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128
Hacl_UInt128_op_Subtraction_Percent_Hat(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128
Hacl_UInt128_op_Amp_Hat(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128
Hacl_UInt128_op_Hat_Hat(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128
Hacl_UInt128_op_Bar_Hat(FStar_UInt128_uint128 a, FStar_UInt128_uint128 b);

FStar_UInt128_uint128 Hacl_UInt128_op_Greater_Greater_Hat(FStar_UInt128_uint128 a, uint32_t s);

FStar_UInt128_uint128 Hacl_UInt128_op_Less_Less_Hat(FStar_UInt128_uint128 a, uint32_t s);

FStar_UInt128_uint128 Hacl_UInt128_mul_wide(uint64_t a, uint64_t b);

FStar_UInt128_uint128 Hacl_UInt128_op_Star_Hat(uint64_t a, uint64_t b);

extern FStar_UInt128_uint128 Hacl_UInt128_of_string(Prims_string x0);
#endif
