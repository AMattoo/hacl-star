
/* This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
 * KreMLin invocation: /home/mpolubel/work/kremlin/krml -I /home/mpolubel/work/hacl-star/code/lib/kremlin -I /home/mpolubel/work/kremlin/kremlib -I /home/mpolubel/work/hacl-star/specs -I . -ccopt -march=native -verbose -ldopt -flto -verbose -no-prefix C.Loops -drop Prims,FStar,LowStar,C.Loops.Spec.Loops,Hacl.Cast,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128 -drop Hacl.Spec.Endianness,Hacl.Endianness,Seq.Create,Spec.* -drop Hacl.SHA256 -add-early-include "Hacl_SHA256.h" -add-include "kremlin/c_string.h" -add-include "kremlin/prims_int.h" -ccopt -march=native -tmpdir rsa-c -no-prefix Hacl.Test.RSA -skip-compilation -bundle Hacl.RSAPSS=Hacl.Impl.*,Hacl.RSAPSS rsa-c/out.krml -o rsa-c/Hacl_RSAPSS.c
 * F* version: d22c8d7b
 * KreMLin version: bb3cc303
 */

#include "kremlib.h"
#ifndef __Hacl_RSAPSS_H
#define __Hacl_RSAPSS_H


#include "kremlin/c_string.h"
#include "kremlin/prims_int.h"

bool Hacl_Impl_Lib_eq_b(Prims_int len, uint32_t clen, uint8_t *b1, uint8_t *b2);

void
Hacl_Impl_Convert_text_to_nat(Prims_int len, uint32_t clen, uint8_t *input, uint64_t *res);

typedef enum { Hacl_Impl_Multiplication_Positive, Hacl_Impl_Multiplication_Negative }
Hacl_Impl_Multiplication_sign;

bool
__eq__Hacl_Impl_Multiplication_sign(
  Hacl_Impl_Multiplication_sign y,
  Hacl_Impl_Multiplication_sign x
);

void
Hacl_RSAPSS_rsa_pss_sign(
  Prims_int sLen,
  Prims_int msgLen,
  Prims_int nLen,
  uint32_t pow2_i,
  uint32_t modBits,
  uint32_t eBits,
  uint32_t dBits,
  uint32_t pLen,
  uint32_t qLen,
  uint64_t *skey,
  uint64_t rBlind,
  uint32_t ssLen,
  uint8_t *salt,
  uint32_t mmsgLen,
  uint8_t *msg,
  uint8_t *sgnt
);

bool
Hacl_RSAPSS_rsa_pss_verify(
  Prims_int sLen,
  Prims_int msgLen,
  Prims_int nLen,
  uint32_t pow2_i,
  uint32_t modBits,
  uint32_t eBits,
  uint64_t *pkey,
  uint32_t ssLen,
  uint8_t *sgnt,
  uint32_t mmsgLen,
  uint8_t *msg
);

#define __Hacl_RSAPSS_H_DEFINED
#endif
