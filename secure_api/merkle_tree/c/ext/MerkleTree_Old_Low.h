/* This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
 * KreMLin invocation: Kremlin.native -tmpdir ./ext -drop FStar,Prims,C,C.*,C.Loops.Spec.Loops,Spec.*,Lib.*,WasmSupport -drop Hacl.Cast,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128 -drop Hacl.Spec.Endianness,Hacl.Endianness,Seq.Create -drop Hacl.Impl.SHA2_256.Lemmas,Hacl.Impl.SHA2_384.Lemmas,Hacl.Impl.SHA2_512.Lemmas -drop MerkleTree.Old.High -I ../ ../MerkleTree.Old.Low.fst lib/connect.c lib/Hacl_SHA2_256.c merkle_tree_old.c
 * F* version: e9fccfb3
 * KreMLin version: b561bc14
 */

#include "kremlib.h"
#ifndef __MerkleTree_Old_Low_H
#define __MerkleTree_Old_Low_H

#include "LowStar.h"


typedef uint8_t *MerkleTree_Old_Low_hash;

typedef struct LowStar_Vector_vector_str__uint8_t__s
{
  uint32_t sz;
  uint32_t cap;
  uint8_t **vs;
}
LowStar_Vector_vector_str__uint8_t_;

typedef LowStar_Vector_vector_str__uint8_t_ MerkleTree_Old_Low_hash_vec;

extern uint32_t MerkleTree_Old_Low_hash_size;

extern void MerkleTree_Old_Low_hash_from_hashes(uint8_t *x0, uint8_t *x1, uint8_t *x2);

typedef struct MerkleTree_Old_Low_merkle_tree_s
{
  LowStar_Vector_vector_str__uint8_t_ values;
  LowStar_Vector_vector_str__uint8_t_ iroots;
}
MerkleTree_Old_Low_merkle_tree;

bool MerkleTree_Old_Low_uu___is_MT(MerkleTree_Old_Low_merkle_tree projectee);

LowStar_Vector_vector_str__uint8_t_
MerkleTree_Old_Low___proj__MT__item__values(MerkleTree_Old_Low_merkle_tree projectee);

LowStar_Vector_vector_str__uint8_t_
MerkleTree_Old_Low___proj__MT__item__iroots(MerkleTree_Old_Low_merkle_tree projectee);

typedef MerkleTree_Old_Low_merkle_tree *MerkleTree_Old_Low_mt_ptr;

MerkleTree_Old_Low_merkle_tree *MerkleTree_Old_Low_create_merkle_tree();

LowStar_Vector_vector_str__uint8_t_
MerkleTree_Old_Low_insert_value(LowStar_Vector_vector_str__uint8_t_ vs, uint8_t *nv);

void
MerkleTree_Old_Low_insert_iroots(
  LowStar_Vector_vector_str__uint8_t_ irs,
  uint32_t cpos,
  uint32_t irps,
  uint8_t *acc
);

void MerkleTree_Old_Low_insert(MerkleTree_Old_Low_merkle_tree *mt, uint8_t *nv);

void MerkleTree_Old_Low_compress_or_init(bool actd, uint8_t *acc, uint8_t *nh);

void
MerkleTree_Old_Low_merkle_root_of_iroots(
  LowStar_Vector_vector_str__uint8_t_ irs,
  uint32_t cpos,
  uint32_t irps,
  uint8_t *acc,
  bool actd
);

void MerkleTree_Old_Low_get_root(MerkleTree_Old_Low_merkle_tree *mt, uint8_t *rt);

void MerkleTree_Old_Low_free_merkle_tree(MerkleTree_Old_Low_merkle_tree *mt);

#define __MerkleTree_Old_Low_H_DEFINED
#endif
