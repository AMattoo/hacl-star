# This Makefile is borrowed heavily from:
# https://github.com/project-everest/hacl-star/blob/frodo_sn/frodo/code/Makefile

FSTAR_HOME ?= ../../../FStar
KREMLIN_HOME ?= ../../../kremlin
HACL_HOME ?= ../..

CACHE_DIR = .cache
OUTPUT_DIR = .output
HINT_DIR = .hints
GENERATED_DIR = c
OUT_DIR = c

KREMLIN=$(KREMLIN_HOME)/krml
KREMLIB=$(KREMLIN_HOME)/kremlib

MARCH?=x86_64
VARIANT?=linux
VALE=$(HACL_HOME)/vale/obj
VALE_ASM=$(addprefix $(VALE)/,aesgcm-$(MARCH)-$(VARIANT).S cpuid-$(MARCH)-$(VARIANT).S curve25519-$(MARCH)-$(VARIANT).S sha256-$(MARCH)-$(VARIANT).S)

ALL_TEST_FILES= \
  ./test/merkle_tree_test.h \
  ./test/merkle_tree_test.c

all: build_lib

build_lib:
	rm -f .depend && $(MAKE) .depend
	$(MAKE) stage1
	STAGE=2 $(MAKE) stage2

stage1: $(GENERATED_DIR)/Makefile.include

stage2: $(OUT_DIR)/libmerkletree.a

# 1. Generation of .krml files
# - generate the F* dependency graph via `fstar --dep full`
# - verify every F* file in parallel to generate .checked files
# - extract each .checked file into a .krml file in parallel

FSTAR_INCLUDE_DIRS = \
  $(HACL_HOME)/specs \
  $(HACL_HOME)/code/lib \
  $(HACL_HOME)/code/hash-new \
  $(HACL_HOME)/providers/evercrypt \
  $(KREMLIN_HOME)/kremlib \
  $(HACL_HOME)/vale/code/arch/x64/interop/fsti \
  $(HACL_HOME)/vale/code/arch/x64 \
  $(HACL_HOME)/vale/specs/defs \
  $(HACL_HOME)/vale/specs/hardware \
  $(HACL_HOME)/vale/code/crypto/sha \
  $(HACL_HOME)/vale/code/arch \
  $(HACL_HOME)/vale/code/lib/collections \
  $(HACL_HOME)/vale/code/lib/util \
  $(HACL_HOME)/vale/specs/crypto \
  $(HACL_HOME)/vale/specs/math \
  $(HACL_HOME)/vale/obj/cache_checked 


FSTAR_INCLUDES = $(addprefix --include ,$(FSTAR_INCLUDE_DIRS))

FSTAR = $(FSTAR_HOME)/bin/fstar.exe $(OTHERFLAGS) \
  --cache_checked_modules --cache_dir $(CACHE_DIR) \
  --odir $(OUTPUT_DIR) $(FSTAR_INCLUDES)

FSTARR = $(FSTAR_HOME)/bin/fstar.exe $(OTHERFLAGS) \
  --cache_dir $(CACHE_DIR) \
  --odir $(OUTPUT_DIR) $(FSTAR_INCLUDES)

ENABLE_HINTS = --use_hints --use_hint_hashes --record_hints --query_stats
#--use_hint_hashes --record_hints --query_stats

$(HINT_DIR):
	mkdir -p $@

%.fst-in: $(HINT_DIR)
	@echo --cache_checked_modules --cache_dir $(CACHE_DIR) \
	$(FSTAR_INCLUDES) \
	$(ENABLE_HINTS) --hint_file $(HINT_DIR)/$(basename $@).fst.hints

%.fsti-in: $(HINT_DIR)
	@echo --cache_checked_modules --cache_dir $(CACHE_DIR) \
	$(FSTAR_INCLUDES) \
	$(ENABLE_HINTS) --hint_file $(HINT_DIR)/$(basename $@).fsti.hints

ROOTS = MerkleTree.New.Low.fst MerkleTree.New.Low.Serialization.fst

# We don't want to delete .krml files during extraction.
.PRECIOUS: %.krml

.depend:
	$(FSTAR) --dep full $(ROOTS) \
	--extract '* -FStar -Spec' > $@

include .depend

# Admit SMT queries for some modules
$(CACHE_DIR)/FStar.%.checked $(CACHE_DIR)/LowStar.%.checked $(CACHE_DIR)/C.%.checked: | .depend
	$(FSTAR) $< --admit_smt_queries true && \
	touch $@

$(CACHE_DIR)/prims.fst.checked $(CACHE_DIR)/Spec.Loops.fst.checked $(CACHE_DIR)/Spec.Matrix.fst.checked: | .depend
	$(FSTAR) $< --admit_smt_queries true && \
	touch $@

$(CACHE_DIR)/%.checked: | .depend $(HINT_DIR)
	$(FSTAR) $< \
	  $(ENABLE_HINTS) --hint_file $(HINT_DIR)/$(notdir $<).hints && \
	touch $@

# We mimick what Kremlin would do when it is driving F* and it is given all
# .fst in the command-line: it would add `--expose_interfaces` and expose all
# implementations.

$(OUTPUT_DIR)/%.krml: | .depend
	$(FSTARR) --codegen Kremlin --lax \
	  --extract_module $(basename $(notdir $(subst .checked,,$<))) \
	  $(notdir $(subst .checked,,$<)) && \
	touch $@

# 2. Generation of .c files

KREMLIN_TESTLIB=-add-include '"extracted/TestLib.h"' $(KREMLIB)/c/testlib.c

# We use -drop (deprecated) only to avoid creating unnecessary .c,.h files
$(GENERATED_DIR)/Makefile.include: $(ALL_KRML_FILES) | .depend
	$(KREMLIN) $(KREMLIN_TESTLIB) -skip-compilation \
	-no-prefix 'MerkleTree.New.Low' \
	-no-prefix 'MerkleTree.New.Low.Serialization' \
	-bundle 'Lib.*' \
	-bundle 'Spec.*' \
	-bundle 'Low.*' \
	-library 'EverCrypt,EverCrypt.*' \
	-drop 'Lib,C.*,C.Loops.*' \
	-I $(HACL_HOME)/specs \
	-I $(HACL_HOME)/code/lib \
	-I $(HACL_HOME)/providers/evercrypt \
	-tmpdir $(GENERATED_DIR) \
	-warn-error +9 \
	-fparentheses \
	$^

# The Makefile is manually staged because GNU Make does not understand
# dependencies between the Makefiles we include, i.e. it won't first generate
# the .depend, parse it, then generate Makefile.include, parse it, then
# generate dependencies among the C files
ifeq ($(STAGE),2)

# The top-level invocation guarantees that stage1 has been run and this file is
# there.
include $(GENERATED_DIR)/Makefile.include

# 3. Collecting all of our source files, and generating corresponding object
# files.

# This is auto-generated by KreMLin; since the Makefile is staged via the
# inclusion of Makefile.include, the automated dependency analysis via $(CC) -MM
# also captures the dependencies between these files.
#
# KreMLin sees the fsti's for the various Lib* and LowStar modules and creates .h/.c
# files for them in $(GENERATED_DIR). However, we are only interested in the header,
# and drop these (mostly empty) C files.
ALL_OUR_FILES 	    = $(filter-out FStar_* Lib.c C.c, $(ALL_C_FILES))
ALL_GENERATED_FILES = $(addprefix $(GENERATED_DIR)/,$(ALL_OUR_FILES))

ALL_SOURCES = \
  $(ALL_GENERATED_FILES)

ALL_OBJS = $(patsubst %.c,%.o,$(ALL_SOURCES)) \
  $(OBJS)

INCLUDE_DIRS = \
  $(KREMLIN_HOME)/include \
  $(KREMLIN_HOME)/kremlib \
  $(HACL_HOME)/lib

CFLAGS += -O3 -march=native -mtune=native -funroll-loops
CFLAGS += $(addprefix -I ,$(INCLUDE_DIRS)) -Wall -Wextra -Werror \
  -Wno-parentheses -Wno-unused-parameter -Wno-unused-variable -Wno-infinite-recursion

# GNU Make manual section 4.14
%.d: %.c
	@set -e; rm -f $@; \
	  $(CC) -MM $(CFLAGS) $< > $@.$$$$; \
	  sed 's,\($(notdir $*)\)\.o[ :]*,$(dir $@)\1.o $@ : ,g' < $@.$$$$ > $@; \
	  rm -f $@.$$$$

-include $(patsubst %.c,%.d,$(ALL_SOURCES))

$(OUT_DIR):
	mkdir -p $@

# 4. Collecting all of the object files into a static library.

$(OUT_DIR)/libmerkletree.a: $(ALL_OBJS) | $(OUT_DIR)
	$(AR) rcs $(OUT_DIR)/libmerkletree.a $^

.PHONY: lib
lib: $(ALL_OBJS) | $(OUT_DIR)
	$(AR) rcs $(OUT_DIR)/libmerkletree.a $^

.PRECIOUS: %.o

# This snapshot assumes EverCrypt is built via `CONFIG=everest make` $(HACL_HOME)/providers
.PHONY: snapshot2
snapshot2: $(ALL_SOURCES)
	mkdir -p snapshot
	mkdir -p snapshot/kremlin
	mkdir -p snapshot/kremlin/kremlib/extracted
	cp -R $(KREMLIN_HOME)/include snapshot/kremlin/include
	cp -R $(KREMLIB)/extracted/*.{c,h} snapshot/kremlin/kremlib/extracted
	cp -R $(KREMLIB)/c/*.c snapshot/kremlin
	mkdir -p snapshot/hacl
	cp -R $(HACL_HOME)/code/dist/compact/*.{c,h} snapshot/hacl
	mkdir -p snapshot/evercrypt/include
	mkdir -p snapshot/evercrypt/generated
	mkdir -p snapshot/evercrypt/c
	cp -R $(HACL_HOME)/providers/include/*.h snapshot/evercrypt/include
	cp $(HACL_HOME)/providers/generated/*.{c,h} snapshot/evercrypt/generated
	rm -f snapshot/evercrypt/generated/AEAD_Poly1305_64.{c,h}
	for i in evercrypt_autoconfig.c; do cp $(HACL_HOME)/providers/evercrypt/c/$$i snapshot/evercrypt/c; done
	mkdir -p snapshot/vale
	for i in $(VALE_ASM); do cp $$i snapshot/vale; done
	cp -R $(GENERATED_DIR)/*.h snapshot
	for i in $(ALL_SOURCES); do cp $$i snapshot; done
	for i in $(ALL_TEST_FILES); do cp $$i snapshot; done
	cp MerkleTree.h snapshot
	rm -f snapshot/kremlin/kremlib/extracted/FStar_UInt.c

endif # COMPILE

# 5. Clean targets that do not re-trigger anything except perhaps the generation
# of the .depend file.

SHELL=/bin/bash

.PHONY: clean
clean:
	rm -rf $(GENERATED_DIR) $(OUT_DIR)/*.exe $(OUT_DIR)/*.a
	rm -rf include/*.o include/*.d

.PHONY: clean-c
clean-c:
	rm -rf $(GENERATED_DIR)/{*.{c,h},Makefile.include}

.PHONY: distclean
distclean: clean
	rm -rf $(OUT_DIR) $(CACHE_DIR) $(OUTPUT_DIR)

.PHONY: snapshot
snapshot:
	rm -f .depend && $(MAKE) .depend
	$(MAKE) stage1
	STAGE=2 $(MAKE) snapshot2
