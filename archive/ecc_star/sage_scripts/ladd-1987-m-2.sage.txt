def mynumerator(x):
  if parent(x) == R:
    return x
  return numerator(x)

class fastfrac:
  def __init__(self,top,bot=1):
    if parent(top) == ZZ or parent(top) == R:
      self.top = R(top)
      self.bot = R(bot)
    elif top.__class__ == fastfrac:
      self.top = top.top
      self.bot = top.bot * bot
    else:
      self.top = R(numerator(top))
      self.bot = R(denominator(top)) * bot
  def reduce(self):
    return fastfrac(self.top / self.bot)
  def sreduce(self):
    return fastfrac(I.reduce(self.top),I.reduce(self.bot))
  def iszero(self):
    return self.top in I and not (self.bot in I)
  def isdoublingzero(self):
    return self.top in J and not (self.bot in J)
  def __add__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top + self.bot * other,self.bot)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.bot + self.bot * other.top,self.bot * other.bot)
    return NotImplemented
  def __sub__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top - self.bot * other,self.bot)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.bot - self.bot * other.top,self.bot * other.bot)
    return NotImplemented
  def __neg__(self):
    return fastfrac(-self.top,self.bot)
  def __mul__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top * other,self.bot)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.top,self.bot * other.bot)
    return NotImplemented
  def __rmul__(self,other):
    return self.__mul__(other)
  def __div__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top,self.bot * other)
    if other.__class__ == fastfrac:
      return fastfrac(self.top * other.bot,self.bot * other.top)
    return NotImplemented
  def __pow__(self,other):
    if parent(other) == ZZ:
      return fastfrac(self.top ^ other,self.bot ^ other)
    return NotImplemented

def isidentity(x):
  return x.iszero()

def isdoublingidentity(x):
  return x.isdoublingzero()

R.<ua24,ua,ub,ux3,uy3,ux2,uy2,uX1,uZ1,uX2,uZ2,uX3,uZ3> = PolynomialRing(QQ,13,order='invlex')
ux_2 = (ux2)
uy_2 = (-uy2)
ux1 = (ub*(uy_2-uy3)^2/(ux_2-ux3)^2-ua-ux3-ux_2)
uy1 = ((2*ux3+ux_2+ua)*(uy_2-uy3)/(ux_2-ux3)-ub*(uy_2-uy3)^3/(ux_2-ux3)^3-uy3)
I = R.ideal([
  mynumerator((ub*uy1^2)-(ux1^3+ua*ux1^2+ux1))
, mynumerator((ux1)-(uX1/uZ1))
, mynumerator((ub*uy2^2)-(ux2^3+ua*ux2^2+ux2))
, mynumerator((ux2)-(uX2/uZ2))
, mynumerator((ub*uy3^2)-(ux3^3+ua*ux3^2+ux3))
, mynumerator((ux3)-(uX3/uZ3))
, mynumerator((4*ua24)-(ua+2))
])

ua24 = fastfrac(ua24)
ua = fastfrac(ua)
ub = fastfrac(ub)
ux3 = fastfrac(ux3)
uy3 = fastfrac(uy3)
ux2 = fastfrac(ux2)
uy2 = fastfrac(uy2)
uX1 = fastfrac(uX1)
uZ1 = fastfrac(uZ1)
uX2 = fastfrac(uX2)
uZ2 = fastfrac(uZ2)
uX3 = fastfrac(uX3)
uZ3 = fastfrac(uZ3)
ux_2 = fastfrac(ux_2)
uy_2 = fastfrac(uy_2)
ux1 = fastfrac(ux1)
uy1 = fastfrac(uy1)


uX5 = ((uZ1*((uX3-uZ3)*(uX2+uZ2)+(uX3+uZ3)*(uX2-uZ2))^2))
uZ5 = ((uX1*((uX3-uZ3)*(uX2+uZ2)-(uX3+uZ3)*(uX2-uZ2))^2))
uX4 = (((uX2+uZ2)^2*(uX2-uZ2)^2))
uZ4 = (((fastfrac(4)*uX2*uZ2)*((uX2-uZ2)^2+ua24*(fastfrac(4)*uX2*uZ2))))

ux4 = ((ub*(fastfrac(3)*ux2^2+fastfrac(2)*ua*ux2+fastfrac(1))^2/(fastfrac(2)*ub*uy2)^2-ua-ux2-ux2)).reduce()
ux5 = ((ub*(uy2-uy3)^2/(ux2-ux3)^2-ua-ux3-ux2)).reduce()
uy4 = (((fastfrac(2)*ux2+ux2+ua)*(fastfrac(3)*ux2^2+fastfrac(2)*ua*ux2+fastfrac(1))/(fastfrac(2)*ub*uy2)-ub*(fastfrac(3)*ux2^2+fastfrac(2)*ua*ux2+fastfrac(1))^3/(fastfrac(2)*ub*uy2)^3-uy2)).reduce()
uy5 = (((fastfrac(2)*ux3+ux2+ua)*(uy2-uy3)/(ux2-ux3)-ub*(uy2-uy3)^3/(ux2-ux3)^3-uy3)).reduce()

print isidentity((ub*uy5^2)-(ux5^3+ua*ux5^2+ux5)) or isidentity(uy1*uy1*uy2*uy3*ux1*ux1*ux2*ux3*((ub*uy5^2)-(ux5^3+ua*ux5^2+ux5)))
print isidentity((ux5)-(uX5/uZ5)) or isidentity(uy1*uy1*uy2*uy3*ux1*ux1*ux2*ux3*((ux5)-(uX5/uZ5)))
print isidentity((ub*uy5^2)-(ux5^3+ua*ux5^2+ux5)) or isidentity(uy1*uy1*uy2*uy3*ux1*ux1*ux2*ux3*((ub*uy5^2)-(ux5^3+ua*ux5^2+ux5)))
print isidentity((ux5)-(uX5/uZ5)) or isidentity(uy1*uy1*uy2*uy3*ux1*ux1*ux2*ux3*((ux5)-(uX5/uZ5)))

