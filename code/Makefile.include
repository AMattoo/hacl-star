UNAME := $(shell uname)

FSTAR_HOME?=../../dependencies/FStar
KREMLIN_HOME?=$(FSTAR_HOME)/../kremlin
HACL_HOME=../..
HINTS_ENABLED?=--use_hints

HYPERSTACK=$(FSTAR_HOME)/ulib/hyperstack

HACL_LIB=$(HACL_HOME)/code/lib
HACL_FILES=Hacl.UInt8.fst Hacl.UInt16.fst Hacl.UInt32.fst Hacl.UInt64.fst Hacl.UInt128.fst Hacl.Cast.fst Hacl.Types.fst Hacl.Policies.fst
HACL_LIB_FILES=$(addprefix $(HACL_LIB)/, $(HACL_FILES))
HACL_KREMLIN=$(HACL_LIB)/kremlin
HACL_KREMLIN_FILES=$(addprefix $(HACL_KREMLIN)/, $(HACL_FILES))
HACL_API=$(HACL_HOME)/code/api
HACL_CRYPTO_UTILS=$(HACL_HOME)/code/lib

FSTAR_LIB_FILES= \
	FStar.Mul.fst \
	FStar.Squash.fsti \
	FStar.Squash.fst \
	FStar.Classical.fst \
	FStar.StrongExcludedMiddle.fst \
	FStar.PropositionalExtensionality.fst \
	FStar.FunctionalExtensionality.fst \
	FStar.PredicateExtensionality.fst \
	FStar.List.Tot.Base.fst \
	FStar.List.Tot.Properties.fst \
	FStar.List.Tot.fst \
	FStar.Seq.Base.fst \
	FStar.Seq.Properties.fst \
	FStar.Seq.fst \
	FStar.Math.Lib.fst \
	FStar.Math.Lemmas.fst \
	FStar.BitVector.fst \
	FStar.Int.fst \
	FStar.UInt.fst \
	FStar.UInt32.fst \
	FStar.Int32.fst \
	FStar.Int8.fst \
	FStar.Int16.fst \
	FStar.Int63.fst \
	FStar.Int64.fst \
	FStar.Int128.fst \
	FStar.UInt8.fst \
	FStar.UInt16.fst \
	FStar.UInt63.fst \
	FStar.UInt64.fst \
	FStar.UInt128.fst \
	FStar.Int.Cast.fst \
	FStar.TSet.fst \
	FStar.Set.fst \
	FStar.Map.fst \
	FStar.Heap.fst \
	FStar.Ghost.fst \
	FStar.HyperHeap.fst \
	FStar.HyperStack.fst \
	FStar.ST.fst \
	FStar.Buffer.fst


ifeq ($(CI),true)
VERBOSE=
else
VERBOSE=-verbose
endif

KREMLIN=$(KREMLIN_HOME)/krml
ifeq ($(CC),ccomp)
  KREMLIN_ARGS=-cc compcert $(VERBOSE)
else
  KREMLIN_ARGS=-ccopt -march=native $(VERBOSE) -ldopt -flto
endif

# Linux specific compilation instruction for PneuTube
ifeq ($(UNAME), Linux)
KREMLIN_ARGS+= -ccopt -D_GNU_SOURCE
endif

KREMLIB=$(KREMLIN_HOME)/kremlib
KREMTEST=$(KREMLIN_HOME)/test

FSTAR_OPTIONS_VER=-fsopt $(HINTS_ENABLED) -skip-extraction
FSTAR_OPTIONS_KREMLIN=
FSTAR=$(KREMLIN) -verify $(VERBOSE) -skip-compilation

ifndef CLOUD_VERIFY
  FSTAR_BASE=$(FSTAR_HOME)/bin/fstar.exe $(HINTS_ENABLED) $(OTHERFLAGS) --include $(HYPERSTACK)
else
  KREMLIN_HOME=\$$H/kremlin
  CURRENT_SUBDIR:=$(subst $(abspath $(HACL_HOME))/,,$(abspath $(shell pwd)))
  FSTAR_BASE=/mnt/f/dev/sec/FStar-cloud-verify/bin/fabc-make.exe add -i $(HACL_HOME)/tmpids -d 'code/$(CURRENT_SUBDIR)' $(FABC_EXTRA) -- \$$H/bin/fstar.exe $(HINTS_ENABLED) $(OTHERFLAGS) --include \$$H/ulib/hyperstack
endif

OCAMLOPT=ocamlfind opt -thread -package batteries,zarith,stdint -linkpkg -g \
	$(FSTAR_HOME)/ulib/ml/fstarlib.cmxa -I $(FSTAR_HOME)/ulib/ml/ \
	-I $(FSTAR_HOME)/ulib/ml/extracted \
	-I $(FSTAR_HOME)/ulib/ml/hyperstack -w -20-26-3-8-58
OCAML_OPTIONS=-fsopt "--lax" -fsopt "--codegen OCaml" -fsopt "--no_location_info"
OCAML_LIB=$(FSTAR_HOME)/ulib/ml/

ml-lib:
	$(MAKE) -C $(FSTAR_HOME)/ulib/ml MEM=HST

import-lib:
	@cp $(HACL_LIB_FILES) .

import-kremlin:
	@cp $(HACL_KREMLIN_FILES)) .

%.fst-lax: %.fst
	$(FSTAR) --lax $(FSTAR_INCLUDES) $^

%.fst-ver: %.fst
	$(FSTAR) $(addprefix -fsopt , $(FSTAR_OPTIONS_VER)) $(FSTAR_INCLUDES) --verify_module $(basename $(notdir $@)) $^

%.fst-krml: %.fst
	$(KREMLIN) $(KREMLIN_INCLUDES) $^
