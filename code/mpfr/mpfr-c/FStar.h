/* This file was auto-generated by KreMLin! */
#include "kremlib.h"
#ifndef __FStar_H
#define __FStar_H



#include "testlib.h"

typedef void *FStar_Pervasives_ex_pre;

typedef struct 
{
  enum {
    FStar_Pervasives___internal_ocaml_attributes_PpxDerivingShow,
    FStar_Pervasives___internal_ocaml_attributes_PpxDerivingShowConstant
  }
  tag;
  union { struct  { Prims_string _0; } case_PpxDerivingShowConstant; } ;
}
FStar_Pervasives___internal_ocaml_attributes;

typedef void *FStar_Set_eqtype;

extern void FStar_PropositionalExtensionality_axiom();

extern void
FStar_Monotonic_Heap_equal_extensional(
  FStar_Monotonic_Heap_heap x0,
  FStar_Monotonic_Heap_heap x1
);

extern FStar_Monotonic_Heap_heap FStar_Monotonic_Heap_emp;

extern void *FStar_Monotonic_Heap_lemma_mref_injectivity;

extern FStar_Monotonic_Heap_aref FStar_Monotonic_Heap_dummy_aref;

extern bool
FStar_Monotonic_Heap_aref_equal(FStar_Monotonic_Heap_aref x0, FStar_Monotonic_Heap_aref x1);

extern Prims_nat FStar_Monotonic_Heap_addr_of_aref(FStar_Monotonic_Heap_aref x0);

extern bool FStar_Monotonic_Heap_aref_is_mm(FStar_Monotonic_Heap_aref x0);

extern void *FStar_Monotonic_Heap_gref_of(FStar_Monotonic_Heap_aref x0, void *x1, void *x2);

extern void
*FStar_Monotonic_Heap_ref_of(
  FStar_Monotonic_Heap_heap x0,
  FStar_Monotonic_Heap_aref x1,
  void *x2,
  void *x3
);

extern void
FStar_Monotonic_Heap_aref_live_at_aref_of(
  FStar_Monotonic_Heap_heap x0,
  void *x1,
  void *x2,
  void *x3
);

extern void
FStar_Monotonic_Heap_contains_gref_of(
  FStar_Monotonic_Heap_heap x0,
  FStar_Monotonic_Heap_aref x1,
  void *x2,
  void *x3
);

extern void
FStar_Monotonic_Heap_aref_of_gref_of(FStar_Monotonic_Heap_aref x0, void *x1, void *x2);

extern void *FStar_Monotonic_Heap__eof;

typedef struct 
{
  void *t;
  void **b;
}
FStar_Buffer_abuffer;

extern bool FStar_Buffer_arefs(Prims_prop (*x0)(FStar_Buffer_abuffer x0), Prims_nat x1);

typedef void *(*FStar_HyperStack_All_all_pre)(FStar_Monotonic_HyperStack_mem x0);

extern Prims_int FStar_Int_logand(Prims_pos x0, Prims_int x1, Prims_int x2);

extern Prims_int FStar_Int_logxor(Prims_pos x0, Prims_int x1, Prims_int x2);

extern Prims_int FStar_Int_logor(Prims_pos x0, Prims_int x1, Prims_int x2);

extern Prims_int FStar_Int_lognot(Prims_pos x0, Prims_int x1);

extern Prims_int FStar_Int_shift_right(Prims_pos x0, Prims_int x1, Prims_nat x2);
#endif
