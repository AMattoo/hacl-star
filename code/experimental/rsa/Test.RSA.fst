module Test.RSA

open FStar.HyperStack.All
open RSA
open FStar.Buffer
open Convert

val main: unit -> Stack FStar.Int32.t
  (requires (fun h -> True))
  (ensures  (fun h0 r h1 -> True))
let main () =
    push_frame();
    let msg = createL [
	 	0x85uy; 0x13uy; 0x84uy; 0xcduy; 0xfeuy; 0x81uy; 0x9cuy; 0x22uy; 0xeduy; 0x6cuy; 0x4cuy; 0xcbuy; 0x30uy; 0xdauy; 0xebuy; 0x5cuy; 
		0xf0uy; 0x59uy; 0xbcuy; 0x8euy; 0x11uy; 0x66uy; 0xb7uy; 0xe3uy; 0x53uy; 0x0cuy; 0x4cuy; 0x23uy; 0x3euy; 0x2buy; 0x5fuy; 0x8fuy;
	 	0x71uy; 0xa1uy; 0xccuy; 0xa5uy; 0x82uy; 0xd4uy; 0x3euy; 0xccuy; 0x72uy; 0xb1uy; 0xbcuy; 0xa1uy; 0x6duy; 0xfcuy; 0x70uy; 0x13uy; 
		0x22uy; 0x6buy; 0x9euy] in
    let salt = createL [
	    0xefuy; 0x28uy; 0x69uy; 0xfauy; 0x40uy; 0xc3uy; 0x46uy; 0xcbuy; 0x18uy; 0x3duy; 0xabuy; 0x3duy; 0x7buy; 0xffuy; 0xc9uy; 0x8fuy;
		0xd5uy; 0x6duy; 0xf4uy; 0x2duy] in
	let n = createL [
		0xa5uy; 0x6euy; 0x4auy; 0x0euy; 0x70uy; 0x10uy; 0x17uy; 0x58uy; 0x9auy; 0x51uy; 0x87uy; 0xdcuy; 0x7euy; 0xa8uy; 0x41uy; 0xd1uy;
		0x56uy; 0xf2uy; 0xecuy; 0x0euy; 0x36uy; 0xaduy; 0x52uy; 0xa4uy; 0x4duy; 0xfeuy; 0xb1uy; 0xe6uy; 0x1fuy; 0x7auy; 0xd9uy; 0x91uy;
		0xd8uy; 0xc5uy; 0x10uy; 0x56uy; 0xffuy; 0xeduy; 0xb1uy; 0x62uy; 0xb4uy; 0xc0uy; 0xf2uy; 0x83uy; 0xa1uy; 0x2auy; 0x88uy; 0xa3uy;
		0x94uy; 0xdfuy; 0xf5uy; 0x26uy; 0xabuy; 0x72uy; 0x91uy; 0xcbuy; 0xb3uy; 0x07uy; 0xceuy; 0xabuy; 0xfcuy; 0xe0uy; 0xb1uy; 0xdfuy;
		0xd5uy; 0xcduy; 0x95uy; 0x08uy; 0x09uy; 0x6duy; 0x5buy; 0x2buy; 0x8buy; 0x6duy; 0xf5uy; 0xd6uy; 0x71uy; 0xefuy; 0x63uy; 0x77uy;
		0xc0uy; 0x92uy; 0x1cuy; 0xb2uy; 0x3cuy; 0x27uy; 0x0auy; 0x70uy; 0xe2uy; 0x59uy; 0x8euy; 0x6fuy; 0xf8uy; 0x9duy; 0x19uy; 0xf1uy;
		0x05uy; 0xacuy; 0xc2uy; 0xd3uy; 0xf0uy; 0xcbuy; 0x35uy; 0xf2uy; 0x92uy; 0x80uy; 0xe1uy; 0x38uy; 0x6buy; 0x6fuy; 0x64uy; 0xc4uy;
		0xefuy; 0x22uy; 0xe1uy; 0xe1uy; 0xf2uy; 0x0duy; 0x0cuy; 0xe8uy; 0xcfuy; 0xfbuy; 0x22uy; 0x49uy; 0xbduy; 0x9auy; 0x21uy; 0x37uy] in
	let e = createL [0x01uy; 0x00uy; 0x01uy] in
	let d = createL [
		0x33uy; 0xa5uy; 0x04uy; 0x2auy; 0x90uy; 0xb2uy; 0x7duy; 0x4fuy; 0x54uy; 0x51uy; 0xcauy; 0x9buy; 0xbbuy; 0xd0uy; 0xb4uy; 0x47uy; 
		0x71uy; 0xa1uy; 0x01uy; 0xafuy; 0x88uy; 0x43uy; 0x40uy; 0xaeuy; 0xf9uy; 0x88uy; 0x5fuy; 0x2auy; 0x4buy; 0xbeuy; 0x92uy; 0xe8uy; 
		0x94uy; 0xa7uy; 0x24uy; 0xacuy; 0x3cuy; 0x56uy; 0x8cuy; 0x8fuy; 0x97uy; 0x85uy; 0x3auy; 0xd0uy; 0x7cuy; 0x02uy; 0x66uy; 0xc8uy; 
		0xc6uy; 0xa3uy; 0xcauy; 0x09uy; 0x29uy; 0xf1uy; 0xe8uy; 0xf1uy; 0x12uy; 0x31uy; 0x88uy; 0x44uy; 0x29uy; 0xfcuy; 0x4duy; 0x9auy; 
		0xe5uy; 0x5fuy; 0xeeuy; 0x89uy; 0x6auy; 0x10uy; 0xceuy; 0x70uy; 0x7cuy; 0x3euy; 0xd7uy; 0xe7uy; 0x34uy; 0xe4uy; 0x47uy; 0x27uy; 
		0xa3uy; 0x95uy; 0x74uy; 0x50uy; 0x1auy; 0x53uy; 0x26uy; 0x83uy; 0x10uy; 0x9cuy; 0x2auy; 0xbauy; 0xcauy; 0xbauy; 0x28uy; 0x3cuy; 
		0x31uy; 0xb4uy; 0xbduy; 0x2fuy; 0x53uy; 0xc3uy; 0xeeuy; 0x37uy; 0xe3uy; 0x52uy; 0xceuy; 0xe3uy; 0x4fuy; 0x9euy; 0x50uy; 0x3buy; 
		0xd8uy; 0x0cuy; 0x06uy; 0x22uy; 0xaduy; 0x79uy; 0xc6uy; 0xdcuy; 0xeeuy; 0x88uy; 0x35uy; 0x47uy; 0xc6uy; 0xa3uy; 0xb3uy; 0x25uy ] in
	let nNat = create 0uL (get_size_nat 128ul) in text_to_nat n 128ul nNat;
	let eNat = create 0uL (get_size_nat 3ul) in text_to_nat e 3ul eNat;
	let dNat = create 0uL (get_size_nat 128ul) in text_to_nat d 128ul dNat;
	let pkey = Mk_rsa_pubkey nNat eNat in
	let skey = Mk_rsa_privkey pkey dNat in
	let modBits = 1024ul in
	let pkeyBits = 24ul in
	let skeyBits = 1024ul in
	let msgLen = 51ul in
	let sgnt = create 0uy (get_octets modBits) in
	rsa_sign modBits skeyBits msgLen msg skey salt sgnt;
	let test = rsa_verify modBits msgLen pkeyBits sgnt pkey msg in
    if test then C.print_string (C.string_of_literal "SUCCESS") else C.print_string (C.string_of_literal "Test failed");
    pop_frame();
    C.exit_success